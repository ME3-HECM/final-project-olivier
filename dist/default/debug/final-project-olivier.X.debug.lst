

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Mar 14 14:24:47 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18LF67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    54                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    55                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    56   000000                     
    57                           ; Generated 06/04/2022 GMT
    58                           ; 
    59                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution. Publication is not required when
    73                           ;        this file is used in an embedded application.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18LF67K40 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91   000000                     
    92                           	psect	idataCOMRAM
    93   001FA4                     __pidataCOMRAM:
    94                           	callstack 0
    95                           
    96                           ;initializer for __45drightdelay
    97   001FA4  00AA               	dw	170
    98                           
    99                           ;initializer for __45dleftdelay
   100   001FA6  00AA               	dw	170
   101                           
   102                           ;initializer for _ForwardFlag
   103   001FA8  01                 	db	1
   104                           
   105                           	psect	idataBANK0
   106   001F50                     __pidataBANK0:
   107                           	callstack 0
   108                           
   109                           ;initializer for main@F14659
   110   001F50  1E84               	dw	7812
   111   001F52  1E84               	dw	7812
   112   001F54  1E84               	dw	7812
   113                           
   114                           ;initializer for main@F14657
   115   001F56  0000               	dw	0
   116   001F58  0001               	dw	1
   117   001F5A  0002               	dw	2
   118                           
   119                           ;initializer for __halfsquare
   120   001F5C  015E               	dw	350
   121                           
   122                           ;initializer for __1square
   123   001F5E  02BC               	dw	700
   124   000000                     _TX4REG	set	3812
   125   000000                     _RC4STAbits	set	3815
   126   000000                     _SP4BRGH	set	3814
   127   000000                     _LATFbits	set	3966
   128   000000                     _LATDbits	set	3964
   129   000000                     _LATGbits	set	3967
   130   000000                     _TRISEbits	set	3973
   131   000000                     _TRISFbits	set	3974
   132   000000                     _CCPR2H	set	4006
   133   000000                     _CCPR1H	set	4010
   134   000000                     _SSP2CON2bits	set	3802
   135   000000                     _RX4PPS	set	3605
   136   000000                     _SSP2CLKPPS	set	3612
   137   000000                     _SSP2DATPPS	set	3613
   138   000000                     _ANSELDbits	set	3751
   139   000000                     _SSP2ADD	set	3798
   140   000000                     _SSP2CON1bits	set	3801
   141   000000                     _RC4REG	set	3811
   142   000000                     _SP4BRGL	set	3813
   143   000000                     _TX4STAbits	set	3816
   144   000000                     _BAUD4CONbits	set	3817
   145   000000                     _SSP2CON2	set	3802
   146   000000                     _TRISDbits	set	3972
   147   000000                     _CCPR4H	set	3873
   148   000000                     _CCPR3H	set	3877
   149   000000                     _SSP2STAT	set	3800
   150   000000                     _ANSELFbits	set	3764
   151   000000                     _SSP2BUF	set	3797
   152   000000                     _PIE0bits	set	3625
   153   000000                     _PIR4bits	set	3639
   154   000000                     _RC0PPS	set	3682
   155   000000                     _RC7PPS	set	3689
   156   000000                     _RD5PPS	set	3695
   157   000000                     _RE2PPS	set	3700
   158   000000                     _RD6PPS	set	3696
   159   000000                     _CCP1CONbits	set	4011
   160   000000                     _CCPTMRS0bits	set	4013
   161   000000                     _T2PR	set	4028
   162   000000                     _T2CONbits	set	4029
   163   000000                     _CCP2CONbits	set	4007
   164   000000                     _LATAbits	set	3961
   165   000000                     _CCP3CONbits	set	3878
   166   000000                     _LATCbits	set	3963
   167   000000                     _LATEbits	set	3965
   168   000000                     _TRISCbits	set	3971
   169   000000                     _CCP4CONbits	set	3874
   170   000000                     _TRISHbits	set	3976
   171   000000                     _TRISGbits	set	3975
   172   000000                     _PORTFbits	set	3982
   173   000000                     _TRISAbits	set	3969
   174   000000                     _LATHbits	set	3968
   175   000000                     _RE4PPS	set	3702
   176   000000                     _RG6PPS	set	3720
   177   000000                     _TMR0L	set	4051
   178   000000                     _TMR0H	set	4052
   179   000000                     _T0CON0bits	set	4053
   180   000000                     _T0CON1bits	set	4054
   181   000000                     _T2CLKCONbits	set	4031
   182   000000                     _T2HLTbits	set	4030
   183   000000                     _INTCONbits	set	4082
   184   000000                     _PIE4bits	set	3629
   185   000000                     _PIR0bits	set	3635
   186                           
   187                           	psect	smallconst
   188   000E00                     __psmallconst:
   189                           	callstack 0
   190   000E00  00                 	db	0
   191   000E01                     STR_1:
   192                           
   193                           ; BSR set to: 14
   194   000E01  43                 	db	67	;'C'
   195   000E02  6F                 	db	111	;'o'
   196   000E03  6C                 	db	108	;'l'
   197   000E04  6F                 	db	111	;'o'
   198   000E05  75                 	db	117	;'u'
   199   000E06  72                 	db	114	;'r'
   200   000E07  20                 	db	32
   201   000E08  69                 	db	105	;'i'
   202   000E09  73                 	db	115	;'s'
   203   000E0A  20                 	db	32
   204   000E0B  25                 	db	37
   205   000E0C  73                 	db	115	;'s'
   206   000E0D  20                 	db	32
   207   000E0E  20                 	db	32
   208   000E0F  0D                 	db	13
   209   000E10  00                 	db	0
   210   000E11                     
   211                           ; BSR set to: 14
   212   000E11  4C                 	db	76	;'L'
   213   000E12  69                 	db	105	;'i'
   214   000E13  67                 	db	103	;'g'
   215   000E14  68                 	db	104	;'h'
   216   000E15  74                 	db	116	;'t'
   217   000E16  20                 	db	32
   218   000E17  42                 	db	66	;'B'
   219   000E18  6C                 	db	108	;'l'
   220   000E19  75                 	db	117	;'u'
   221   000E1A  65                 	db	101	;'e'
   222   000E1B  00                 	db	0
   223   000E1C                     
   224                           ; BSR set to: 14
   225   000E1C  44                 	db	68	;'D'
   226   000E1D  61                 	db	97	;'a'
   227   000E1E  72                 	db	114	;'r'
   228   000E1F  6B                 	db	107	;'k'
   229   000E20  20                 	db	32
   230   000E21  42                 	db	66	;'B'
   231   000E22  6C                 	db	108	;'l'
   232   000E23  75                 	db	117	;'u'
   233   000E24  65                 	db	101	;'e'
   234   000E25  00                 	db	0
   235   000E26                     
   236                           ; BSR set to: 14
   237   000E26  45                 	db	69	;'E'
   238   000E27  67                 	db	103	;'g'
   239   000E28  67                 	db	103	;'g'
   240   000E29  73                 	db	115	;'s'
   241   000E2A  68                 	db	104	;'h'
   242   000E2B  65                 	db	101	;'e'
   243   000E2C  6C                 	db	108	;'l'
   244   000E2D  6C                 	db	108	;'l'
   245   000E2E  00                 	db	0
   246   000E2F                     
   247                           ; BSR set to: 14
   248   000E2F  4F                 	db	79	;'O'
   249   000E30  72                 	db	114	;'r'
   250   000E31  61                 	db	97	;'a'
   251   000E32  6E                 	db	110	;'n'
   252   000E33  67                 	db	103	;'g'
   253   000E34  65                 	db	101	;'e'
   254   000E35  00                 	db	0
   255   000E36                     
   256                           ; BSR set to: 14
   257   000E36  59                 	db	89	;'Y'
   258   000E37  65                 	db	101	;'e'
   259   000E38  6C                 	db	108	;'l'
   260   000E39  6C                 	db	108	;'l'
   261   000E3A  6F                 	db	111	;'o'
   262   000E3B  77                 	db	119	;'w'
   263   000E3C  00                 	db	0
   264   000E3D                     
   265                           ; BSR set to: 14
   266   000E3D  47                 	db	71	;'G'
   267   000E3E  72                 	db	114	;'r'
   268   000E3F  65                 	db	101	;'e'
   269   000E40  65                 	db	101	;'e'
   270   000E41  6E                 	db	110	;'n'
   271   000E42  00                 	db	0
   272   000E43                     
   273                           ; BSR set to: 14
   274   000E43  50                 	db	80	;'P'
   275   000E44  69                 	db	105	;'i'
   276   000E45  6E                 	db	110	;'n'
   277   000E46  6B                 	db	107	;'k'
   278   000E47  00                 	db	0
   279   000E48                     
   280                           ; BSR set to: 14
   281   000E48  52                 	db	82	;'R'
   282   000E49  65                 	db	101	;'e'
   283   000E4A  64                 	db	100	;'d'
   284   000E4B  00                 	db	0
   285   000E4C  00                 	db	0	; dummy byte at the end
   286   000000                     
   287                           ; #config settings
   288                           
   289                           	psect	cinit
   290   001CCE                     __pcinit:
   291                           	callstack 0
   292   001CCE                     start_initialization:
   293                           	callstack 0
   294   001CCE                     __initialization:
   295                           	callstack 0
   296                           
   297                           ; Initialize objects allocated to BANK0 (16 bytes)
   298                           ; load TBLPTR registers with __pidataBANK0
   299   001CCE  0E50               	movlw	low __pidataBANK0
   300   001CD0  6EF6               	movwf	tblptrl,c
   301   001CD2  0E1F               	movlw	high __pidataBANK0
   302   001CD4  6EF7               	movwf	tblptrh,c
   303   001CD6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   304   001CD8  6EF8               	movwf	tblptru,c
   305   001CDA  EE00  F0C6         	lfsr	0,__pdataBANK0
   306   001CDE  EE10 F010          	lfsr	1,16
   307   001CE2                     copy_data0:
   308   001CE2  0009               	tblrd		*+
   309   001CE4  CFF5 FFEE          	movff	tablat,postinc0
   310   001CE8  50E5               	movf	postdec1,w,c
   311   001CEA  50E1               	movf	fsr1l,w,c
   312   001CEC  E1FA               	bnz	copy_data0
   313                           
   314                           ; Initialize objects allocated to COMRAM (5 bytes)
   315                           ; load TBLPTR registers with __pidataCOMRAM
   316   001CEE  0EA4               	movlw	low __pidataCOMRAM
   317   001CF0  6EF6               	movwf	tblptrl,c
   318   001CF2  0E1F               	movlw	high __pidataCOMRAM
   319   001CF4  6EF7               	movwf	tblptrh,c
   320   001CF6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   321   001CF8  6EF8               	movwf	tblptru,c
   322   001CFA  EE00  F05A         	lfsr	0,__pdataCOMRAM
   323   001CFE  EE10 F005          	lfsr	1,5
   324   001D02                     copy_data1:
   325   001D02  0009               	tblrd		*+
   326   001D04  CFF5 FFEE          	movff	tablat,postinc0
   327   001D08  50E5               	movf	postdec1,w,c
   328   001D0A  50E1               	movf	fsr1l,w,c
   329   001D0C  E1FA               	bnz	copy_data1
   330                           
   331                           ; Clear objects allocated to BANK0 (102 bytes)
   332   001D0E  EE00  F060         	lfsr	0,__pbssBANK0
   333   001D12  0E66               	movlw	102
   334   001D14                     clear_0:
   335   001D14  6AEE               	clrf	postinc0,c
   336   001D16  06E8               	decf	wreg,f,c
   337   001D18  E1FD               	bnz	clear_0
   338                           
   339                           ; Clear objects allocated to COMRAM (22 bytes)
   340   001D1A  EE00  F044         	lfsr	0,__pbssCOMRAM
   341   001D1E  0E16               	movlw	22
   342   001D20                     clear_1:
   343   001D20  6AEE               	clrf	postinc0,c
   344   001D22  06E8               	decf	wreg,f,c
   345   001D24  E1FD               	bnz	clear_1
   346   001D26                     end_of_initialization:
   347                           	callstack 0
   348   001D26                     __end_of__initialization:
   349                           	callstack 0
   350   001D26  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   351   001D28  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   352   001D2A  0E00               	movlw	low (__Lsmallconst shr (0+16))
   353   001D2C  6EF8               	movwf	tblptru,c
   354   001D2E  0E0E               	movlw	high __Lsmallconst
   355   001D30  6EF7               	movwf	tblptrh,c
   356   001D32  0100               	movlb	0
   357   001D34  EF12  F00A         	goto	_main	;jump to C main() function
   358                           
   359                           	psect	bssCOMRAM
   360   000044                     __pbssCOMRAM:
   361                           	callstack 0
   362   000044                     _movementCount:
   363                           	callstack 0
   364   000044                     	ds	2
   365   000046                     _maxTime:
   366                           	callstack 0
   367   000046                     	ds	2
   368   000048                     _motorR:
   369                           	callstack 0
   370   000048                     	ds	9
   371   000051                     _motorL:
   372                           	callstack 0
   373   000051                     	ds	9
   374                           
   375                           	psect	dataCOMRAM
   376   00005A                     __pdataCOMRAM:
   377                           	callstack 0
   378   00005A                     __45drightdelay:
   379                           	callstack 0
   380   00005A                     	ds	2
   381   00005C                     __45dleftdelay:
   382                           	callstack 0
   383   00005C                     	ds	2
   384   00005E                     _ForwardFlag:
   385                           	callstack 0
   386   00005E                     	ds	1
   387                           
   388                           	psect	bssBANK0
   389   000060                     __pbssBANK0:
   390                           	callstack 0
   391   000060                     _colorf:
   392                           	callstack 0
   393   000060                     	ds	22
   394   000076                     _timerMemory:
   395                           	callstack 0
   396   000076                     	ds	40
   397   00009E                     _movementMemory:
   398                           	callstack 0
   399   00009E                     	ds	40
   400                           
   401                           	psect	dataBANK0
   402   0000C6                     __pdataBANK0:
   403                           	callstack 0
   404   0000C6                     main@F14659:
   405                           	callstack 0
   406   0000C6                     	ds	6
   407   0000CC                     main@F14657:
   408                           	callstack 0
   409   0000CC                     	ds	6
   410   0000D2                     __halfsquare:
   411                           	callstack 0
   412   0000D2                     	ds	2
   413   0000D4                     __1square:
   414                           	callstack 0
   415   0000D4                     	ds	2
   416                           
   417                           	psect	cstackCOMRAM
   418   000001                     __pcstackCOMRAM:
   419                           	callstack 0
   420   000001                     ??_I2C_2_Master_Idle:
   421   000001                     ?_getTimerValue:
   422                           	callstack 0
   423   000001                     ?___wmul:
   424                           	callstack 0
   425   000001                     ClickLEDOn@power:
   426                           	callstack 0
   427   000001                     initDCmotorsPWM@PWMperiod:
   428                           	callstack 0
   429   000001                     ___wmul@multiplier:
   430                           	callstack 0
   431                           
   432                           ; 2 bytes @ 0x0
   433   000001                     	ds	1
   434   000002                     I2C_2_Master_Write@data_byte:
   435                           	callstack 0
   436                           
   437                           ; 1 bytes @ 0x1
   438   000002                     	ds	1
   439   000003                     ??_getTimerValue:
   440   000003                     color_writetoaddr@value:
   441                           	callstack 0
   442   000003                     ___wmul@multiplicand:
   443                           	callstack 0
   444                           
   445                           ; 2 bytes @ 0x2
   446   000003                     	ds	1
   447   000004                     color_writetoaddr@address:
   448                           	callstack 0
   449                           
   450                           ; 1 bytes @ 0x3
   451   000004                     	ds	1
   452   000005                     ??_color_click_init:
   453   000005                     getTimerValue@timerCount:
   454                           	callstack 0
   455   000005                     ___wmul@product:
   456                           	callstack 0
   457                           
   458                           ; 2 bytes @ 0x4
   459   000005                     	ds	2
   460   000007                     ?___lwdiv:
   461                           	callstack 0
   462   000007                     ___lwdiv@dividend:
   463                           	callstack 0
   464                           
   465                           ; 2 bytes @ 0x6
   466   000007                     	ds	2
   467   000009                     ___lwdiv@divisor:
   468                           	callstack 0
   469                           
   470                           ; 2 bytes @ 0x8
   471   000009                     	ds	2
   472   00000B                     ___lwdiv@quotient:
   473                           	callstack 0
   474                           
   475                           ; 2 bytes @ 0xA
   476   00000B                     	ds	2
   477   00000D                     ___lwdiv@counter:
   478                           	callstack 0
   479                           
   480                           ; 1 bytes @ 0xC
   481   00000D                     	ds	1
   482   00000E                     setMotorPWM@m:
   483                           	callstack 0
   484                           
   485                           ; 2 bytes @ 0xD
   486   00000E                     	ds	2
   487   000010                     ??_setMotorPWM:
   488                           
   489                           ; 1 bytes @ 0xF
   490   000010                     	ds	2
   491   000012                     setMotorPWM@posDuty:
   492                           	callstack 0
   493                           
   494                           ; 1 bytes @ 0x11
   495   000012                     	ds	1
   496   000013                     setMotorPWM@negDuty:
   497                           	callstack 0
   498                           
   499                           ; 1 bytes @ 0x12
   500   000013                     	ds	1
   501   000014                     stop@mL:
   502                           	callstack 0
   503   000014                     turnLeft@mL:
   504                           	callstack 0
   505   000014                     turnRight@mL:
   506                           	callstack 0
   507   000014                     fullSpeedAhead@mL:
   508                           	callstack 0
   509   000014                     fullSpeedReverse@mL:
   510                           	callstack 0
   511                           
   512                           ; 2 bytes @ 0x13
   513   000014                     	ds	2
   514   000016                     stop@mR:
   515                           	callstack 0
   516   000016                     turnLeft@mR:
   517                           	callstack 0
   518   000016                     turnRight@mR:
   519                           	callstack 0
   520   000016                     fullSpeedAhead@mR:
   521                           	callstack 0
   522   000016                     fullSpeedReverse@mR:
   523                           	callstack 0
   524                           
   525                           ; 2 bytes @ 0x15
   526   000016                     	ds	2
   527   000018                     ??_stop:
   528   000018                     ??_fullSpeedAhead:
   529   000018                     ??_fullSpeedReverse:
   530   000018                     turnLeft@i:
   531                           	callstack 0
   532   000018                     turnRight@i:
   533                           	callstack 0
   534                           
   535                           ; 2 bytes @ 0x17
   536   000018                     	ds	1
   537   000019                     fullSpeedAhead@i:
   538                           	callstack 0
   539   000019                     fullSpeedReverse@i:
   540                           	callstack 0
   541                           
   542                           ; 2 bytes @ 0x18
   543   000019                     	ds	1
   544   00001A                     Left45@mL:
   545                           	callstack 0
   546   00001A                     Right45@mL:
   547                           	callstack 0
   548                           
   549                           ; 2 bytes @ 0x19
   550   00001A                     	ds	1
   551   00001B                     reverseHalfSquare@mL:
   552                           	callstack 0
   553                           
   554                           ; 2 bytes @ 0x1A
   555   00001B                     	ds	1
   556   00001C                     Left45@mR:
   557                           	callstack 0
   558   00001C                     Right45@mR:
   559                           	callstack 0
   560                           
   561                           ; 2 bytes @ 0x1B
   562   00001C                     	ds	1
   563   00001D                     reverseHalfSquare@mR:
   564                           	callstack 0
   565                           
   566                           ; 2 bytes @ 0x1C
   567   00001D                     	ds	1
   568   00001E                     ??_Left45:
   569   00001E                     ??_Right45:
   570                           
   571                           ; 1 bytes @ 0x1D
   572   00001E                     	ds	1
   573   00001F                     ??_reverseHalfSquare:
   574                           
   575                           ; 1 bytes @ 0x1E
   576   00001F                     	ds	1
   577   000020                     rotate180left@mL:
   578                           	callstack 0
   579                           
   580                           ; 2 bytes @ 0x1F
   581   000020                     	ds	1
   582   000021                     Red_R90@mL:
   583                           	callstack 0
   584   000021                     Green_L90@mL:
   585                           	callstack 0
   586   000021                     Yellow_rev1_R90@mL:
   587                           	callstack 0
   588   000021                     Pink_rev1_L90@mL:
   589                           	callstack 0
   590   000021                     Orange_R135@mL:
   591                           	callstack 0
   592   000021                     LightBlue_L135@mL:
   593                           	callstack 0
   594                           
   595                           ; 2 bytes @ 0x20
   596   000021                     	ds	1
   597   000022                     rotate180left@mR:
   598                           	callstack 0
   599                           
   600                           ; 2 bytes @ 0x21
   601   000022                     	ds	1
   602   000023                     Red_R90@mR:
   603                           	callstack 0
   604   000023                     Green_L90@mR:
   605                           	callstack 0
   606   000023                     Yellow_rev1_R90@mR:
   607                           	callstack 0
   608   000023                     Pink_rev1_L90@mR:
   609                           	callstack 0
   610   000023                     Orange_R135@mR:
   611                           	callstack 0
   612   000023                     LightBlue_L135@mR:
   613                           	callstack 0
   614                           
   615                           ; 2 bytes @ 0x22
   616   000023                     	ds	1
   617   000024                     Blue_T180@mL:
   618                           	callstack 0
   619                           
   620                           ; 2 bytes @ 0x23
   621   000024                     	ds	1
   622   000025                     ??_Yellow_rev1_R90:
   623   000025                     ??_Pink_rev1_L90:
   624   000025                     
   625                           ; 1 bytes @ 0x24
   626   000025                     	ds	1
   627   000026                     Blue_T180@mR:
   628                           	callstack 0
   629                           
   630                           ; 2 bytes @ 0x25
   631   000026                     	ds	2
   632   000028                     White@mL:
   633                           	callstack 0
   634                           
   635                           ; 2 bytes @ 0x27
   636   000028                     	ds	2
   637   00002A                     White@mR:
   638                           	callstack 0
   639                           
   640                           ; 2 bytes @ 0x29
   641   00002A                     	ds	2
   642   00002C                     White@movementCount:
   643                           	callstack 0
   644                           
   645                           ; 2 bytes @ 0x2B
   646   00002C                     	ds	2
   647   00002E                     White@movementMemory:
   648                           	callstack 0
   649                           
   650                           ; 2 bytes @ 0x2D
   651   00002E                     	ds	2
   652   000030                     White@timerMemory:
   653                           	callstack 0
   654                           
   655                           ; 2 bytes @ 0x2F
   656   000030                     	ds	2
   657   000032                     ??_White:
   658                           
   659                           ; 1 bytes @ 0x31
   660   000032                     	ds	2
   661   000034                     White@tempTimer:
   662                           	callstack 0
   663                           
   664                           ; 2 bytes @ 0x33
   665   000034                     	ds	2
   666   000036                     White@i:
   667                           	callstack 0
   668                           
   669                           ; 2 bytes @ 0x35
   670   000036                     	ds	2
   671   000038                     main@timerMemory:
   672                           	callstack 0
   673                           
   674                           ; 6 bytes @ 0x37
   675   000038                     	ds	6
   676   00003E                     main@movementMemory:
   677                           	callstack 0
   678                           
   679                           ; 6 bytes @ 0x3D
   680   00003E                     	ds	6
   681                           
   682 ;;
   683 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   684 ;;
   685 ;; *************** function _main *****************
   686 ;; Defined at:
   687 ;;		line 19 in file "main.c"
   688 ;; Parameters:    Size  Location     Type
   689 ;;		None
   690 ;; Auto vars:     Size  Location     Type
   691 ;;  data          100    0        unsigned char [100]
   692 ;;  movementMemo    6   61[COMRAM] unsigned int [3]
   693 ;;  timerMemory     6   55[COMRAM] unsigned int [3]
   694 ;;  PWMcycle        2    0        unsigned int 
   695 ;;  movementCoun    2    0        unsigned int 
   696 ;;  wall            1    0        unsigned char 
   697 ;; Return value:  Size  Location     Type
   698 ;;                  1    wreg      void 
   699 ;; Registers used:
   700 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   701 ;; Tracked objects:
   702 ;;		On entry : 0/0
   703 ;;		On exit  : 0/0
   704 ;;		Unchanged: 0/0
   705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   707 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   709 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   710 ;;Total ram usage:       12 bytes
   711 ;; Hardware stack levels required when called: 8
   712 ;; This function calls:
   713 ;;		_ClickLEDOn
   714 ;;		_I2C_2_Master_Init
   715 ;;		_Interrupts_init
   716 ;;		_LED_init
   717 ;;		_Timer0_init
   718 ;;		_White
   719 ;;		_color_click_init
   720 ;;		_initDCmotorsPWM
   721 ;;		_initUSART4
   722 ;; This function is called by:
   723 ;;		Startup code after reset
   724 ;; This function uses a non-reentrant model
   725 ;;
   726                           
   727                           	psect	text0
   728   001424                     __ptext0:
   729                           	callstack 0
   730   001424                     _main:
   731                           	callstack 23
   732   001424                     
   733                           ;main.c: 20:     char data[100];;main.c: 22:     initUSART4();
   734   001424  EC78  F00F         	call	_initUSART4	;wreg free
   735   001428                     
   736                           ;main.c: 23:     color_click_init();
   737   001428  ECF0  F00E         	call	_color_click_init	;wreg free
   738   00142C                     
   739                           ;main.c: 24:     I2C_2_Master_Init();
   740   00142C  EC2A  F00F         	call	_I2C_2_Master_Init	;wreg free
   741   001430                     
   742                           ;main.c: 25:     LED_init();
   743   001430  ECB0  F00F         	call	_LED_init	;wreg free
   744   001434                     
   745                           ;main.c: 26:     Interrupts_init();
   746   001434  ECBD  F00F         	call	_Interrupts_init	;wreg free
   747   001438                     
   748                           ;main.c: 27:     Timer0_init();
   749   001438  EC66  F00F         	call	_Timer0_init	;wreg free
   750   00143C                     
   751                           ;main.c: 29:     initDCmotorsPWM(PWMcycle);
   752   00143C  0E00               	movlw	0
   753   00143E  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   754   001440  0E63               	movlw	99
   755   001442  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   756   001444  EC1A  F00C         	call	_initDCmotorsPWM	;wreg free
   757   001448                     
   758                           ;main.c: 31:     motorL.power=0;
   759   001448  0E00               	movlw	0
   760   00144A  6E51               	movwf	_motorL^0,c
   761   00144C                     
   762                           ;main.c: 32:     motorL.direction=1;
   763   00144C  0E01               	movlw	1
   764   00144E  6E52               	movwf	(_motorL+1)^0,c
   765   001450                     
   766                           ;main.c: 33:     motorL.brakemode=1;
   767   001450  0E01               	movlw	1
   768   001452  6E53               	movwf	(_motorL+2)^0,c
   769   001454                     
   770                           ;main.c: 34:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   771   001454  0EAA               	movlw	170
   772   001456  6E56               	movwf	(_motorL+5)^0,c
   773   001458  0E0F               	movlw	15
   774   00145A  6E57               	movwf	(_motorL+6)^0,c
   775   00145C                     
   776                           ;main.c: 35:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   777   00145C  0EA6               	movlw	166
   778   00145E  6E58               	movwf	(_motorL+7)^0,c
   779   001460  0E0F               	movlw	15
   780   001462  6E59               	movwf	(_motorL+8)^0,c
   781   001464                     
   782                           ;main.c: 36:     motorL.PWMperiod=PWMcycle;
   783   001464  0E00               	movlw	0
   784   001466  6E55               	movwf	(_motorL+4)^0,c
   785   001468  0E63               	movlw	99
   786   00146A  6E54               	movwf	(_motorL+3)^0,c
   787   00146C                     
   788                           ;main.c: 38:     motorR.power=0;
   789   00146C  0E00               	movlw	0
   790   00146E  6E48               	movwf	_motorR^0,c
   791   001470                     
   792                           ;main.c: 39:     motorR.direction=1;
   793   001470  0E01               	movlw	1
   794   001472  6E49               	movwf	(_motorR+1)^0,c
   795   001474                     
   796                           ;main.c: 40:     motorR.brakemode=1;
   797   001474  0E01               	movlw	1
   798   001476  6E4A               	movwf	(_motorR+2)^0,c
   799   001478                     
   800                           ;main.c: 41:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   801   001478  0E25               	movlw	37
   802   00147A  6E4D               	movwf	(_motorR+5)^0,c
   803   00147C  0E0F               	movlw	15
   804   00147E  6E4E               	movwf	(_motorR+6)^0,c
   805   001480                     
   806                           ;main.c: 42:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   807   001480  0E21               	movlw	33
   808   001482  6E4F               	movwf	(_motorR+7)^0,c
   809   001484  0E0F               	movlw	15
   810   001486  6E50               	movwf	(_motorR+8)^0,c
   811   001488                     
   812                           ;main.c: 43:     motorR.PWMperiod=PWMcycle;
   813   001488  0E00               	movlw	0
   814   00148A  6E4C               	movwf	(_motorR+4)^0,c
   815   00148C  0E63               	movlw	99
   816   00148E  6E4B               	movwf	(_motorR+3)^0,c
   817   001490                     
   818                           ;main.c: 45:     TRISFbits.TRISF2=1;
   819   001490  8486               	bsf	134,2,c	;volatile
   820   001492                     
   821                           ;main.c: 46:     ANSELFbits.ANSELF2=0;
   822   001492  010E               	movlb	14	; () banked
   823   001494  95B4               	bcf	180,2,b	;volatile
   824   001496                     l109:
   825                           
   826                           ;main.c: 47:     while(PORTFbits.RF2){
   827   001496  B48E               	btfsc	142,2,c	;volatile
   828   001498  EF50  F00A         	goto	u1471
   829   00149C  EF52  F00A         	goto	u1470
   830   0014A0                     u1471:
   831   0014A0  EF4B  F00A         	goto	l109
   832   0014A4                     u1470:
   833   0014A4                     
   834                           ;main.c: 51:     ClickLEDOn(0);
   835   0014A4  0E00               	movlw	0
   836   0014A6  EC10  F00F         	call	_ClickLEDOn
   837   0014AA                     
   838                           ;main.c: 54:         unsigned int movementMemory[3] = {0,1,2};
   839   0014AA  EE20  F0CC         	lfsr	2,main@F14657
   840   0014AE  EE10  F03E         	lfsr	1,main@movementMemory
   841   0014B2  0E05               	movlw	5
   842   0014B4                     u1481:
   843   0014B4  CFDB FFE3          	movff	plusw2,plusw1
   844   0014B8  06E8               	decf	wreg,f,c
   845   0014BA  E2FC               	bc	u1481
   846   0014BC                     
   847                           ;main.c: 55:         unsigned int timerMemory[3] = {7812, 7812, 7812};
   848   0014BC  EE20  F0C6         	lfsr	2,main@F14659
   849   0014C0  EE10  F038         	lfsr	1,main@timerMemory
   850   0014C4  0E05               	movlw	5
   851   0014C6                     u1491:
   852   0014C6  CFDB FFE3          	movff	plusw2,plusw1
   853   0014CA  06E8               	decf	wreg,f,c
   854   0014CC  E2FC               	bc	u1491
   855   0014CE                     
   856                           ;main.c: 59:         White(&motorL,&motorR,movementCount, movementMemory, timerMemory);
   857   0014CE  0E51               	movlw	low _motorL
   858   0014D0  6E28               	movwf	White@mL^0,c
   859   0014D2  0E00               	movlw	high _motorL
   860   0014D4  6E29               	movwf	(White@mL+1)^0,c
   861   0014D6  0E48               	movlw	low _motorR
   862   0014D8  6E2A               	movwf	White@mR^0,c
   863   0014DA  0E00               	movlw	high _motorR
   864   0014DC  6E2B               	movwf	(White@mR+1)^0,c
   865   0014DE  0E00               	movlw	0
   866   0014E0  6E2D               	movwf	(White@movementCount+1)^0,c
   867   0014E2  0E03               	movlw	3
   868   0014E4  6E2C               	movwf	White@movementCount^0,c
   869   0014E6  0E3E               	movlw	low main@movementMemory
   870   0014E8  6E2E               	movwf	White@movementMemory^0,c
   871   0014EA  0E00               	movlw	high main@movementMemory
   872   0014EC  6E2F               	movwf	(White@movementMemory+1)^0,c
   873   0014EE  0E38               	movlw	low main@timerMemory
   874   0014F0  6E30               	movwf	White@timerMemory^0,c
   875   0014F2  0E00               	movlw	high main@timerMemory
   876   0014F4  6E31               	movwf	(White@timerMemory+1)^0,c
   877   0014F6  EC27  F007         	call	_White	;wreg free
   878   0014FA                     l116:
   879   0014FA  EF7D  F00A         	goto	l116
   880   0014FE  EF14  F000         	goto	start
   881   001502                     __end_of_main:
   882                           	callstack 0
   883                           
   884 ;; *************** function _initUSART4 *****************
   885 ;; Defined at:
   886 ;;		line 7 in file "serial.c"
   887 ;; Parameters:    Size  Location     Type
   888 ;;		None
   889 ;; Auto vars:     Size  Location     Type
   890 ;;		None
   891 ;; Return value:  Size  Location     Type
   892 ;;                  1    wreg      void 
   893 ;; Registers used:
   894 ;;		wreg, status,2
   895 ;; Tracked objects:
   896 ;;		On entry : 0/0
   897 ;;		On exit  : 0/0
   898 ;;		Unchanged: 0/0
   899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   904 ;;Total ram usage:        0 bytes
   905 ;; Hardware stack levels used: 1
   906 ;; Hardware stack levels required when called: 1
   907 ;; This function calls:
   908 ;;		Nothing
   909 ;; This function is called by:
   910 ;;		_main
   911 ;; This function uses a non-reentrant model
   912 ;;
   913                           
   914                           	psect	text1
   915   001EF0                     __ptext1:
   916                           	callstack 0
   917   001EF0                     _initUSART4:
   918                           	callstack 29
   919   001EF0                     
   920                           ;serial.c: 8:     TRISCbits.TRISC4=1;
   921   001EF0  8883               	bsf	131,4,c	;volatile
   922                           
   923                           ;serial.c: 9:     TRISCbits.TRISC1=1;
   924   001EF2  8283               	bsf	131,1,c	;volatile
   925   001EF4                     
   926                           ;serial.c: 10:     RC0PPS = 0x12;
   927   001EF4  0E12               	movlw	18
   928   001EF6  010E               	movlb	14	; () banked
   929   001EF8  6F62               	movwf	98,b	;volatile
   930                           
   931                           ;serial.c: 11:     RX4PPS = 0x11;
   932   001EFA  0E11               	movlw	17
   933   001EFC  6F15               	movwf	21,b	;volatile
   934   001EFE                     
   935                           ; BSR set to: 14
   936                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
   937   001EFE  97E9               	bcf	233,3,b	;volatile
   938   001F00                     
   939                           ; BSR set to: 14
   940                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
   941   001F00  95E8               	bcf	232,2,b	;volatile
   942                           
   943                           ;serial.c: 15:     SP4BRGL = 51;
   944   001F02  0E33               	movlw	51
   945   001F04  6FE5               	movwf	229,b	;volatile
   946                           
   947                           ;serial.c: 16:     SP4BRGH = 0;
   948   001F06  0E00               	movlw	0
   949   001F08  6FE6               	movwf	230,b	;volatile
   950   001F0A                     
   951                           ; BSR set to: 14
   952                           ;serial.c: 18:     RC4STAbits.CREN = 1;
   953   001F0A  89E7               	bsf	231,4,b	;volatile
   954   001F0C                     
   955                           ; BSR set to: 14
   956                           ;serial.c: 19:     TX4STAbits.TXEN = 1;
   957   001F0C  8BE8               	bsf	232,5,b	;volatile
   958   001F0E                     
   959                           ; BSR set to: 14
   960                           ;serial.c: 20:     RC4STAbits.SPEN = 1;
   961   001F0E  8FE7               	bsf	231,7,b	;volatile
   962   001F10                     
   963                           ; BSR set to: 14
   964   001F10  0012               	return		;funcret
   965   001F12                     __end_of_initUSART4:
   966                           	callstack 0
   967                           
   968 ;; *************** function _initDCmotorsPWM *****************
   969 ;; Defined at:
   970 ;;		line 11 in file "dc_motor.c"
   971 ;; Parameters:    Size  Location     Type
   972 ;;  PWMperiod       2    0[COMRAM] unsigned int 
   973 ;; Auto vars:     Size  Location     Type
   974 ;;		None
   975 ;; Return value:  Size  Location     Type
   976 ;;                  1    wreg      void 
   977 ;; Registers used:
   978 ;;		wreg, status,2
   979 ;; Tracked objects:
   980 ;;		On entry : 0/0
   981 ;;		On exit  : 0/0
   982 ;;		Unchanged: 0/0
   983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   984 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   987 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   988 ;;Total ram usage:        2 bytes
   989 ;; Hardware stack levels used: 1
   990 ;; Hardware stack levels required when called: 1
   991 ;; This function calls:
   992 ;;		Nothing
   993 ;; This function is called by:
   994 ;;		_main
   995 ;; This function uses a non-reentrant model
   996 ;;
   997                           
   998                           	psect	text2
   999   001834                     __ptext2:
  1000                           	callstack 0
  1001   001834                     _initDCmotorsPWM:
  1002                           	callstack 29
  1003   001834                     
  1004                           ;dc_motor.c: 13:     TRISEbits.TRISE2=0;
  1005   001834  9485               	bcf	133,2,c	;volatile
  1006                           
  1007                           ;dc_motor.c: 14:     TRISCbits.TRISC7=0;
  1008   001836  9E83               	bcf	131,7,c	;volatile
  1009                           
  1010                           ;dc_motor.c: 15:     TRISEbits.TRISE4=0;
  1011   001838  9885               	bcf	133,4,c	;volatile
  1012                           
  1013                           ;dc_motor.c: 16:     TRISGbits.TRISG6=0;
  1014   00183A  9C87               	bcf	135,6,c	;volatile
  1015                           
  1016                           ;dc_motor.c: 18:     LATEbits.LATE2=0;
  1017   00183C  947D               	bcf	125,2,c	;volatile
  1018                           
  1019                           ;dc_motor.c: 19:     LATCbits.LATC7=0;
  1020   00183E  9E7B               	bcf	123,7,c	;volatile
  1021                           
  1022                           ;dc_motor.c: 20:     LATEbits.LATE4=0;
  1023   001840  987D               	bcf	125,4,c	;volatile
  1024                           
  1025                           ;dc_motor.c: 21:     LATGbits.LATG6=0;
  1026   001842  9C7F               	bcf	127,6,c	;volatile
  1027   001844                     
  1028                           ;dc_motor.c: 24:     RE2PPS=0x05;
  1029   001844  0E05               	movlw	5
  1030   001846  010E               	movlb	14	; () banked
  1031   001848  6F74               	movwf	116,b	;volatile
  1032                           
  1033                           ;dc_motor.c: 25:     RE4PPS=0x06;
  1034   00184A  0E06               	movlw	6
  1035   00184C  6F76               	movwf	118,b	;volatile
  1036                           
  1037                           ;dc_motor.c: 26:     RC7PPS=0x07;
  1038   00184E  0E07               	movlw	7
  1039   001850  6F69               	movwf	105,b	;volatile
  1040                           
  1041                           ;dc_motor.c: 27:     RG6PPS=0x08;
  1042   001852  0E08               	movlw	8
  1043   001854  6F88               	movwf	136,b	;volatile
  1044                           
  1045                           ;dc_motor.c: 30:     T2CONbits.CKPS=0b100;
  1046   001856  50BD               	movf	189,w,c	;volatile
  1047   001858  0B8F               	andlw	-113
  1048   00185A  0940               	iorlw	64
  1049   00185C  6EBD               	movwf	189,c	;volatile
  1050                           
  1051                           ;dc_motor.c: 31:     T2HLTbits.MODE=0b00000;
  1052   00185E  0EE0               	movlw	-32
  1053   001860  16BE               	andwf	190,f,c	;volatile
  1054                           
  1055                           ;dc_motor.c: 32:     T2CLKCONbits.CS=0b0001;
  1056   001862  50BF               	movf	191,w,c	;volatile
  1057   001864  0BF0               	andlw	-16
  1058   001866  0901               	iorlw	1
  1059   001868  6EBF               	movwf	191,c	;volatile
  1060   00186A                     
  1061                           ; BSR set to: 14
  1062                           ;dc_motor.c: 35:     T2PR=PWMperiod;
  1063   00186A  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1064   00186E                     
  1065                           ; BSR set to: 14
  1066                           ;dc_motor.c: 36:     T2CONbits.ON=1;
  1067   00186E  8EBD               	bsf	189,7,c	;volatile
  1068                           
  1069                           ;dc_motor.c: 40:     CCPR1H=0;
  1070   001870  0E00               	movlw	0
  1071   001872  6EAA               	movwf	170,c	;volatile
  1072                           
  1073                           ;dc_motor.c: 41:     CCPR2H=0;
  1074   001874  0E00               	movlw	0
  1075   001876  6EA6               	movwf	166,c	;volatile
  1076                           
  1077                           ;dc_motor.c: 42:     CCPR3H=0;
  1078   001878  0E00               	movlw	0
  1079   00187A  010F               	movlb	15	; () banked
  1080   00187C  6F25               	movwf	37,b	;volatile
  1081                           
  1082                           ;dc_motor.c: 43:     CCPR4H=0;
  1083   00187E  0E00               	movlw	0
  1084   001880  6F21               	movwf	33,b	;volatile
  1085                           
  1086                           ;dc_motor.c: 46:     CCPTMRS0bits.C1TSEL=0;
  1087   001882  0EFC               	movlw	-4
  1088   001884  16AD               	andwf	173,f,c	;volatile
  1089                           
  1090                           ;dc_motor.c: 47:     CCPTMRS0bits.C2TSEL=0;
  1091   001886  0EF3               	movlw	-13
  1092   001888  16AD               	andwf	173,f,c	;volatile
  1093                           
  1094                           ;dc_motor.c: 48:     CCPTMRS0bits.C3TSEL=0;
  1095   00188A  0ECF               	movlw	-49
  1096   00188C  16AD               	andwf	173,f,c	;volatile
  1097                           
  1098                           ;dc_motor.c: 49:     CCPTMRS0bits.C4TSEL=0;
  1099   00188E  0E3F               	movlw	-193
  1100   001890  16AD               	andwf	173,f,c	;volatile
  1101   001892                     
  1102                           ; BSR set to: 15
  1103                           ;dc_motor.c: 52:     CCP1CONbits.FMT=1;
  1104   001892  88AB               	bsf	171,4,c	;volatile
  1105                           
  1106                           ;dc_motor.c: 53:     CCP1CONbits.CCP1MODE=0b1100;
  1107   001894  50AB               	movf	171,w,c	;volatile
  1108   001896  0BF0               	andlw	-16
  1109   001898  090C               	iorlw	12
  1110   00189A  6EAB               	movwf	171,c	;volatile
  1111   00189C                     
  1112                           ; BSR set to: 15
  1113                           ;dc_motor.c: 54:     CCP1CONbits.EN=1;
  1114   00189C  8EAB               	bsf	171,7,c	;volatile
  1115   00189E                     
  1116                           ; BSR set to: 15
  1117                           ;dc_motor.c: 56:     CCP2CONbits.FMT=1;
  1118   00189E  88A7               	bsf	167,4,c	;volatile
  1119                           
  1120                           ;dc_motor.c: 57:     CCP2CONbits.CCP2MODE=0b1100;
  1121   0018A0  50A7               	movf	167,w,c	;volatile
  1122   0018A2  0BF0               	andlw	-16
  1123   0018A4  090C               	iorlw	12
  1124   0018A6  6EA7               	movwf	167,c	;volatile
  1125   0018A8                     
  1126                           ; BSR set to: 15
  1127                           ;dc_motor.c: 58:     CCP2CONbits.EN=1;
  1128   0018A8  8EA7               	bsf	167,7,c	;volatile
  1129   0018AA                     
  1130                           ; BSR set to: 15
  1131                           ;dc_motor.c: 60:     CCP3CONbits.FMT=1;
  1132   0018AA  8926               	bsf	38,4,b	;volatile
  1133                           
  1134                           ;dc_motor.c: 61:     CCP3CONbits.CCP3MODE=0b1100;
  1135   0018AC  5126               	movf	38,w,b	;volatile
  1136   0018AE  0BF0               	andlw	-16
  1137   0018B0  090C               	iorlw	12
  1138   0018B2  6F26               	movwf	38,b	;volatile
  1139   0018B4                     
  1140                           ; BSR set to: 15
  1141                           ;dc_motor.c: 62:     CCP3CONbits.EN=1;
  1142   0018B4  8F26               	bsf	38,7,b	;volatile
  1143   0018B6                     
  1144                           ; BSR set to: 15
  1145                           ;dc_motor.c: 64:     CCP4CONbits.FMT=1;
  1146   0018B6  8922               	bsf	34,4,b	;volatile
  1147                           
  1148                           ;dc_motor.c: 65:     CCP4CONbits.CCP4MODE=0b1100;
  1149   0018B8  5122               	movf	34,w,b	;volatile
  1150   0018BA  0BF0               	andlw	-16
  1151   0018BC  090C               	iorlw	12
  1152   0018BE  6F22               	movwf	34,b	;volatile
  1153   0018C0                     
  1154                           ; BSR set to: 15
  1155                           ;dc_motor.c: 66:     CCP4CONbits.EN=1;
  1156   0018C0  8F22               	bsf	34,7,b	;volatile
  1157   0018C2                     
  1158                           ; BSR set to: 15
  1159   0018C2  0012               	return		;funcret
  1160   0018C4                     __end_of_initDCmotorsPWM:
  1161                           	callstack 0
  1162                           
  1163 ;; *************** function _color_click_init *****************
  1164 ;; Defined at:
  1165 ;;		line 6 in file "colorclick.c"
  1166 ;; Parameters:    Size  Location     Type
  1167 ;;		None
  1168 ;; Auto vars:     Size  Location     Type
  1169 ;;		None
  1170 ;; Return value:  Size  Location     Type
  1171 ;;                  1    wreg      void 
  1172 ;; Registers used:
  1173 ;;		wreg, status,2, status,0, cstack
  1174 ;; Tracked objects:
  1175 ;;		On entry : 0/0
  1176 ;;		On exit  : 0/0
  1177 ;;		Unchanged: 0/0
  1178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1181 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1182 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1183 ;;Total ram usage:        1 bytes
  1184 ;; Hardware stack levels used: 1
  1185 ;; Hardware stack levels required when called: 4
  1186 ;; This function calls:
  1187 ;;		_I2C_2_Master_Init
  1188 ;;		_color_writetoaddr
  1189 ;; This function is called by:
  1190 ;;		_main
  1191 ;; This function uses a non-reentrant model
  1192 ;;
  1193                           
  1194                           	psect	text3
  1195   001DE0                     __ptext3:
  1196                           	callstack 0
  1197   001DE0                     _color_click_init:
  1198                           	callstack 26
  1199   001DE0                     
  1200                           ;colorclick.c: 9:     I2C_2_Master_Init();
  1201   001DE0  EC2A  F00F         	call	_I2C_2_Master_Init	;wreg free
  1202   001DE4                     
  1203                           ;colorclick.c: 12:   color_writetoaddr(0x00, 0x01);
  1204   001DE4  0E01               	movlw	1
  1205   001DE6  6E03               	movwf	color_writetoaddr@value^0,c
  1206   001DE8  0E00               	movlw	0
  1207   001DEA  EC89  F00F         	call	_color_writetoaddr
  1208   001DEE                     
  1209                           ;colorclick.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1210   001DEE  0E3F               	movlw	63
  1211   001DF0  6E05               	movwf	??_color_click_init^0,c
  1212   001DF2  0E55               	movlw	85
  1213   001DF4                     u2057:
  1214   001DF4  2EE8               	decfsz	wreg,f,c
  1215   001DF6  D7FE               	bra	u2057
  1216   001DF8  2E05               	decfsz	??_color_click_init^0,f,c
  1217   001DFA  D7FC               	bra	u2057
  1218   001DFC  F000               	nop	
  1219   001DFE                     
  1220                           ;colorclick.c: 16:  color_writetoaddr(0x00, 0x03);
  1221   001DFE  0E03               	movlw	3
  1222   001E00  6E03               	movwf	color_writetoaddr@value^0,c
  1223   001E02  0E00               	movlw	0
  1224   001E04  EC89  F00F         	call	_color_writetoaddr
  1225   001E08                     
  1226                           ;colorclick.c: 19:  color_writetoaddr(0x01, 0xD6);
  1227   001E08  0ED6               	movlw	214
  1228   001E0A  6E03               	movwf	color_writetoaddr@value^0,c
  1229   001E0C  0E01               	movlw	1
  1230   001E0E  EC89  F00F         	call	_color_writetoaddr
  1231   001E12                     
  1232                           ;colorclick.c: 22:     LATGbits.LATG1=0;
  1233   001E12  927F               	bcf	127,1,c	;volatile
  1234   001E14                     
  1235                           ;colorclick.c: 23:     TRISGbits.TRISG1=0;
  1236   001E14  9287               	bcf	135,1,c	;volatile
  1237   001E16                     
  1238                           ;colorclick.c: 24:     LATAbits.LATA4=0;
  1239   001E16  9879               	bcf	121,4,c	;volatile
  1240   001E18                     
  1241                           ;colorclick.c: 25:     TRISAbits.TRISA4=0;
  1242   001E18  9881               	bcf	129,4,c	;volatile
  1243   001E1A                     
  1244                           ;colorclick.c: 26:     LATFbits.LATF7=0;
  1245   001E1A  9E7E               	bcf	126,7,c	;volatile
  1246   001E1C                     
  1247                           ;colorclick.c: 27:     TRISFbits.TRISF7=0;
  1248   001E1C  9E86               	bcf	134,7,c	;volatile
  1249   001E1E  0012               	return		;funcret
  1250   001E20                     __end_of_color_click_init:
  1251                           	callstack 0
  1252                           
  1253 ;; *************** function _color_writetoaddr *****************
  1254 ;; Defined at:
  1255 ;;		line 30 in file "colorclick.c"
  1256 ;; Parameters:    Size  Location     Type
  1257 ;;  address         1    wreg     unsigned char 
  1258 ;;  value           1    2[COMRAM] unsigned char 
  1259 ;; Auto vars:     Size  Location     Type
  1260 ;;  address         1    3[COMRAM] unsigned char 
  1261 ;; Return value:  Size  Location     Type
  1262 ;;                  1    wreg      void 
  1263 ;; Registers used:
  1264 ;;		wreg, status,2, status,0, cstack
  1265 ;; Tracked objects:
  1266 ;;		On entry : 0/0
  1267 ;;		On exit  : 0/0
  1268 ;;		Unchanged: 0/0
  1269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1270 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1271 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1273 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1274 ;;Total ram usage:        2 bytes
  1275 ;; Hardware stack levels used: 1
  1276 ;; Hardware stack levels required when called: 3
  1277 ;; This function calls:
  1278 ;;		_I2C_2_Master_Start
  1279 ;;		_I2C_2_Master_Stop
  1280 ;;		_I2C_2_Master_Write
  1281 ;; This function is called by:
  1282 ;;		_color_click_init
  1283 ;; This function uses a non-reentrant model
  1284 ;;
  1285                           
  1286                           	psect	text4
  1287   001F12                     __ptext4:
  1288                           	callstack 0
  1289   001F12                     _color_writetoaddr:
  1290                           	callstack 26
  1291                           
  1292                           ;incstack = 0
  1293                           ;color_writetoaddr@address stored from wreg
  1294   001F12  6E04               	movwf	color_writetoaddr@address^0,c
  1295   001F14                     
  1296                           ;colorclick.c: 31:     I2C_2_Master_Start();
  1297   001F14  ECC8  F00F         	call	_I2C_2_Master_Start	;wreg free
  1298                           
  1299                           ;colorclick.c: 32:     I2C_2_Master_Write(0x52 | 0x00);
  1300   001F18  0E52               	movlw	82
  1301   001F1A  ECB7  F00F         	call	_I2C_2_Master_Write
  1302                           
  1303                           ;colorclick.c: 33:     I2C_2_Master_Write(0x80 | address);
  1304   001F1E  5004               	movf	color_writetoaddr@address^0,w,c
  1305   001F20  0980               	iorlw	128
  1306   001F22  ECB7  F00F         	call	_I2C_2_Master_Write
  1307                           
  1308                           ;colorclick.c: 34:     I2C_2_Master_Write(value);
  1309   001F26  5003               	movf	color_writetoaddr@value^0,w,c
  1310   001F28  ECB7  F00F         	call	_I2C_2_Master_Write
  1311                           
  1312                           ;colorclick.c: 35:     I2C_2_Master_Stop();
  1313   001F2C  ECC3  F00F         	call	_I2C_2_Master_Stop	;wreg free
  1314   001F30  0012               	return		;funcret
  1315   001F32                     __end_of_color_writetoaddr:
  1316                           	callstack 0
  1317                           
  1318 ;; *************** function _I2C_2_Master_Write *****************
  1319 ;; Defined at:
  1320 ;;		line 45 in file "i2c.c"
  1321 ;; Parameters:    Size  Location     Type
  1322 ;;  data_byte       1    wreg     unsigned char 
  1323 ;; Auto vars:     Size  Location     Type
  1324 ;;  data_byte       1    1[COMRAM] unsigned char 
  1325 ;; Return value:  Size  Location     Type
  1326 ;;                  1    wreg      void 
  1327 ;; Registers used:
  1328 ;;		wreg, status,2, status,0, cstack
  1329 ;; Tracked objects:
  1330 ;;		On entry : 0/0
  1331 ;;		On exit  : 0/0
  1332 ;;		Unchanged: 0/0
  1333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1335 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1337 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1338 ;;Total ram usage:        1 bytes
  1339 ;; Hardware stack levels used: 1
  1340 ;; Hardware stack levels required when called: 2
  1341 ;; This function calls:
  1342 ;;		_I2C_2_Master_Idle
  1343 ;; This function is called by:
  1344 ;;		_color_writetoaddr
  1345 ;;		_color_read_Red
  1346 ;;		_color_read_Green
  1347 ;;		_color_read_Blue
  1348 ;;		_color_read_Clear
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           	psect	text5
  1353   001F6E                     __ptext5:
  1354                           	callstack 0
  1355   001F6E                     _I2C_2_Master_Write:
  1356                           	callstack 26
  1357                           
  1358                           ;incstack = 0
  1359                           ;I2C_2_Master_Write@data_byte stored from wreg
  1360   001F6E  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  1361   001F70                     
  1362                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  1363   001F70  EC3F  F00F         	call	_I2C_2_Master_Idle	;wreg free
  1364   001F74                     
  1365                           ;i2c.c: 48:   SSP2BUF = data_byte;
  1366   001F74  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  1367   001F78  0012               	return		;funcret
  1368   001F7A                     __end_of_I2C_2_Master_Write:
  1369                           	callstack 0
  1370                           
  1371 ;; *************** function _I2C_2_Master_Stop *****************
  1372 ;; Defined at:
  1373 ;;		line 39 in file "i2c.c"
  1374 ;; Parameters:    Size  Location     Type
  1375 ;;		None
  1376 ;; Auto vars:     Size  Location     Type
  1377 ;;		None
  1378 ;; Return value:  Size  Location     Type
  1379 ;;                  1    wreg      void 
  1380 ;; Registers used:
  1381 ;;		wreg, status,2, status,0, cstack
  1382 ;; Tracked objects:
  1383 ;;		On entry : 0/0
  1384 ;;		On exit  : 0/0
  1385 ;;		Unchanged: 0/0
  1386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1391 ;;Total ram usage:        0 bytes
  1392 ;; Hardware stack levels used: 1
  1393 ;; Hardware stack levels required when called: 2
  1394 ;; This function calls:
  1395 ;;		_I2C_2_Master_Idle
  1396 ;; This function is called by:
  1397 ;;		_color_writetoaddr
  1398 ;;		_color_read_Red
  1399 ;;		_color_read_Green
  1400 ;;		_color_read_Blue
  1401 ;;		_color_read_Clear
  1402 ;; This function uses a non-reentrant model
  1403 ;;
  1404                           
  1405                           	psect	text6
  1406   001F86                     __ptext6:
  1407                           	callstack 0
  1408   001F86                     _I2C_2_Master_Stop:
  1409                           	callstack 26
  1410   001F86                     
  1411                           ;i2c.c: 41:   I2C_2_Master_Idle();
  1412   001F86  EC3F  F00F         	call	_I2C_2_Master_Idle	;wreg free
  1413   001F8A                     
  1414                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  1415   001F8A  010E               	movlb	14	; () banked
  1416   001F8C  85DA               	bsf	218,2,b	;volatile
  1417   001F8E                     
  1418                           ; BSR set to: 14
  1419   001F8E  0012               	return		;funcret
  1420   001F90                     __end_of_I2C_2_Master_Stop:
  1421                           	callstack 0
  1422                           
  1423 ;; *************** function _I2C_2_Master_Start *****************
  1424 ;; Defined at:
  1425 ;;		line 27 in file "i2c.c"
  1426 ;; Parameters:    Size  Location     Type
  1427 ;;		None
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;		None
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  1    wreg      void 
  1432 ;; Registers used:
  1433 ;;		wreg, status,2, status,0, cstack
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1443 ;;Total ram usage:        0 bytes
  1444 ;; Hardware stack levels used: 1
  1445 ;; Hardware stack levels required when called: 2
  1446 ;; This function calls:
  1447 ;;		_I2C_2_Master_Idle
  1448 ;; This function is called by:
  1449 ;;		_color_writetoaddr
  1450 ;;		_color_read_Red
  1451 ;;		_color_read_Green
  1452 ;;		_color_read_Blue
  1453 ;;		_color_read_Clear
  1454 ;; This function uses a non-reentrant model
  1455 ;;
  1456                           
  1457                           	psect	text7
  1458   001F90                     __ptext7:
  1459                           	callstack 0
  1460   001F90                     _I2C_2_Master_Start:
  1461                           	callstack 26
  1462   001F90                     
  1463                           ;i2c.c: 29:   I2C_2_Master_Idle();
  1464   001F90  EC3F  F00F         	call	_I2C_2_Master_Idle	;wreg free
  1465   001F94                     
  1466                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  1467   001F94  010E               	movlb	14	; () banked
  1468   001F96  81DA               	bsf	218,0,b	;volatile
  1469   001F98                     
  1470                           ; BSR set to: 14
  1471   001F98  0012               	return		;funcret
  1472   001F9A                     __end_of_I2C_2_Master_Start:
  1473                           	callstack 0
  1474                           
  1475 ;; *************** function _I2C_2_Master_Idle *****************
  1476 ;; Defined at:
  1477 ;;		line 22 in file "i2c.c"
  1478 ;; Parameters:    Size  Location     Type
  1479 ;;		None
  1480 ;; Auto vars:     Size  Location     Type
  1481 ;;		None
  1482 ;; Return value:  Size  Location     Type
  1483 ;;                  1    wreg      void 
  1484 ;; Registers used:
  1485 ;;		wreg, status,2, status,0
  1486 ;; Tracked objects:
  1487 ;;		On entry : 0/0
  1488 ;;		On exit  : 0/0
  1489 ;;		Unchanged: 0/0
  1490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1493 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1494 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1495 ;;Total ram usage:        1 bytes
  1496 ;; Hardware stack levels used: 1
  1497 ;; Hardware stack levels required when called: 1
  1498 ;; This function calls:
  1499 ;;		Nothing
  1500 ;; This function is called by:
  1501 ;;		_I2C_2_Master_Start
  1502 ;;		_I2C_2_Master_Stop
  1503 ;;		_I2C_2_Master_Write
  1504 ;;		_I2C_2_Master_RepStart
  1505 ;;		_I2C_2_Master_Read
  1506 ;; This function uses a non-reentrant model
  1507 ;;
  1508                           
  1509                           	psect	text8
  1510   001E7E                     __ptext8:
  1511                           	callstack 0
  1512   001E7E                     _I2C_2_Master_Idle:
  1513                           	callstack 26
  1514   001E7E                     l30:
  1515   001E7E  010E               	movlb	14	; () banked
  1516   001E80  B5D8               	btfsc	216,2,b	;volatile
  1517   001E82  EF45  F00F         	goto	u1231
  1518   001E86  EF47  F00F         	goto	u1230
  1519   001E8A                     u1231:
  1520   001E8A  EF3F  F00F         	goto	l30
  1521   001E8E                     u1230:
  1522   001E8E                     
  1523                           ; BSR set to: 14
  1524   001E8E  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  1525   001E92  0E1F               	movlw	31
  1526   001E94  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  1527   001E96  A4D8               	btfss	status,2,c
  1528   001E98  EF50  F00F         	goto	u1241
  1529   001E9C  EF52  F00F         	goto	u1240
  1530   001EA0                     u1241:
  1531   001EA0  EF3F  F00F         	goto	l30
  1532   001EA4                     u1240:
  1533   001EA4                     
  1534                           ; BSR set to: 14
  1535   001EA4  0012               	return		;funcret
  1536   001EA6                     __end_of_I2C_2_Master_Idle:
  1537                           	callstack 0
  1538                           
  1539 ;; *************** function _I2C_2_Master_Init *****************
  1540 ;; Defined at:
  1541 ;;		line 4 in file "i2c.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;		None
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;		None
  1546 ;; Return value:  Size  Location     Type
  1547 ;;                  1    wreg      void 
  1548 ;; Registers used:
  1549 ;;		wreg, status,2
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1559 ;;Total ram usage:        0 bytes
  1560 ;; Hardware stack levels used: 1
  1561 ;; Hardware stack levels required when called: 1
  1562 ;; This function calls:
  1563 ;;		Nothing
  1564 ;; This function is called by:
  1565 ;;		_main
  1566 ;;		_color_click_init
  1567 ;; This function uses a non-reentrant model
  1568 ;;
  1569                           
  1570                           	psect	text9
  1571   001E54                     __ptext9:
  1572                           	callstack 0
  1573   001E54                     _I2C_2_Master_Init:
  1574                           	callstack 28
  1575   001E54                     
  1576                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1577   001E54  010E               	movlb	14	; () banked
  1578   001E56  51D9               	movf	217,w,b	;volatile
  1579   001E58  0BF0               	andlw	-16
  1580   001E5A  0908               	iorlw	8
  1581   001E5C  6FD9               	movwf	217,b	;volatile
  1582   001E5E                     
  1583                           ; BSR set to: 14
  1584                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1585   001E5E  8BD9               	bsf	217,5,b	;volatile
  1586                           
  1587                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1588   001E60  0E9F               	movlw	159
  1589   001E62  6FD6               	movwf	214,b	;volatile
  1590   001E64                     
  1591                           ; BSR set to: 14
  1592                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1593   001E64  8A84               	bsf	132,5,c	;volatile
  1594   001E66                     
  1595                           ; BSR set to: 14
  1596                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1597   001E66  8C84               	bsf	132,6,c	;volatile
  1598   001E68                     
  1599                           ; BSR set to: 14
  1600                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1601   001E68  9BA7               	bcf	167,5,b	;volatile
  1602   001E6A                     
  1603                           ; BSR set to: 14
  1604                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1605   001E6A  9DA7               	bcf	167,6,b	;volatile
  1606                           
  1607                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1608   001E6C  0E1D               	movlw	29
  1609   001E6E  6F1D               	movwf	29,b	;volatile
  1610                           
  1611                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1612   001E70  0E1E               	movlw	30
  1613   001E72  6F1C               	movwf	28,b	;volatile
  1614                           
  1615                           ;i2c.c: 18:   RD5PPS=0x1C;
  1616   001E74  0E1C               	movlw	28
  1617   001E76  6F6F               	movwf	111,b	;volatile
  1618                           
  1619                           ;i2c.c: 19:   RD6PPS=0x1B;
  1620   001E78  0E1B               	movlw	27
  1621   001E7A  6F70               	movwf	112,b	;volatile
  1622   001E7C                     
  1623                           ; BSR set to: 14
  1624   001E7C  0012               	return		;funcret
  1625   001E7E                     __end_of_I2C_2_Master_Init:
  1626                           	callstack 0
  1627                           
  1628 ;; *************** function _White *****************
  1629 ;; Defined at:
  1630 ;;		line 348 in file "dc_motor.c"
  1631 ;; Parameters:    Size  Location     Type
  1632 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  1633 ;;		 -> motorL(9), 
  1634 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  1635 ;;		 -> motorR(9), 
  1636 ;;  movementCoun    2   43[COMRAM] unsigned int 
  1637 ;;  movementMemo    2   45[COMRAM] PTR unsigned int 
  1638 ;;		 -> movementMemory(40), main@movementMemory(6), 
  1639 ;;  timerMemory     2   47[COMRAM] PTR unsigned int 
  1640 ;;		 -> timerMemory(40), main@timerMemory(6), 
  1641 ;; Auto vars:     Size  Location     Type
  1642 ;;  tempTimer       2   51[COMRAM] unsigned int 
  1643 ;;  i               2   53[COMRAM] unsigned int 
  1644 ;;  retracingDon    2    0        unsigned int 
  1645 ;; Return value:  Size  Location     Type
  1646 ;;                  1    wreg      void 
  1647 ;; Registers used:
  1648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1649 ;; Tracked objects:
  1650 ;;		On entry : 0/0
  1651 ;;		On exit  : 0/0
  1652 ;;		Unchanged: 0/0
  1653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1654 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1655 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1656 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1657 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1658 ;;Total ram usage:       16 bytes
  1659 ;; Hardware stack levels used: 1
  1660 ;; Hardware stack levels required when called: 7
  1661 ;; This function calls:
  1662 ;;		_Blue_T180
  1663 ;;		_Green_L90
  1664 ;;		_LightBlue_L135
  1665 ;;		_Orange_R135
  1666 ;;		_Pink_rev1_L90
  1667 ;;		_Red_R90
  1668 ;;		_TimerReset
  1669 ;;		_Yellow_rev1_R90
  1670 ;;		_fullSpeedAhead
  1671 ;;		_getTimerValue
  1672 ;;		_reverseHalfSquare
  1673 ;;		_rotate180left
  1674 ;;		_stop
  1675 ;; This function is called by:
  1676 ;;		_main
  1677 ;;		_Colour2Action
  1678 ;; This function uses a non-reentrant model
  1679 ;;
  1680                           
  1681                           	psect	text10
  1682   000E4E                     __ptext10:
  1683                           	callstack 0
  1684   000E4E                     _White:
  1685                           	callstack 23
  1686   000E4E                     
  1687                           ;dc_motor.c: 352:         reverseHalfSquare(mL,mR);
  1688   000E4E  C028  F01B         	movff	White@mL,reverseHalfSquare@mL
  1689   000E52  C029  F01C         	movff	White@mL+1,reverseHalfSquare@mL+1
  1690   000E56  C02A  F01D         	movff	White@mR,reverseHalfSquare@mR
  1691   000E5A  C02B  F01E         	movff	White@mR+1,reverseHalfSquare@mR+1
  1692   000E5E  ECEC  F00C         	call	_reverseHalfSquare	;wreg free
  1693                           
  1694                           ;dc_motor.c: 353:         rotate180left(mL,mR);
  1695   000E62  C028  F020         	movff	White@mL,rotate180left@mL
  1696   000E66  C029  F021         	movff	White@mL+1,rotate180left@mL+1
  1697   000E6A  C02A  F022         	movff	White@mR,rotate180left@mR
  1698   000E6E  C02B  F023         	movff	White@mR+1,rotate180left@mR+1
  1699   000E72  ECC7  F00E         	call	_rotate180left	;wreg free
  1700   000E76                     
  1701                           ;dc_motor.c: 354:         _delay((unsigned long)((500)*(64000000/4000.0)));
  1702   000E76  0E29               	movlw	41
  1703   000E78  6E33               	movwf	(??_White+1)^0,c
  1704   000E7A  0E96               	movlw	150
  1705   000E7C  6E32               	movwf	??_White^0,c
  1706   000E7E  0E7F               	movlw	127
  1707   000E80                     u2067:
  1708   000E80  2EE8               	decfsz	wreg,f,c
  1709   000E82  D7FE               	bra	u2067
  1710   000E84  2E32               	decfsz	??_White^0,f,c
  1711   000E86  D7FC               	bra	u2067
  1712   000E88  2E33               	decfsz	(??_White+1)^0,f,c
  1713   000E8A  D7FA               	bra	u2067
  1714   000E8C  F000               	nop	
  1715   000E8E                     
  1716                           ;dc_motor.c: 355:         ForwardFlag = 0;
  1717   000E8E  0E00               	movlw	0
  1718   000E90  6E5E               	movwf	_ForwardFlag^0,c	;volatile
  1719   000E92                     
  1720                           ;dc_motor.c: 357:         for (unsigned int i=movementCount-1; i>=0;i--){
  1721   000E92  0EFF               	movlw	255
  1722   000E94  242C               	addwf	White@movementCount^0,w,c
  1723   000E96  6E36               	movwf	White@i^0,c
  1724   000E98  0EFF               	movlw	255
  1725   000E9A  202D               	addwfc	(White@movementCount+1)^0,w,c
  1726   000E9C  6E37               	movwf	(White@i+1)^0,c
  1727   000E9E                     l2667:
  1728                           
  1729                           ;dc_motor.c: 358:             if (movementMemory[i]==0){
  1730   000E9E  90D8               	bcf	status,0,c
  1731   000EA0  3436               	rlcf	White@i^0,w,c
  1732   000EA2  6ED9               	movwf	fsr2l,c
  1733   000EA4  3437               	rlcf	(White@i+1)^0,w,c
  1734   000EA6  6EDA               	movwf	fsr2h,c
  1735   000EA8  502E               	movf	White@movementMemory^0,w,c
  1736   000EAA  26D9               	addwf	fsr2l,f,c
  1737   000EAC  502F               	movf	(White@movementMemory+1)^0,w,c
  1738   000EAE  22DA               	addwfc	fsr2h,f,c
  1739   000EB0  50DE               	movf	postinc2,w,c
  1740   000EB2  10DE               	iorwf	postinc2,w,c
  1741   000EB4  A4D8               	btfss	status,2,c
  1742   000EB6  EF5F  F007         	goto	u1391
  1743   000EBA  EF61  F007         	goto	u1390
  1744   000EBE                     u1391:
  1745   000EBE  EF6D  F007         	goto	l2671
  1746   000EC2                     u1390:
  1747   000EC2                     
  1748                           ;dc_motor.c: 359:                 Red_R90(mL,mR);}
  1749   000EC2  C028  F021         	movff	White@mL,Red_R90@mL
  1750   000EC6  C029  F022         	movff	White@mL+1,Red_R90@mL+1
  1751   000ECA  C02A  F023         	movff	White@mR,Red_R90@mR
  1752   000ECE  C02B  F024         	movff	White@mR+1,Red_R90@mR+1
  1753   000ED2  ECAF  F00D         	call	_Red_R90	;wreg free
  1754   000ED6  EF26  F008         	goto	l2695
  1755   000EDA                     l2671:
  1756   000EDA  90D8               	bcf	status,0,c
  1757   000EDC  3436               	rlcf	White@i^0,w,c
  1758   000EDE  6ED9               	movwf	fsr2l,c
  1759   000EE0  3437               	rlcf	(White@i+1)^0,w,c
  1760   000EE2  6EDA               	movwf	fsr2h,c
  1761   000EE4  502E               	movf	White@movementMemory^0,w,c
  1762   000EE6  26D9               	addwf	fsr2l,f,c
  1763   000EE8  502F               	movf	(White@movementMemory+1)^0,w,c
  1764   000EEA  22DA               	addwfc	fsr2h,f,c
  1765   000EEC  04DE               	decf	postinc2,w,c
  1766   000EEE  10DE               	iorwf	postinc2,w,c
  1767   000EF0  A4D8               	btfss	status,2,c
  1768   000EF2  EF7D  F007         	goto	u1401
  1769   000EF6  EF7F  F007         	goto	u1400
  1770   000EFA                     u1401:
  1771   000EFA  EF8B  F007         	goto	l2675
  1772   000EFE                     u1400:
  1773   000EFE                     
  1774                           ;dc_motor.c: 361:                 Green_L90(mL,mR);}
  1775   000EFE  C028  F021         	movff	White@mL,Green_L90@mL
  1776   000F02  C029  F022         	movff	White@mL+1,Green_L90@mL+1
  1777   000F06  C02A  F023         	movff	White@mR,Green_L90@mR
  1778   000F0A  C02B  F024         	movff	White@mR+1,Green_L90@mR+1
  1779   000F0E  ECEE  F00D         	call	_Green_L90	;wreg free
  1780   000F12  EF26  F008         	goto	l2695
  1781   000F16                     l2675:
  1782   000F16  90D8               	bcf	status,0,c
  1783   000F18  3436               	rlcf	White@i^0,w,c
  1784   000F1A  6ED9               	movwf	fsr2l,c
  1785   000F1C  3437               	rlcf	(White@i+1)^0,w,c
  1786   000F1E  6EDA               	movwf	fsr2h,c
  1787   000F20  502E               	movf	White@movementMemory^0,w,c
  1788   000F22  26D9               	addwf	fsr2l,f,c
  1789   000F24  502F               	movf	(White@movementMemory+1)^0,w,c
  1790   000F26  22DA               	addwfc	fsr2h,f,c
  1791   000F28  0E02               	movlw	2
  1792   000F2A  18DE               	xorwf	postinc2,w,c
  1793   000F2C  10DE               	iorwf	postinc2,w,c
  1794   000F2E  A4D8               	btfss	status,2,c
  1795   000F30  EF9C  F007         	goto	u1411
  1796   000F34  EF9E  F007         	goto	u1410
  1797   000F38                     u1411:
  1798   000F38  EFAA  F007         	goto	l2679
  1799   000F3C                     u1410:
  1800   000F3C                     
  1801                           ;dc_motor.c: 363:                 Blue_T180(mL,mR);}
  1802   000F3C  C028  F024         	movff	White@mL,Blue_T180@mL
  1803   000F40  C029  F025         	movff	White@mL+1,Blue_T180@mL+1
  1804   000F44  C02A  F026         	movff	White@mR,Blue_T180@mR
  1805   000F48  C02B  F027         	movff	White@mR+1,Blue_T180@mR+1
  1806   000F4C  EC9C  F00E         	call	_Blue_T180	;wreg free
  1807   000F50  EF26  F008         	goto	l2695
  1808   000F54                     l2679:
  1809   000F54  90D8               	bcf	status,0,c
  1810   000F56  3436               	rlcf	White@i^0,w,c
  1811   000F58  6ED9               	movwf	fsr2l,c
  1812   000F5A  3437               	rlcf	(White@i+1)^0,w,c
  1813   000F5C  6EDA               	movwf	fsr2h,c
  1814   000F5E  502E               	movf	White@movementMemory^0,w,c
  1815   000F60  26D9               	addwf	fsr2l,f,c
  1816   000F62  502F               	movf	(White@movementMemory+1)^0,w,c
  1817   000F64  22DA               	addwfc	fsr2h,f,c
  1818   000F66  0E03               	movlw	3
  1819   000F68  18DE               	xorwf	postinc2,w,c
  1820   000F6A  10DE               	iorwf	postinc2,w,c
  1821   000F6C  A4D8               	btfss	status,2,c
  1822   000F6E  EFBB  F007         	goto	u1421
  1823   000F72  EFBD  F007         	goto	u1420
  1824   000F76                     u1421:
  1825   000F76  EFC9  F007         	goto	l2683
  1826   000F7A                     u1420:
  1827   000F7A                     
  1828                           ;dc_motor.c: 365:                 Yellow_rev1_R90(mL,mR);}
  1829   000F7A  C028  F021         	movff	White@mL,Yellow_rev1_R90@mL
  1830   000F7E  C029  F022         	movff	White@mL+1,Yellow_rev1_R90@mL+1
  1831   000F82  C02A  F023         	movff	White@mR,Yellow_rev1_R90@mR
  1832   000F86  C02B  F024         	movff	White@mR+1,Yellow_rev1_R90@mR+1
  1833   000F8A  EC26  F009         	call	_Yellow_rev1_R90	;wreg free
  1834   000F8E  EF26  F008         	goto	l2695
  1835   000F92                     l2683:
  1836   000F92  90D8               	bcf	status,0,c
  1837   000F94  3436               	rlcf	White@i^0,w,c
  1838   000F96  6ED9               	movwf	fsr2l,c
  1839   000F98  3437               	rlcf	(White@i+1)^0,w,c
  1840   000F9A  6EDA               	movwf	fsr2h,c
  1841   000F9C  502E               	movf	White@movementMemory^0,w,c
  1842   000F9E  26D9               	addwf	fsr2l,f,c
  1843   000FA0  502F               	movf	(White@movementMemory+1)^0,w,c
  1844   000FA2  22DA               	addwfc	fsr2h,f,c
  1845   000FA4  0E04               	movlw	4
  1846   000FA6  18DE               	xorwf	postinc2,w,c
  1847   000FA8  10DE               	iorwf	postinc2,w,c
  1848   000FAA  A4D8               	btfss	status,2,c
  1849   000FAC  EFDA  F007         	goto	u1431
  1850   000FB0  EFDC  F007         	goto	u1430
  1851   000FB4                     u1431:
  1852   000FB4  EFE8  F007         	goto	l2687
  1853   000FB8                     u1430:
  1854   000FB8                     
  1855                           ;dc_motor.c: 367:                 Pink_rev1_L90(mL,mR);}
  1856   000FB8  C028  F021         	movff	White@mL,Pink_rev1_L90@mL
  1857   000FBC  C029  F022         	movff	White@mL+1,Pink_rev1_L90@mL+1
  1858   000FC0  C02A  F023         	movff	White@mR,Pink_rev1_L90@mR
  1859   000FC4  C02B  F024         	movff	White@mR+1,Pink_rev1_L90@mR+1
  1860   000FC8  EC9D  F009         	call	_Pink_rev1_L90	;wreg free
  1861   000FCC  EF26  F008         	goto	l2695
  1862   000FD0                     l2687:
  1863   000FD0  90D8               	bcf	status,0,c
  1864   000FD2  3436               	rlcf	White@i^0,w,c
  1865   000FD4  6ED9               	movwf	fsr2l,c
  1866   000FD6  3437               	rlcf	(White@i+1)^0,w,c
  1867   000FD8  6EDA               	movwf	fsr2h,c
  1868   000FDA  502E               	movf	White@movementMemory^0,w,c
  1869   000FDC  26D9               	addwf	fsr2l,f,c
  1870   000FDE  502F               	movf	(White@movementMemory+1)^0,w,c
  1871   000FE0  22DA               	addwfc	fsr2h,f,c
  1872   000FE2  0E05               	movlw	5
  1873   000FE4  18DE               	xorwf	postinc2,w,c
  1874   000FE6  10DE               	iorwf	postinc2,w,c
  1875   000FE8  A4D8               	btfss	status,2,c
  1876   000FEA  EFF9  F007         	goto	u1441
  1877   000FEE  EFFB  F007         	goto	u1440
  1878   000FF2                     u1441:
  1879   000FF2  EF07  F008         	goto	l2691
  1880   000FF6                     u1440:
  1881   000FF6                     
  1882                           ;dc_motor.c: 369:                 Orange_R135(mL,mR);}
  1883   000FF6  C028  F021         	movff	White@mL,Orange_R135@mL
  1884   000FFA  C029  F022         	movff	White@mL+1,Orange_R135@mL+1
  1885   000FFE  C02A  F023         	movff	White@mR,Orange_R135@mR
  1886   001002  C02B  F024         	movff	White@mR+1,Orange_R135@mR+1
  1887   001006  EC81  F00A         	call	_Orange_R135	;wreg free
  1888   00100A  EF26  F008         	goto	l2695
  1889   00100E                     l2691:
  1890   00100E  90D8               	bcf	status,0,c
  1891   001010  3436               	rlcf	White@i^0,w,c
  1892   001012  6ED9               	movwf	fsr2l,c
  1893   001014  3437               	rlcf	(White@i+1)^0,w,c
  1894   001016  6EDA               	movwf	fsr2h,c
  1895   001018  502E               	movf	White@movementMemory^0,w,c
  1896   00101A  26D9               	addwf	fsr2l,f,c
  1897   00101C  502F               	movf	(White@movementMemory+1)^0,w,c
  1898   00101E  22DA               	addwfc	fsr2h,f,c
  1899   001020  0E06               	movlw	6
  1900   001022  18DE               	xorwf	postinc2,w,c
  1901   001024  10DE               	iorwf	postinc2,w,c
  1902   001026  A4D8               	btfss	status,2,c
  1903   001028  EF18  F008         	goto	u1451
  1904   00102C  EF1A  F008         	goto	u1450
  1905   001030                     u1451:
  1906   001030  EF26  F008         	goto	l301
  1907   001034                     u1450:
  1908   001034                     
  1909                           ;dc_motor.c: 371:                 LightBlue_L135(mL,mR);}
  1910   001034  C028  F021         	movff	White@mL,LightBlue_L135@mL
  1911   001038  C029  F022         	movff	White@mL+1,LightBlue_L135@mL+1
  1912   00103C  C02A  F023         	movff	White@mR,LightBlue_L135@mR
  1913   001040  C02B  F024         	movff	White@mR+1,LightBlue_L135@mR+1
  1914   001044  ECDE  F00A         	call	_LightBlue_L135	;wreg free
  1915   001048  EF26  F008         	goto	l2695
  1916   00104C                     l301:
  1917   00104C                     l2695:
  1918                           
  1919                           ;dc_motor.c: 373:             TimerReset();
  1920   00104C  ECCD  F00F         	call	_TimerReset	;wreg free
  1921   001050                     
  1922                           ;dc_motor.c: 374:             unsigned int tempTimer = getTimerValue();
  1923   001050  EC99  F00F         	call	_getTimerValue	;wreg free
  1924   001054  C001  F034         	movff	?_getTimerValue,White@tempTimer
  1925   001058  C002  F035         	movff	?_getTimerValue+1,White@tempTimer+1
  1926   00105C                     
  1927                           ;dc_motor.c: 375:             fullSpeedAhead(mL,mR);
  1928   00105C  C028  F014         	movff	White@mL,fullSpeedAhead@mL
  1929   001060  C029  F015         	movff	White@mL+1,fullSpeedAhead@mL+1
  1930   001064  C02A  F016         	movff	White@mR,fullSpeedAhead@mR
  1931   001068  C02B  F017         	movff	White@mR+1,fullSpeedAhead@mR+1
  1932   00106C  EC2F  F00D         	call	_fullSpeedAhead	;wreg free
  1933                           
  1934                           ;dc_motor.c: 376:             while(tempTimer<timerMemory[i])
  1935   001070  EF40  F008         	goto	l2703
  1936   001074                     l2701:
  1937                           
  1938                           ;dc_motor.c: 377:             {;dc_motor.c: 378:                 tempTimer = getTimerVal
      +                          ue();
  1939   001074  EC99  F00F         	call	_getTimerValue	;wreg free
  1940   001078  C001  F034         	movff	?_getTimerValue,White@tempTimer
  1941   00107C  C002  F035         	movff	?_getTimerValue+1,White@tempTimer+1
  1942   001080                     l2703:
  1943                           
  1944                           ;dc_motor.c: 376:             while(tempTimer<timerMemory[i])
  1945   001080  90D8               	bcf	status,0,c
  1946   001082  3436               	rlcf	White@i^0,w,c
  1947   001084  6ED9               	movwf	fsr2l,c
  1948   001086  3437               	rlcf	(White@i+1)^0,w,c
  1949   001088  6EDA               	movwf	fsr2h,c
  1950   00108A  5030               	movf	White@timerMemory^0,w,c
  1951   00108C  26D9               	addwf	fsr2l,f,c
  1952   00108E  5031               	movf	(White@timerMemory+1)^0,w,c
  1953   001090  22DA               	addwfc	fsr2h,f,c
  1954   001092  50DE               	movf	postinc2,w,c
  1955   001094  5C34               	subwf	White@tempTimer^0,w,c
  1956   001096  50DE               	movf	postinc2,w,c
  1957   001098  5835               	subwfb	(White@tempTimer+1)^0,w,c
  1958   00109A  A0D8               	btfss	status,0,c
  1959   00109C  EF52  F008         	goto	u1461
  1960   0010A0  EF54  F008         	goto	u1460
  1961   0010A4                     u1461:
  1962   0010A4  EF3A  F008         	goto	l2701
  1963   0010A8                     u1460:
  1964   0010A8                     
  1965                           ;dc_motor.c: 380:             stop(mL,mR);
  1966   0010A8  C028  F014         	movff	White@mL,stop@mL
  1967   0010AC  C029  F015         	movff	White@mL+1,stop@mL+1
  1968   0010B0  C02A  F016         	movff	White@mR,stop@mR
  1969   0010B4  C02B  F017         	movff	White@mR+1,stop@mR+1
  1970   0010B8  EC31  F00B         	call	_stop	;wreg free
  1971   0010BC                     
  1972                           ;dc_motor.c: 381:             _delay((unsigned long)((1000)*(64000000/4000.0)));
  1973   0010BC  0E52               	movlw	82
  1974   0010BE  6E33               	movwf	(??_White+1)^0,c
  1975   0010C0  0E2B               	movlw	43
  1976   0010C2  6E32               	movwf	??_White^0,c
  1977   0010C4  0E00               	movlw	0
  1978   0010C6                     u2077:
  1979   0010C6  2EE8               	decfsz	wreg,f,c
  1980   0010C8  D7FE               	bra	u2077
  1981   0010CA  2E32               	decfsz	??_White^0,f,c
  1982   0010CC  D7FC               	bra	u2077
  1983   0010CE  2E33               	decfsz	(??_White+1)^0,f,c
  1984   0010D0  D7FA               	bra	u2077
  1985   0010D2  D000               	nop2	
  1986   0010D4                     
  1987                           ;dc_motor.c: 382:         }
  1988   0010D4  0636               	decf	White@i^0,f,c
  1989   0010D6  A0D8               	btfss	status,0,c
  1990   0010D8  0637               	decf	(White@i+1)^0,f,c
  1991   0010DA  EF4F  F007         	goto	l2667
  1992   0010DE  0012               	return		;funcret
  1993   0010E0                     __end_of_White:
  1994                           	callstack 0
  1995                           
  1996 ;; *************** function _getTimerValue *****************
  1997 ;; Defined at:
  1998 ;;		line 28 in file "timer.c"
  1999 ;; Parameters:    Size  Location     Type
  2000 ;;		None
  2001 ;; Auto vars:     Size  Location     Type
  2002 ;;  timerCount      2    4[COMRAM] unsigned int 
  2003 ;; Return value:  Size  Location     Type
  2004 ;;                  2    0[COMRAM] unsigned int 
  2005 ;; Registers used:
  2006 ;;		wreg, status,2, status,0
  2007 ;; Tracked objects:
  2008 ;;		On entry : 0/0
  2009 ;;		On exit  : 0/0
  2010 ;;		Unchanged: 0/0
  2011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2012 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2013 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2014 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2015 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2016 ;;Total ram usage:        6 bytes
  2017 ;; Hardware stack levels used: 1
  2018 ;; Hardware stack levels required when called: 1
  2019 ;; This function calls:
  2020 ;;		Nothing
  2021 ;; This function is called by:
  2022 ;;		_White
  2023 ;;		_memoryUpdate
  2024 ;; This function uses a non-reentrant model
  2025 ;;
  2026                           
  2027                           	psect	text11
  2028   001F32                     __ptext11:
  2029                           	callstack 0
  2030   001F32                     _getTimerValue:
  2031                           	callstack 28
  2032   001F32                     
  2033                           ;timer.c: 30:     unsigned int timerCount;;timer.c: 32:     timerCount = TMR0L;
  2034   001F32  CFD3 F005          	movff	4051,getTimerValue@timerCount	;volatile
  2035   001F36  6A06               	clrf	(getTimerValue@timerCount+1)^0,c
  2036   001F38                     
  2037                           ;timer.c: 34:     timerCount |= (unsigned int)(TMR0H << 8);
  2038   001F38  50D4               	movf	212,w,c	;volatile
  2039   001F3A  6E04               	movwf	(??_getTimerValue+1)^0,c
  2040   001F3C  6A03               	clrf	??_getTimerValue^0,c
  2041   001F3E  5003               	movf	??_getTimerValue^0,w,c
  2042   001F40  1205               	iorwf	getTimerValue@timerCount^0,f,c
  2043   001F42  5004               	movf	(??_getTimerValue+1)^0,w,c
  2044   001F44  1206               	iorwf	(getTimerValue@timerCount+1)^0,f,c
  2045   001F46                     
  2046                           ;timer.c: 35:     return timerCount;
  2047   001F46  C005  F001         	movff	getTimerValue@timerCount,?_getTimerValue
  2048   001F4A  C006  F002         	movff	getTimerValue@timerCount+1,?_getTimerValue+1
  2049   001F4E  0012               	return		;funcret
  2050   001F50                     __end_of_getTimerValue:
  2051                           	callstack 0
  2052                           
  2053 ;; *************** function _Yellow_rev1_R90 *****************
  2054 ;; Defined at:
  2055 ;;		line 269 in file "dc_motor.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  2058 ;;		 -> motorL(9), 
  2059 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  2060 ;;		 -> motorR(9), 
  2061 ;; Auto vars:     Size  Location     Type
  2062 ;;		None
  2063 ;; Return value:  Size  Location     Type
  2064 ;;                  1    wreg      void 
  2065 ;; Registers used:
  2066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2067 ;; Tracked objects:
  2068 ;;		On entry : 0/0
  2069 ;;		On exit  : 0/0
  2070 ;;		Unchanged: 0/0
  2071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2072 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2074 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2075 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2076 ;;Total ram usage:        6 bytes
  2077 ;; Hardware stack levels used: 1
  2078 ;; Hardware stack levels required when called: 5
  2079 ;; This function calls:
  2080 ;;		_Left45
  2081 ;;		_Right45
  2082 ;;		_TimerReset
  2083 ;;		_fullSpeedAhead
  2084 ;;		_fullSpeedReverse
  2085 ;;		_reverseHalfSquare
  2086 ;;		_stop
  2087 ;; This function is called by:
  2088 ;;		_White
  2089 ;;		_Colour2Action
  2090 ;; This function uses a non-reentrant model
  2091 ;;
  2092                           
  2093                           	psect	text12
  2094   00124C                     __ptext12:
  2095                           	callstack 0
  2096   00124C                     _Yellow_rev1_R90:
  2097                           	callstack 24
  2098   00124C                     
  2099                           ;dc_motor.c: 269: void Yellow_rev1_R90(struct DC_motor *mL, struct DC_motor *mR);dc_moto
      +                          r.c: 270: {;dc_motor.c: 271:     if (ForwardFlag){
  2100   00124C  505E               	movf	_ForwardFlag^0,w,c	;volatile
  2101   00124E  B4D8               	btfsc	status,2,c
  2102   001250  EF2C  F009         	goto	u1331
  2103   001254  EF2E  F009         	goto	u1330
  2104   001258                     u1331:
  2105   001258  EF70  F009         	goto	l2521
  2106   00125C                     u1330:
  2107   00125C                     
  2108                           ;dc_motor.c: 272:         reverseHalfSquare(mL,mR);
  2109   00125C  C021  F01B         	movff	Yellow_rev1_R90@mL,reverseHalfSquare@mL
  2110   001260  C022  F01C         	movff	Yellow_rev1_R90@mL+1,reverseHalfSquare@mL+1
  2111   001264  C023  F01D         	movff	Yellow_rev1_R90@mR,reverseHalfSquare@mR
  2112   001268  C024  F01E         	movff	Yellow_rev1_R90@mR+1,reverseHalfSquare@mR+1
  2113   00126C  ECEC  F00C         	call	_reverseHalfSquare	;wreg free
  2114                           
  2115                           ;dc_motor.c: 274:         fullSpeedReverse(mL,mR);
  2116   001270  C021  F014         	movff	Yellow_rev1_R90@mL,fullSpeedReverse@mL
  2117   001274  C022  F015         	movff	Yellow_rev1_R90@mL+1,fullSpeedReverse@mL+1
  2118   001278  C023  F016         	movff	Yellow_rev1_R90@mR,fullSpeedReverse@mR
  2119   00127C  C024  F017         	movff	Yellow_rev1_R90@mR+1,fullSpeedReverse@mR+1
  2120   001280  EC6F  F00D         	call	_fullSpeedReverse	;wreg free
  2121   001284                     
  2122                           ;dc_motor.c: 275:         _delay((unsigned long)((_1square)*(64000000/4000.0)));
  2123   001284  0E39               	movlw	57
  2124   001286  6E26               	movwf	(??_Yellow_rev1_R90+1)^0,c
  2125   001288  0ED2               	movlw	210
  2126   00128A  6E25               	movwf	??_Yellow_rev1_R90^0,c
  2127   00128C  0E4C               	movlw	76
  2128   00128E                     u2087:
  2129   00128E  2EE8               	decfsz	wreg,f,c
  2130   001290  D7FE               	bra	u2087
  2131   001292  2E25               	decfsz	??_Yellow_rev1_R90^0,f,c
  2132   001294  D7FC               	bra	u2087
  2133   001296  2E26               	decfsz	(??_Yellow_rev1_R90+1)^0,f,c
  2134   001298  D7FA               	bra	u2087
  2135   00129A  D000               	nop2	
  2136   00129C                     
  2137                           ;dc_motor.c: 277:         Right45(mL,mR);
  2138   00129C  C021  F01A         	movff	Yellow_rev1_R90@mL,Right45@mL
  2139   0012A0  C022  F01B         	movff	Yellow_rev1_R90@mL+1,Right45@mL+1
  2140   0012A4  C023  F01C         	movff	Yellow_rev1_R90@mR,Right45@mR
  2141   0012A8  C024  F01D         	movff	Yellow_rev1_R90@mR+1,Right45@mR+1
  2142   0012AC  EC62  F00C         	call	_Right45	;wreg free
  2143   0012B0                     
  2144                           ;dc_motor.c: 278:         Right45(mL,mR);
  2145   0012B0  C021  F01A         	movff	Yellow_rev1_R90@mL,Right45@mL
  2146   0012B4  C022  F01B         	movff	Yellow_rev1_R90@mL+1,Right45@mL+1
  2147   0012B8  C023  F01C         	movff	Yellow_rev1_R90@mR,Right45@mR
  2148   0012BC  C024  F01D         	movff	Yellow_rev1_R90@mR+1,Right45@mR+1
  2149   0012C0  EC62  F00C         	call	_Right45	;wreg free
  2150   0012C4                     
  2151                           ;dc_motor.c: 279:         TimerReset();
  2152   0012C4  ECCD  F00F         	call	_TimerReset	;wreg free
  2153   0012C8                     l2519:
  2154                           
  2155                           ;dc_motor.c: 280:         stop(mL,mR);
  2156   0012C8  C021  F014         	movff	Yellow_rev1_R90@mL,stop@mL
  2157   0012CC  C022  F015         	movff	Yellow_rev1_R90@mL+1,stop@mL+1
  2158   0012D0  C023  F016         	movff	Yellow_rev1_R90@mR,stop@mR
  2159   0012D4  C024  F017         	movff	Yellow_rev1_R90@mR+1,stop@mR+1
  2160   0012D8  EC31  F00B         	call	_stop	;wreg free
  2161                           
  2162                           ;dc_motor.c: 281:     }
  2163   0012DC  EF9C  F009         	goto	l273
  2164   0012E0                     l2521:
  2165                           
  2166                           ;dc_motor.c: 284:         Left45(mL,mR);
  2167   0012E0  C021  F01A         	movff	Yellow_rev1_R90@mL,Left45@mL
  2168   0012E4  C022  F01B         	movff	Yellow_rev1_R90@mL+1,Left45@mL+1
  2169   0012E8  C023  F01C         	movff	Yellow_rev1_R90@mR,Left45@mR
  2170   0012EC  C024  F01D         	movff	Yellow_rev1_R90@mR+1,Left45@mR+1
  2171   0012F0  ECA7  F00C         	call	_Left45	;wreg free
  2172                           
  2173                           ;dc_motor.c: 285:         Left45(mL,mR);
  2174   0012F4  C021  F01A         	movff	Yellow_rev1_R90@mL,Left45@mL
  2175   0012F8  C022  F01B         	movff	Yellow_rev1_R90@mL+1,Left45@mL+1
  2176   0012FC  C023  F01C         	movff	Yellow_rev1_R90@mR,Left45@mR
  2177   001300  C024  F01D         	movff	Yellow_rev1_R90@mR+1,Left45@mR+1
  2178   001304  ECA7  F00C         	call	_Left45	;wreg free
  2179                           
  2180                           ;dc_motor.c: 286:         fullSpeedAhead(mL,mR);
  2181   001308  C021  F014         	movff	Yellow_rev1_R90@mL,fullSpeedAhead@mL
  2182   00130C  C022  F015         	movff	Yellow_rev1_R90@mL+1,fullSpeedAhead@mL+1
  2183   001310  C023  F016         	movff	Yellow_rev1_R90@mR,fullSpeedAhead@mR
  2184   001314  C024  F017         	movff	Yellow_rev1_R90@mR+1,fullSpeedAhead@mR+1
  2185   001318  EC2F  F00D         	call	_fullSpeedAhead	;wreg free
  2186   00131C                     
  2187                           ;dc_motor.c: 287:         _delay((unsigned long)((_1square)*(64000000/4000.0)));
  2188   00131C  0E39               	movlw	57
  2189   00131E  6E26               	movwf	(??_Yellow_rev1_R90+1)^0,c
  2190   001320  0ED2               	movlw	210
  2191   001322  6E25               	movwf	??_Yellow_rev1_R90^0,c
  2192   001324  0E4C               	movlw	76
  2193   001326                     u2097:
  2194   001326  2EE8               	decfsz	wreg,f,c
  2195   001328  D7FE               	bra	u2097
  2196   00132A  2E25               	decfsz	??_Yellow_rev1_R90^0,f,c
  2197   00132C  D7FC               	bra	u2097
  2198   00132E  2E26               	decfsz	(??_Yellow_rev1_R90+1)^0,f,c
  2199   001330  D7FA               	bra	u2097
  2200   001332  D000               	nop2	
  2201   001334  EF64  F009         	goto	l2519
  2202   001338                     l273:
  2203   001338  0012               	return		;funcret
  2204   00133A                     __end_of_Yellow_rev1_R90:
  2205                           	callstack 0
  2206                           
  2207 ;; *************** function _Red_R90 *****************
  2208 ;; Defined at:
  2209 ;;		line 226 in file "dc_motor.c"
  2210 ;; Parameters:    Size  Location     Type
  2211 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  2212 ;;		 -> motorL(9), 
  2213 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  2214 ;;		 -> motorR(9), 
  2215 ;; Auto vars:     Size  Location     Type
  2216 ;;		None
  2217 ;; Return value:  Size  Location     Type
  2218 ;;                  1    wreg      void 
  2219 ;; Registers used:
  2220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2221 ;; Tracked objects:
  2222 ;;		On entry : 0/0
  2223 ;;		On exit  : 0/0
  2224 ;;		Unchanged: 0/0
  2225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2226 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2229 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2230 ;;Total ram usage:        4 bytes
  2231 ;; Hardware stack levels used: 1
  2232 ;; Hardware stack levels required when called: 5
  2233 ;; This function calls:
  2234 ;;		_Left45
  2235 ;;		_Right45
  2236 ;;		_TimerReset
  2237 ;;		_reverseHalfSquare
  2238 ;; This function is called by:
  2239 ;;		_White
  2240 ;;		_Colour2Action
  2241 ;; This function uses a non-reentrant model
  2242 ;;
  2243                           
  2244                           	psect	text13
  2245   001B5E                     __ptext13:
  2246                           	callstack 0
  2247   001B5E                     _Red_R90:
  2248                           	callstack 24
  2249   001B5E                     
  2250                           ;dc_motor.c: 226: void Red_R90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 227
      +                          : {;dc_motor.c: 228:     if (ForwardFlag){
  2251   001B5E  505E               	movf	_ForwardFlag^0,w,c	;volatile
  2252   001B60  B4D8               	btfsc	status,2,c
  2253   001B62  EFB5  F00D         	goto	u1301
  2254   001B66  EFB7  F00D         	goto	u1300
  2255   001B6A                     u1301:
  2256   001B6A  EFD9  F00D         	goto	l2489
  2257   001B6E                     u1300:
  2258   001B6E                     
  2259                           ;dc_motor.c: 229:         reverseHalfSquare(mL,mR);
  2260   001B6E  C021  F01B         	movff	Red_R90@mL,reverseHalfSquare@mL
  2261   001B72  C022  F01C         	movff	Red_R90@mL+1,reverseHalfSquare@mL+1
  2262   001B76  C023  F01D         	movff	Red_R90@mR,reverseHalfSquare@mR
  2263   001B7A  C024  F01E         	movff	Red_R90@mR+1,reverseHalfSquare@mR+1
  2264   001B7E  ECEC  F00C         	call	_reverseHalfSquare	;wreg free
  2265                           
  2266                           ;dc_motor.c: 230:         Right45(mL,mR);
  2267   001B82  C021  F01A         	movff	Red_R90@mL,Right45@mL
  2268   001B86  C022  F01B         	movff	Red_R90@mL+1,Right45@mL+1
  2269   001B8A  C023  F01C         	movff	Red_R90@mR,Right45@mR
  2270   001B8E  C024  F01D         	movff	Red_R90@mR+1,Right45@mR+1
  2271   001B92  EC62  F00C         	call	_Right45	;wreg free
  2272                           
  2273                           ;dc_motor.c: 231:         Right45(mL,mR);
  2274   001B96  C021  F01A         	movff	Red_R90@mL,Right45@mL
  2275   001B9A  C022  F01B         	movff	Red_R90@mL+1,Right45@mL+1
  2276   001B9E  C023  F01C         	movff	Red_R90@mR,Right45@mR
  2277   001BA2  C024  F01D         	movff	Red_R90@mR+1,Right45@mR+1
  2278   001BA6  EC62  F00C         	call	_Right45	;wreg free
  2279   001BAA                     
  2280                           ;dc_motor.c: 232:         TimerReset();
  2281   001BAA  ECCD  F00F         	call	_TimerReset	;wreg free
  2282                           
  2283                           ;dc_motor.c: 233:     }
  2284   001BAE  EFED  F00D         	goto	l258
  2285   001BB2                     l2489:
  2286                           
  2287                           ;dc_motor.c: 236:         Left45(mL,mR);
  2288   001BB2  C021  F01A         	movff	Red_R90@mL,Left45@mL
  2289   001BB6  C022  F01B         	movff	Red_R90@mL+1,Left45@mL+1
  2290   001BBA  C023  F01C         	movff	Red_R90@mR,Left45@mR
  2291   001BBE  C024  F01D         	movff	Red_R90@mR+1,Left45@mR+1
  2292   001BC2  ECA7  F00C         	call	_Left45	;wreg free
  2293                           
  2294                           ;dc_motor.c: 237:         Left45(mL,mR);
  2295   001BC6  C021  F01A         	movff	Red_R90@mL,Left45@mL
  2296   001BCA  C022  F01B         	movff	Red_R90@mL+1,Left45@mL+1
  2297   001BCE  C023  F01C         	movff	Red_R90@mR,Left45@mR
  2298   001BD2  C024  F01D         	movff	Red_R90@mR+1,Left45@mR+1
  2299   001BD6  ECA7  F00C         	call	_Left45	;wreg free
  2300   001BDA                     l258:
  2301   001BDA  0012               	return		;funcret
  2302   001BDC                     __end_of_Red_R90:
  2303                           	callstack 0
  2304                           
  2305 ;; *************** function _Pink_rev1_L90 *****************
  2306 ;; Defined at:
  2307 ;;		line 291 in file "dc_motor.c"
  2308 ;; Parameters:    Size  Location     Type
  2309 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  2310 ;;		 -> motorL(9), 
  2311 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  2312 ;;		 -> motorR(9), 
  2313 ;; Auto vars:     Size  Location     Type
  2314 ;;		None
  2315 ;; Return value:  Size  Location     Type
  2316 ;;                  1    wreg      void 
  2317 ;; Registers used:
  2318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2319 ;; Tracked objects:
  2320 ;;		On entry : 0/0
  2321 ;;		On exit  : 0/0
  2322 ;;		Unchanged: 0/0
  2323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2324 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2326 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2327 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2328 ;;Total ram usage:        6 bytes
  2329 ;; Hardware stack levels used: 1
  2330 ;; Hardware stack levels required when called: 5
  2331 ;; This function calls:
  2332 ;;		_Left45
  2333 ;;		_Right45
  2334 ;;		_TimerReset
  2335 ;;		_fullSpeedAhead
  2336 ;;		_fullSpeedReverse
  2337 ;;		_reverseHalfSquare
  2338 ;;		_stop
  2339 ;; This function is called by:
  2340 ;;		_White
  2341 ;;		_Colour2Action
  2342 ;; This function uses a non-reentrant model
  2343 ;;
  2344                           
  2345                           	psect	text14
  2346   00133A                     __ptext14:
  2347                           	callstack 0
  2348   00133A                     _Pink_rev1_L90:
  2349                           	callstack 24
  2350   00133A                     
  2351                           ;dc_motor.c: 291: void Pink_rev1_L90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 292: {;dc_motor.c: 293:     if (ForwardFlag){
  2352   00133A  505E               	movf	_ForwardFlag^0,w,c	;volatile
  2353   00133C  B4D8               	btfsc	status,2,c
  2354   00133E  EFA3  F009         	goto	u1341
  2355   001342  EFA5  F009         	goto	u1340
  2356   001346                     u1341:
  2357   001346  EFDD  F009         	goto	l2539
  2358   00134A                     u1340:
  2359   00134A                     
  2360                           ;dc_motor.c: 294:         reverseHalfSquare(mL,mR);
  2361   00134A  C021  F01B         	movff	Pink_rev1_L90@mL,reverseHalfSquare@mL
  2362   00134E  C022  F01C         	movff	Pink_rev1_L90@mL+1,reverseHalfSquare@mL+1
  2363   001352  C023  F01D         	movff	Pink_rev1_L90@mR,reverseHalfSquare@mR
  2364   001356  C024  F01E         	movff	Pink_rev1_L90@mR+1,reverseHalfSquare@mR+1
  2365   00135A  ECEC  F00C         	call	_reverseHalfSquare	;wreg free
  2366                           
  2367                           ;dc_motor.c: 296:         fullSpeedReverse(mL,mR);
  2368   00135E  C021  F014         	movff	Pink_rev1_L90@mL,fullSpeedReverse@mL
  2369   001362  C022  F015         	movff	Pink_rev1_L90@mL+1,fullSpeedReverse@mL+1
  2370   001366  C023  F016         	movff	Pink_rev1_L90@mR,fullSpeedReverse@mR
  2371   00136A  C024  F017         	movff	Pink_rev1_L90@mR+1,fullSpeedReverse@mR+1
  2372   00136E  EC6F  F00D         	call	_fullSpeedReverse	;wreg free
  2373   001372                     
  2374                           ;dc_motor.c: 297:         _delay((unsigned long)((_1square)*(64000000/4000.0)));
  2375   001372  0E39               	movlw	57
  2376   001374  6E26               	movwf	(??_Pink_rev1_L90+1)^0,c
  2377   001376  0ED2               	movlw	210
  2378   001378  6E25               	movwf	??_Pink_rev1_L90^0,c
  2379   00137A  0E4C               	movlw	76
  2380   00137C                     u2107:
  2381   00137C  2EE8               	decfsz	wreg,f,c
  2382   00137E  D7FE               	bra	u2107
  2383   001380  2E25               	decfsz	??_Pink_rev1_L90^0,f,c
  2384   001382  D7FC               	bra	u2107
  2385   001384  2E26               	decfsz	(??_Pink_rev1_L90+1)^0,f,c
  2386   001386  D7FA               	bra	u2107
  2387   001388  D000               	nop2	
  2388   00138A                     
  2389                           ;dc_motor.c: 298:         Left45(mL,mR);
  2390   00138A  C021  F01A         	movff	Pink_rev1_L90@mL,Left45@mL
  2391   00138E  C022  F01B         	movff	Pink_rev1_L90@mL+1,Left45@mL+1
  2392   001392  C023  F01C         	movff	Pink_rev1_L90@mR,Left45@mR
  2393   001396  C024  F01D         	movff	Pink_rev1_L90@mR+1,Left45@mR+1
  2394   00139A  ECA7  F00C         	call	_Left45	;wreg free
  2395   00139E                     
  2396                           ;dc_motor.c: 299:         Left45(mL,mR);
  2397   00139E  C021  F01A         	movff	Pink_rev1_L90@mL,Left45@mL
  2398   0013A2  C022  F01B         	movff	Pink_rev1_L90@mL+1,Left45@mL+1
  2399   0013A6  C023  F01C         	movff	Pink_rev1_L90@mR,Left45@mR
  2400   0013AA  C024  F01D         	movff	Pink_rev1_L90@mR+1,Left45@mR+1
  2401   0013AE  ECA7  F00C         	call	_Left45	;wreg free
  2402   0013B2                     
  2403                           ;dc_motor.c: 300:         TimerReset();
  2404   0013B2  ECCD  F00F         	call	_TimerReset	;wreg free
  2405                           
  2406                           ;dc_motor.c: 301:     }
  2407   0013B6  EF11  F00A         	goto	l278
  2408   0013BA                     l2539:
  2409                           
  2410                           ;dc_motor.c: 304:         Right45(mL,mR);
  2411   0013BA  C021  F01A         	movff	Pink_rev1_L90@mL,Right45@mL
  2412   0013BE  C022  F01B         	movff	Pink_rev1_L90@mL+1,Right45@mL+1
  2413   0013C2  C023  F01C         	movff	Pink_rev1_L90@mR,Right45@mR
  2414   0013C6  C024  F01D         	movff	Pink_rev1_L90@mR+1,Right45@mR+1
  2415   0013CA  EC62  F00C         	call	_Right45	;wreg free
  2416                           
  2417                           ;dc_motor.c: 305:         Right45(mL,mR);
  2418   0013CE  C021  F01A         	movff	Pink_rev1_L90@mL,Right45@mL
  2419   0013D2  C022  F01B         	movff	Pink_rev1_L90@mL+1,Right45@mL+1
  2420   0013D6  C023  F01C         	movff	Pink_rev1_L90@mR,Right45@mR
  2421   0013DA  C024  F01D         	movff	Pink_rev1_L90@mR+1,Right45@mR+1
  2422   0013DE  EC62  F00C         	call	_Right45	;wreg free
  2423                           
  2424                           ;dc_motor.c: 306:         fullSpeedAhead(mL,mR);
  2425   0013E2  C021  F014         	movff	Pink_rev1_L90@mL,fullSpeedAhead@mL
  2426   0013E6  C022  F015         	movff	Pink_rev1_L90@mL+1,fullSpeedAhead@mL+1
  2427   0013EA  C023  F016         	movff	Pink_rev1_L90@mR,fullSpeedAhead@mR
  2428   0013EE  C024  F017         	movff	Pink_rev1_L90@mR+1,fullSpeedAhead@mR+1
  2429   0013F2  EC2F  F00D         	call	_fullSpeedAhead	;wreg free
  2430   0013F6                     
  2431                           ;dc_motor.c: 307:         _delay((unsigned long)((_1square)*(64000000/4000.0)));
  2432   0013F6  0E39               	movlw	57
  2433   0013F8  6E26               	movwf	(??_Pink_rev1_L90+1)^0,c
  2434   0013FA  0ED2               	movlw	210
  2435   0013FC  6E25               	movwf	??_Pink_rev1_L90^0,c
  2436   0013FE  0E4C               	movlw	76
  2437   001400                     u2117:
  2438   001400  2EE8               	decfsz	wreg,f,c
  2439   001402  D7FE               	bra	u2117
  2440   001404  2E25               	decfsz	??_Pink_rev1_L90^0,f,c
  2441   001406  D7FC               	bra	u2117
  2442   001408  2E26               	decfsz	(??_Pink_rev1_L90+1)^0,f,c
  2443   00140A  D7FA               	bra	u2117
  2444   00140C  D000               	nop2	
  2445   00140E                     
  2446                           ;dc_motor.c: 308:         stop(mL,mR);
  2447   00140E  C021  F014         	movff	Pink_rev1_L90@mL,stop@mL
  2448   001412  C022  F015         	movff	Pink_rev1_L90@mL+1,stop@mL+1
  2449   001416  C023  F016         	movff	Pink_rev1_L90@mR,stop@mR
  2450   00141A  C024  F017         	movff	Pink_rev1_L90@mR+1,stop@mR+1
  2451   00141E  EC31  F00B         	call	_stop	;wreg free
  2452   001422                     l278:
  2453   001422  0012               	return		;funcret
  2454   001424                     __end_of_Pink_rev1_L90:
  2455                           	callstack 0
  2456                           
  2457 ;; *************** function _fullSpeedAhead *****************
  2458 ;; Defined at:
  2459 ;;		line 149 in file "dc_motor.c"
  2460 ;; Parameters:    Size  Location     Type
  2461 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  2462 ;;		 -> motorL(9), 
  2463 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  2464 ;;		 -> motorR(9), 
  2465 ;; Auto vars:     Size  Location     Type
  2466 ;;  i               2   24[COMRAM] unsigned int 
  2467 ;; Return value:  Size  Location     Type
  2468 ;;                  1    wreg      void 
  2469 ;; Registers used:
  2470 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2471 ;; Tracked objects:
  2472 ;;		On entry : 0/0
  2473 ;;		On exit  : 0/0
  2474 ;;		Unchanged: 0/0
  2475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2476 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2477 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2478 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2479 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2480 ;;Total ram usage:        7 bytes
  2481 ;; Hardware stack levels used: 1
  2482 ;; Hardware stack levels required when called: 3
  2483 ;; This function calls:
  2484 ;;		_setMotorPWM
  2485 ;; This function is called by:
  2486 ;;		_Yellow_rev1_R90
  2487 ;;		_Pink_rev1_L90
  2488 ;;		_White
  2489 ;; This function uses a non-reentrant model
  2490 ;;
  2491                           
  2492                           	psect	text15
  2493   001A5E                     __ptext15:
  2494                           	callstack 0
  2495   001A5E                     _fullSpeedAhead:
  2496                           	callstack 26
  2497   001A5E                     
  2498                           ;dc_motor.c: 149: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 150: {;dc_motor.c: 151:  (mL->direction) = 1;
  2499   001A5E  EE20 F001          	lfsr	2,1
  2500   001A62  5014               	movf	fullSpeedAhead@mL^0,w,c
  2501   001A64  26D9               	addwf	fsr2l,f,c
  2502   001A66  5015               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2503   001A68  22DA               	addwfc	fsr2h,f,c
  2504   001A6A  0E01               	movlw	1
  2505   001A6C  6EDF               	movwf	indf2,c
  2506                           
  2507                           ;dc_motor.c: 152:  (mR->direction) = 1;
  2508   001A6E  EE20 F001          	lfsr	2,1
  2509   001A72  5016               	movf	fullSpeedAhead@mR^0,w,c
  2510   001A74  26D9               	addwf	fsr2l,f,c
  2511   001A76  5017               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2512   001A78  22DA               	addwfc	fsr2h,f,c
  2513   001A7A  0E01               	movlw	1
  2514   001A7C  6EDF               	movwf	indf2,c
  2515   001A7E                     
  2516                           ;dc_motor.c: 154:     for (unsigned int i = 0; i <50; i++)
  2517   001A7E  0E00               	movlw	0
  2518   001A80  6E1A               	movwf	(fullSpeedAhead@i+1)^0,c
  2519   001A82  0E00               	movlw	0
  2520   001A84  6E19               	movwf	fullSpeedAhead@i^0,c
  2521   001A86                     l2413:
  2522                           
  2523                           ;dc_motor.c: 155:     {;dc_motor.c: 156:         (mL->power)++;
  2524   001A86  C014  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2525   001A8A  C015  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2526   001A8E  2ADF               	incf	indf2,f,c
  2527                           
  2528                           ;dc_motor.c: 157:         (mR->power)++;
  2529   001A90  C016  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2530   001A94  C017  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2531   001A98  2ADF               	incf	indf2,f,c
  2532   001A9A                     
  2533                           ;dc_motor.c: 158:         setMotorPWM(mL);
  2534   001A9A  C014  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2535   001A9E  C015  F00F         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2536   001AA2  EC70  F008         	call	_setMotorPWM	;wreg free
  2537   001AA6                     
  2538                           ;dc_motor.c: 159:         setMotorPWM(mR);
  2539   001AA6  C016  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2540   001AAA  C017  F00F         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2541   001AAE  EC70  F008         	call	_setMotorPWM	;wreg free
  2542   001AB2                     
  2543                           ;dc_motor.c: 160:         _delay((unsigned long)((400)*(64000000/4000000.0)));
  2544   001AB2  0E09               	movlw	9
  2545   001AB4  6E18               	movwf	??_fullSpeedAhead^0,c
  2546   001AB6  0E4E               	movlw	78
  2547   001AB8                     u2127:
  2548   001AB8  2EE8               	decfsz	wreg,f,c
  2549   001ABA  D7FE               	bra	u2127
  2550   001ABC  2E18               	decfsz	??_fullSpeedAhead^0,f,c
  2551   001ABE  D7FC               	bra	u2127
  2552   001AC0  D000               	nop2	
  2553   001AC2                     
  2554                           ;dc_motor.c: 161:     }
  2555   001AC2  4A19               	infsnz	fullSpeedAhead@i^0,f,c
  2556   001AC4  2A1A               	incf	(fullSpeedAhead@i+1)^0,f,c
  2557   001AC6  501A               	movf	(fullSpeedAhead@i+1)^0,w,c
  2558   001AC8  E109               	bnz	u1270
  2559   001ACA  0E32               	movlw	50
  2560   001ACC  5C19               	subwf	fullSpeedAhead@i^0,w,c
  2561   001ACE  A0D8               	btfss	status,0,c
  2562   001AD0  EF6C  F00D         	goto	u1271
  2563   001AD4  EF6E  F00D         	goto	u1270
  2564   001AD8                     u1271:
  2565   001AD8  EF43  F00D         	goto	l2413
  2566   001ADC                     u1270:
  2567   001ADC  0012               	return		;funcret
  2568   001ADE                     __end_of_fullSpeedAhead:
  2569                           	callstack 0
  2570                           
  2571 ;; *************** function _Orange_R135 *****************
  2572 ;; Defined at:
  2573 ;;		line 311 in file "dc_motor.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  2576 ;;		 -> motorL(9), 
  2577 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  2578 ;;		 -> motorR(9), 
  2579 ;; Auto vars:     Size  Location     Type
  2580 ;;		None
  2581 ;; Return value:  Size  Location     Type
  2582 ;;                  1    wreg      void 
  2583 ;; Registers used:
  2584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2585 ;; Tracked objects:
  2586 ;;		On entry : 0/0
  2587 ;;		On exit  : 0/0
  2588 ;;		Unchanged: 0/0
  2589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2590 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2593 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2594 ;;Total ram usage:        4 bytes
  2595 ;; Hardware stack levels used: 1
  2596 ;; Hardware stack levels required when called: 5
  2597 ;; This function calls:
  2598 ;;		_Left45
  2599 ;;		_Right45
  2600 ;;		_TimerReset
  2601 ;;		_reverseHalfSquare
  2602 ;;		_stop
  2603 ;; This function is called by:
  2604 ;;		_White
  2605 ;;		_Colour2Action
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text16
  2610   001502                     __ptext16:
  2611                           	callstack 0
  2612   001502                     _Orange_R135:
  2613                           	callstack 24
  2614   001502                     
  2615                           ;dc_motor.c: 311: void Orange_R135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c:
      +                           312: {;dc_motor.c: 313:     if (ForwardFlag){
  2616   001502  505E               	movf	_ForwardFlag^0,w,c	;volatile
  2617   001504  B4D8               	btfsc	status,2,c
  2618   001506  EF87  F00A         	goto	u1351
  2619   00150A  EF89  F00A         	goto	u1350
  2620   00150E                     u1351:
  2621   00150E  EFB5  F00A         	goto	l2551
  2622   001512                     u1350:
  2623   001512                     
  2624                           ;dc_motor.c: 314:         reverseHalfSquare(mL,mR);
  2625   001512  C021  F01B         	movff	Orange_R135@mL,reverseHalfSquare@mL
  2626   001516  C022  F01C         	movff	Orange_R135@mL+1,reverseHalfSquare@mL+1
  2627   00151A  C023  F01D         	movff	Orange_R135@mR,reverseHalfSquare@mR
  2628   00151E  C024  F01E         	movff	Orange_R135@mR+1,reverseHalfSquare@mR+1
  2629   001522  ECEC  F00C         	call	_reverseHalfSquare	;wreg free
  2630                           
  2631                           ;dc_motor.c: 316:         Right45(mL,mR);
  2632   001526  C021  F01A         	movff	Orange_R135@mL,Right45@mL
  2633   00152A  C022  F01B         	movff	Orange_R135@mL+1,Right45@mL+1
  2634   00152E  C023  F01C         	movff	Orange_R135@mR,Right45@mR
  2635   001532  C024  F01D         	movff	Orange_R135@mR+1,Right45@mR+1
  2636   001536  EC62  F00C         	call	_Right45	;wreg free
  2637                           
  2638                           ;dc_motor.c: 317:         Right45(mL,mR);
  2639   00153A  C021  F01A         	movff	Orange_R135@mL,Right45@mL
  2640   00153E  C022  F01B         	movff	Orange_R135@mL+1,Right45@mL+1
  2641   001542  C023  F01C         	movff	Orange_R135@mR,Right45@mR
  2642   001546  C024  F01D         	movff	Orange_R135@mR+1,Right45@mR+1
  2643   00154A  EC62  F00C         	call	_Right45	;wreg free
  2644                           
  2645                           ;dc_motor.c: 318:         Right45(mL,mR);
  2646   00154E  C021  F01A         	movff	Orange_R135@mL,Right45@mL
  2647   001552  C022  F01B         	movff	Orange_R135@mL+1,Right45@mL+1
  2648   001556  C023  F01C         	movff	Orange_R135@mR,Right45@mR
  2649   00155A  C024  F01D         	movff	Orange_R135@mR+1,Right45@mR+1
  2650   00155E  EC62  F00C         	call	_Right45	;wreg free
  2651   001562                     
  2652                           ;dc_motor.c: 319:         TimerReset();
  2653   001562  ECCD  F00F         	call	_TimerReset	;wreg free
  2654                           
  2655                           ;dc_motor.c: 321:     }
  2656   001566  EFDD  F00A         	goto	l283
  2657   00156A                     l2551:
  2658                           
  2659                           ;dc_motor.c: 324:         Left45(mL,mR);
  2660   00156A  C021  F01A         	movff	Orange_R135@mL,Left45@mL
  2661   00156E  C022  F01B         	movff	Orange_R135@mL+1,Left45@mL+1
  2662   001572  C023  F01C         	movff	Orange_R135@mR,Left45@mR
  2663   001576  C024  F01D         	movff	Orange_R135@mR+1,Left45@mR+1
  2664   00157A  ECA7  F00C         	call	_Left45	;wreg free
  2665                           
  2666                           ;dc_motor.c: 325:         Left45(mL,mR);
  2667   00157E  C021  F01A         	movff	Orange_R135@mL,Left45@mL
  2668   001582  C022  F01B         	movff	Orange_R135@mL+1,Left45@mL+1
  2669   001586  C023  F01C         	movff	Orange_R135@mR,Left45@mR
  2670   00158A  C024  F01D         	movff	Orange_R135@mR+1,Left45@mR+1
  2671   00158E  ECA7  F00C         	call	_Left45	;wreg free
  2672                           
  2673                           ;dc_motor.c: 326:         Left45(mL,mR);
  2674   001592  C021  F01A         	movff	Orange_R135@mL,Left45@mL
  2675   001596  C022  F01B         	movff	Orange_R135@mL+1,Left45@mL+1
  2676   00159A  C023  F01C         	movff	Orange_R135@mR,Left45@mR
  2677   00159E  C024  F01D         	movff	Orange_R135@mR+1,Left45@mR+1
  2678   0015A2  ECA7  F00C         	call	_Left45	;wreg free
  2679                           
  2680                           ;dc_motor.c: 327:         stop(mL,mR);
  2681   0015A6  C021  F014         	movff	Orange_R135@mL,stop@mL
  2682   0015AA  C022  F015         	movff	Orange_R135@mL+1,stop@mL+1
  2683   0015AE  C023  F016         	movff	Orange_R135@mR,stop@mR
  2684   0015B2  C024  F017         	movff	Orange_R135@mR+1,stop@mR+1
  2685   0015B6  EC31  F00B         	call	_stop	;wreg free
  2686   0015BA                     l283:
  2687   0015BA  0012               	return		;funcret
  2688   0015BC                     __end_of_Orange_R135:
  2689                           	callstack 0
  2690                           
  2691 ;; *************** function _LightBlue_L135 *****************
  2692 ;; Defined at:
  2693 ;;		line 330 in file "dc_motor.c"
  2694 ;; Parameters:    Size  Location     Type
  2695 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  2696 ;;		 -> motorL(9), 
  2697 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  2698 ;;		 -> motorR(9), 
  2699 ;; Auto vars:     Size  Location     Type
  2700 ;;		None
  2701 ;; Return value:  Size  Location     Type
  2702 ;;                  1    wreg      void 
  2703 ;; Registers used:
  2704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2705 ;; Tracked objects:
  2706 ;;		On entry : 0/0
  2707 ;;		On exit  : 0/0
  2708 ;;		Unchanged: 0/0
  2709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2710 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2713 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2714 ;;Total ram usage:        4 bytes
  2715 ;; Hardware stack levels used: 1
  2716 ;; Hardware stack levels required when called: 5
  2717 ;; This function calls:
  2718 ;;		_Left45
  2719 ;;		_Right45
  2720 ;;		_TimerReset
  2721 ;;		_reverseHalfSquare
  2722 ;; This function is called by:
  2723 ;;		_White
  2724 ;;		_Colour2Action
  2725 ;; This function uses a non-reentrant model
  2726 ;;
  2727                           
  2728                           	psect	text17
  2729   0015BC                     __ptext17:
  2730                           	callstack 0
  2731   0015BC                     _LightBlue_L135:
  2732                           	callstack 24
  2733   0015BC                     
  2734                           ;dc_motor.c: 330: void LightBlue_L135(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 331: {;dc_motor.c: 333:      if (ForwardFlag){
  2735   0015BC  505E               	movf	_ForwardFlag^0,w,c	;volatile
  2736   0015BE  B4D8               	btfsc	status,2,c
  2737   0015C0  EFE4  F00A         	goto	u1361
  2738   0015C4  EFE6  F00A         	goto	u1360
  2739   0015C8                     u1361:
  2740   0015C8  EF12  F00B         	goto	l2559
  2741   0015CC                     u1360:
  2742   0015CC                     
  2743                           ;dc_motor.c: 334:         reverseHalfSquare(mL,mR);
  2744   0015CC  C021  F01B         	movff	LightBlue_L135@mL,reverseHalfSquare@mL
  2745   0015D0  C022  F01C         	movff	LightBlue_L135@mL+1,reverseHalfSquare@mL+1
  2746   0015D4  C023  F01D         	movff	LightBlue_L135@mR,reverseHalfSquare@mR
  2747   0015D8  C024  F01E         	movff	LightBlue_L135@mR+1,reverseHalfSquare@mR+1
  2748   0015DC  ECEC  F00C         	call	_reverseHalfSquare	;wreg free
  2749                           
  2750                           ;dc_motor.c: 336:         Left45(mL,mR);
  2751   0015E0  C021  F01A         	movff	LightBlue_L135@mL,Left45@mL
  2752   0015E4  C022  F01B         	movff	LightBlue_L135@mL+1,Left45@mL+1
  2753   0015E8  C023  F01C         	movff	LightBlue_L135@mR,Left45@mR
  2754   0015EC  C024  F01D         	movff	LightBlue_L135@mR+1,Left45@mR+1
  2755   0015F0  ECA7  F00C         	call	_Left45	;wreg free
  2756                           
  2757                           ;dc_motor.c: 337:         Left45(mL,mR);
  2758   0015F4  C021  F01A         	movff	LightBlue_L135@mL,Left45@mL
  2759   0015F8  C022  F01B         	movff	LightBlue_L135@mL+1,Left45@mL+1
  2760   0015FC  C023  F01C         	movff	LightBlue_L135@mR,Left45@mR
  2761   001600  C024  F01D         	movff	LightBlue_L135@mR+1,Left45@mR+1
  2762   001604  ECA7  F00C         	call	_Left45	;wreg free
  2763                           
  2764                           ;dc_motor.c: 338:         Left45(mL,mR);
  2765   001608  C021  F01A         	movff	LightBlue_L135@mL,Left45@mL
  2766   00160C  C022  F01B         	movff	LightBlue_L135@mL+1,Left45@mL+1
  2767   001610  C023  F01C         	movff	LightBlue_L135@mR,Left45@mR
  2768   001614  C024  F01D         	movff	LightBlue_L135@mR+1,Left45@mR+1
  2769   001618  ECA7  F00C         	call	_Left45	;wreg free
  2770   00161C                     
  2771                           ;dc_motor.c: 339:         TimerReset();
  2772   00161C  ECCD  F00F         	call	_TimerReset	;wreg free
  2773                           
  2774                           ;dc_motor.c: 340:     }
  2775   001620  EF30  F00B         	goto	l288
  2776   001624                     l2559:
  2777                           
  2778                           ;dc_motor.c: 343:         Right45(mL,mR);
  2779   001624  C021  F01A         	movff	LightBlue_L135@mL,Right45@mL
  2780   001628  C022  F01B         	movff	LightBlue_L135@mL+1,Right45@mL+1
  2781   00162C  C023  F01C         	movff	LightBlue_L135@mR,Right45@mR
  2782   001630  C024  F01D         	movff	LightBlue_L135@mR+1,Right45@mR+1
  2783   001634  EC62  F00C         	call	_Right45	;wreg free
  2784                           
  2785                           ;dc_motor.c: 344:         Right45(mL,mR);
  2786   001638  C021  F01A         	movff	LightBlue_L135@mL,Right45@mL
  2787   00163C  C022  F01B         	movff	LightBlue_L135@mL+1,Right45@mL+1
  2788   001640  C023  F01C         	movff	LightBlue_L135@mR,Right45@mR
  2789   001644  C024  F01D         	movff	LightBlue_L135@mR+1,Right45@mR+1
  2790   001648  EC62  F00C         	call	_Right45	;wreg free
  2791                           
  2792                           ;dc_motor.c: 345:         Right45(mL,mR);
  2793   00164C  C021  F01A         	movff	LightBlue_L135@mL,Right45@mL
  2794   001650  C022  F01B         	movff	LightBlue_L135@mL+1,Right45@mL+1
  2795   001654  C023  F01C         	movff	LightBlue_L135@mR,Right45@mR
  2796   001658  C024  F01D         	movff	LightBlue_L135@mR+1,Right45@mR+1
  2797   00165C  EC62  F00C         	call	_Right45	;wreg free
  2798   001660                     l288:
  2799   001660  0012               	return		;funcret
  2800   001662                     __end_of_LightBlue_L135:
  2801                           	callstack 0
  2802                           
  2803 ;; *************** function _Green_L90 *****************
  2804 ;; Defined at:
  2805 ;;		line 241 in file "dc_motor.c"
  2806 ;; Parameters:    Size  Location     Type
  2807 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  2808 ;;		 -> motorL(9), 
  2809 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  2810 ;;		 -> motorR(9), 
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;		None
  2813 ;; Return value:  Size  Location     Type
  2814 ;;                  1    wreg      void 
  2815 ;; Registers used:
  2816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2817 ;; Tracked objects:
  2818 ;;		On entry : 0/0
  2819 ;;		On exit  : 0/0
  2820 ;;		Unchanged: 0/0
  2821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2822 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2825 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2826 ;;Total ram usage:        4 bytes
  2827 ;; Hardware stack levels used: 1
  2828 ;; Hardware stack levels required when called: 5
  2829 ;; This function calls:
  2830 ;;		_Left45
  2831 ;;		_Right45
  2832 ;;		_TimerReset
  2833 ;;		_reverseHalfSquare
  2834 ;; This function is called by:
  2835 ;;		_White
  2836 ;;		_Colour2Action
  2837 ;; This function uses a non-reentrant model
  2838 ;;
  2839                           
  2840                           	psect	text18
  2841   001BDC                     __ptext18:
  2842                           	callstack 0
  2843   001BDC                     _Green_L90:
  2844                           	callstack 24
  2845   001BDC                     
  2846                           ;dc_motor.c: 241: void Green_L90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 2
      +                          42: {;dc_motor.c: 243:     if (ForwardFlag){
  2847   001BDC  505E               	movf	_ForwardFlag^0,w,c	;volatile
  2848   001BDE  B4D8               	btfsc	status,2,c
  2849   001BE0  EFF4  F00D         	goto	u1311
  2850   001BE4  EFF6  F00D         	goto	u1310
  2851   001BE8                     u1311:
  2852   001BE8  EF18  F00E         	goto	l2497
  2853   001BEC                     u1310:
  2854   001BEC                     
  2855                           ;dc_motor.c: 244:         reverseHalfSquare(mL,mR);
  2856   001BEC  C021  F01B         	movff	Green_L90@mL,reverseHalfSquare@mL
  2857   001BF0  C022  F01C         	movff	Green_L90@mL+1,reverseHalfSquare@mL+1
  2858   001BF4  C023  F01D         	movff	Green_L90@mR,reverseHalfSquare@mR
  2859   001BF8  C024  F01E         	movff	Green_L90@mR+1,reverseHalfSquare@mR+1
  2860   001BFC  ECEC  F00C         	call	_reverseHalfSquare	;wreg free
  2861                           
  2862                           ;dc_motor.c: 246:         Left45(mL,mR);
  2863   001C00  C021  F01A         	movff	Green_L90@mL,Left45@mL
  2864   001C04  C022  F01B         	movff	Green_L90@mL+1,Left45@mL+1
  2865   001C08  C023  F01C         	movff	Green_L90@mR,Left45@mR
  2866   001C0C  C024  F01D         	movff	Green_L90@mR+1,Left45@mR+1
  2867   001C10  ECA7  F00C         	call	_Left45	;wreg free
  2868                           
  2869                           ;dc_motor.c: 247:         Left45(mL,mR);
  2870   001C14  C021  F01A         	movff	Green_L90@mL,Left45@mL
  2871   001C18  C022  F01B         	movff	Green_L90@mL+1,Left45@mL+1
  2872   001C1C  C023  F01C         	movff	Green_L90@mR,Left45@mR
  2873   001C20  C024  F01D         	movff	Green_L90@mR+1,Left45@mR+1
  2874   001C24  ECA7  F00C         	call	_Left45	;wreg free
  2875   001C28                     
  2876                           ;dc_motor.c: 248:         TimerReset();
  2877   001C28  ECCD  F00F         	call	_TimerReset	;wreg free
  2878                           
  2879                           ;dc_motor.c: 249:     }
  2880   001C2C  EF2C  F00E         	goto	l263
  2881   001C30                     l2497:
  2882                           
  2883                           ;dc_motor.c: 252:         Right45(mL,mR);
  2884   001C30  C021  F01A         	movff	Green_L90@mL,Right45@mL
  2885   001C34  C022  F01B         	movff	Green_L90@mL+1,Right45@mL+1
  2886   001C38  C023  F01C         	movff	Green_L90@mR,Right45@mR
  2887   001C3C  C024  F01D         	movff	Green_L90@mR+1,Right45@mR+1
  2888   001C40  EC62  F00C         	call	_Right45	;wreg free
  2889                           
  2890                           ;dc_motor.c: 253:         Right45(mL,mR);
  2891   001C44  C021  F01A         	movff	Green_L90@mL,Right45@mL
  2892   001C48  C022  F01B         	movff	Green_L90@mL+1,Right45@mL+1
  2893   001C4C  C023  F01C         	movff	Green_L90@mR,Right45@mR
  2894   001C50  C024  F01D         	movff	Green_L90@mR+1,Right45@mR+1
  2895   001C54  EC62  F00C         	call	_Right45	;wreg free
  2896   001C58                     l263:
  2897   001C58  0012               	return		;funcret
  2898   001C5A                     __end_of_Green_L90:
  2899                           	callstack 0
  2900                           
  2901 ;; *************** function _Right45 *****************
  2902 ;; Defined at:
  2903 ;;		line 193 in file "dc_motor.c"
  2904 ;; Parameters:    Size  Location     Type
  2905 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  2906 ;;		 -> motorL(9), 
  2907 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  2908 ;;		 -> motorR(9), 
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;		None
  2911 ;; Return value:  Size  Location     Type
  2912 ;;                  1    wreg      void 
  2913 ;; Registers used:
  2914 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2915 ;; Tracked objects:
  2916 ;;		On entry : 0/0
  2917 ;;		On exit  : 0/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2920 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2922 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2923 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2924 ;;Total ram usage:        6 bytes
  2925 ;; Hardware stack levels used: 1
  2926 ;; Hardware stack levels required when called: 4
  2927 ;; This function calls:
  2928 ;;		_stop
  2929 ;;		_turnRight
  2930 ;; This function is called by:
  2931 ;;		_Red_R90
  2932 ;;		_Green_L90
  2933 ;;		_Yellow_rev1_R90
  2934 ;;		_Pink_rev1_L90
  2935 ;;		_Orange_R135
  2936 ;;		_LightBlue_L135
  2937 ;; This function uses a non-reentrant model
  2938 ;;
  2939                           
  2940                           	psect	text19
  2941   0018C4                     __ptext19:
  2942                           	callstack 0
  2943   0018C4                     _Right45:
  2944                           	callstack 24
  2945   0018C4                     
  2946                           ;dc_motor.c: 193: void Right45(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 194
      +                          : {;dc_motor.c: 195:     LATHbits.LATH0 = 1;;
  2947   0018C4  8080               	bsf	128,0,c	;volatile
  2948   0018C6                     
  2949                           ;dc_motor.c: 197:     stop(mL,mR);
  2950   0018C6  C01A  F014         	movff	Right45@mL,stop@mL
  2951   0018CA  C01B  F015         	movff	Right45@mL+1,stop@mL+1
  2952   0018CE  C01C  F016         	movff	Right45@mR,stop@mR
  2953   0018D2  C01D  F017         	movff	Right45@mR+1,stop@mR+1
  2954   0018D6  EC31  F00B         	call	_stop	;wreg free
  2955   0018DA                     
  2956                           ;dc_motor.c: 198:     _delay((unsigned long)((50)*(64000000/4000.0)));
  2957   0018DA  0E05               	movlw	5
  2958   0018DC  6E1F               	movwf	(??_Right45+1)^0,c
  2959   0018DE  0E0F               	movlw	15
  2960   0018E0  6E1E               	movwf	??_Right45^0,c
  2961   0018E2  0EF1               	movlw	241
  2962   0018E4                     u2137:
  2963   0018E4  2EE8               	decfsz	wreg,f,c
  2964   0018E6  D7FE               	bra	u2137
  2965   0018E8  2E1E               	decfsz	??_Right45^0,f,c
  2966   0018EA  D7FC               	bra	u2137
  2967   0018EC  2E1F               	decfsz	(??_Right45+1)^0,f,c
  2968   0018EE  D7FA               	bra	u2137
  2969   0018F0  F000               	nop	
  2970   0018F2                     
  2971                           ;dc_motor.c: 199:     turnRight(mL,mR);
  2972   0018F2  C01A  F014         	movff	Right45@mL,turnRight@mL
  2973   0018F6  C01B  F015         	movff	Right45@mL+1,turnRight@mL+1
  2974   0018FA  C01C  F016         	movff	Right45@mR,turnRight@mR
  2975   0018FE  C01D  F017         	movff	Right45@mR+1,turnRight@mR+1
  2976   001902  EC84  F00B         	call	_turnRight	;wreg free
  2977                           
  2978                           ;dc_motor.c: 200:     _delay((unsigned long)((_45drightdelay)*(64000000/4000.0)));
  2979   001906  0E0E               	movlw	14
  2980   001908  6E1F               	movwf	(??_Right45+1)^0,c
  2981   00190A  0ECD               	movlw	205
  2982   00190C  6E1E               	movwf	??_Right45^0,c
  2983   00190E  0E6C               	movlw	108
  2984   001910                     u2147:
  2985   001910  2EE8               	decfsz	wreg,f,c
  2986   001912  D7FE               	bra	u2147
  2987   001914  2E1E               	decfsz	??_Right45^0,f,c
  2988   001916  D7FC               	bra	u2147
  2989   001918  2E1F               	decfsz	(??_Right45+1)^0,f,c
  2990   00191A  D7FA               	bra	u2147
  2991   00191C  D000               	nop2	
  2992   00191E                     
  2993                           ;dc_motor.c: 201:     stop(mL,mR);
  2994   00191E  C01A  F014         	movff	Right45@mL,stop@mL
  2995   001922  C01B  F015         	movff	Right45@mL+1,stop@mL+1
  2996   001926  C01C  F016         	movff	Right45@mR,stop@mR
  2997   00192A  C01D  F017         	movff	Right45@mR+1,stop@mR+1
  2998   00192E  EC31  F00B         	call	_stop	;wreg free
  2999   001932                     
  3000                           ;dc_motor.c: 202:     _delay((unsigned long)((50)*(64000000/4000.0)));
  3001   001932  0E05               	movlw	5
  3002   001934  6E1F               	movwf	(??_Right45+1)^0,c
  3003   001936  0E0F               	movlw	15
  3004   001938  6E1E               	movwf	??_Right45^0,c
  3005   00193A  0EF1               	movlw	241
  3006   00193C                     u2157:
  3007   00193C  2EE8               	decfsz	wreg,f,c
  3008   00193E  D7FE               	bra	u2157
  3009   001940  2E1E               	decfsz	??_Right45^0,f,c
  3010   001942  D7FC               	bra	u2157
  3011   001944  2E1F               	decfsz	(??_Right45+1)^0,f,c
  3012   001946  D7FA               	bra	u2157
  3013   001948  F000               	nop	
  3014   00194A                     
  3015                           ;dc_motor.c: 203:     LATHbits.LATH0 = 0;;
  3016   00194A  9080               	bcf	128,0,c	;volatile
  3017   00194C  0012               	return		;funcret
  3018   00194E                     __end_of_Right45:
  3019                           	callstack 0
  3020                           
  3021 ;; *************** function _turnRight *****************
  3022 ;; Defined at:
  3023 ;;		line 132 in file "dc_motor.c"
  3024 ;; Parameters:    Size  Location     Type
  3025 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  3026 ;;		 -> motorL(9), 
  3027 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  3028 ;;		 -> motorR(9), 
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;  i               2   23[COMRAM] unsigned int 
  3031 ;; Return value:  Size  Location     Type
  3032 ;;                  1    wreg      void 
  3033 ;; Registers used:
  3034 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3040 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3041 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3043 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3044 ;;Total ram usage:        6 bytes
  3045 ;; Hardware stack levels used: 1
  3046 ;; Hardware stack levels required when called: 3
  3047 ;; This function calls:
  3048 ;;		_setMotorPWM
  3049 ;; This function is called by:
  3050 ;;		_Right45
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           	psect	text20
  3055   001708                     __ptext20:
  3056                           	callstack 0
  3057   001708                     _turnRight:
  3058                           	callstack 24
  3059   001708                     
  3060                           ;dc_motor.c: 132: void turnRight(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 1
      +                          33: {;dc_motor.c: 134:     (mL->direction) = 0;
  3061   001708  EE20 F001          	lfsr	2,1
  3062   00170C  5014               	movf	turnRight@mL^0,w,c
  3063   00170E  26D9               	addwf	fsr2l,f,c
  3064   001710  5015               	movf	(turnRight@mL+1)^0,w,c
  3065   001712  22DA               	addwfc	fsr2h,f,c
  3066   001714  0E00               	movlw	0
  3067   001716  6EDF               	movwf	indf2,c
  3068                           
  3069                           ;dc_motor.c: 135:     (mR->direction) = 1;
  3070   001718  EE20 F001          	lfsr	2,1
  3071   00171C  5016               	movf	turnRight@mR^0,w,c
  3072   00171E  26D9               	addwf	fsr2l,f,c
  3073   001720  5017               	movf	(turnRight@mR+1)^0,w,c
  3074   001722  22DA               	addwfc	fsr2h,f,c
  3075   001724  0E01               	movlw	1
  3076   001726  6EDF               	movwf	indf2,c
  3077   001728                     
  3078                           ;dc_motor.c: 136:     setMotorPWM(mL);
  3079   001728  C014  F00E         	movff	turnRight@mL,setMotorPWM@m
  3080   00172C  C015  F00F         	movff	turnRight@mL+1,setMotorPWM@m+1
  3081   001730  EC70  F008         	call	_setMotorPWM	;wreg free
  3082   001734                     
  3083                           ;dc_motor.c: 137:     setMotorPWM(mR);
  3084   001734  C016  F00E         	movff	turnRight@mR,setMotorPWM@m
  3085   001738  C017  F00F         	movff	turnRight@mR+1,setMotorPWM@m+1
  3086   00173C  EC70  F008         	call	_setMotorPWM	;wreg free
  3087   001740                     
  3088                           ;dc_motor.c: 138:     for (unsigned int i = 0; i <50; i++)
  3089   001740  0E00               	movlw	0
  3090   001742  6E19               	movwf	(turnRight@i+1)^0,c
  3091   001744  0E00               	movlw	0
  3092   001746  6E18               	movwf	turnRight@i^0,c
  3093   001748                     l2347:
  3094                           
  3095                           ;dc_motor.c: 139:     {;dc_motor.c: 140:         mL->power++;
  3096   001748  C014  FFD9         	movff	turnRight@mL,fsr2l
  3097   00174C  C015  FFDA         	movff	turnRight@mL+1,fsr2h
  3098   001750  2ADF               	incf	indf2,f,c
  3099                           
  3100                           ;dc_motor.c: 141:         mR->power++;
  3101   001752  C016  FFD9         	movff	turnRight@mR,fsr2l
  3102   001756  C017  FFDA         	movff	turnRight@mR+1,fsr2h
  3103   00175A  2ADF               	incf	indf2,f,c
  3104   00175C                     
  3105                           ;dc_motor.c: 142:         setMotorPWM(mL);
  3106   00175C  C014  F00E         	movff	turnRight@mL,setMotorPWM@m
  3107   001760  C015  F00F         	movff	turnRight@mL+1,setMotorPWM@m+1
  3108   001764  EC70  F008         	call	_setMotorPWM	;wreg free
  3109   001768                     
  3110                           ;dc_motor.c: 143:         setMotorPWM(mR);
  3111   001768  C016  F00E         	movff	turnRight@mR,setMotorPWM@m
  3112   00176C  C017  F00F         	movff	turnRight@mR+1,setMotorPWM@m+1
  3113   001770  EC70  F008         	call	_setMotorPWM	;wreg free
  3114   001774                     
  3115                           ;dc_motor.c: 144:         _delay((unsigned long)((100)*(64000000/4000000.0)));
  3116   001774  0EE4               	movlw	228
  3117   001776                     u2167:
  3118   001776  D000               	nop2	
  3119   001778  D000               	nop2	
  3120   00177A  2EE8               	decfsz	wreg,f,c
  3121   00177C  D7FC               	bra	u2167
  3122   00177E  D000               	nop2	
  3123   001780  D000               	nop2	
  3124   001782                     
  3125                           ;dc_motor.c: 145:     }
  3126   001782  4A18               	infsnz	turnRight@i^0,f,c
  3127   001784  2A19               	incf	(turnRight@i+1)^0,f,c
  3128   001786  5019               	movf	(turnRight@i+1)^0,w,c
  3129   001788  E109               	bnz	u1250
  3130   00178A  0E32               	movlw	50
  3131   00178C  5C18               	subwf	turnRight@i^0,w,c
  3132   00178E  A0D8               	btfss	status,0,c
  3133   001790  EFCC  F00B         	goto	u1251
  3134   001794  EFCE  F00B         	goto	u1250
  3135   001798                     u1251:
  3136   001798  EFA4  F00B         	goto	l2347
  3137   00179C                     u1250:
  3138   00179C  0012               	return		;funcret
  3139   00179E                     __end_of_turnRight:
  3140                           	callstack 0
  3141                           
  3142 ;; *************** function _Blue_T180 *****************
  3143 ;; Defined at:
  3144 ;;		line 257 in file "dc_motor.c"
  3145 ;; Parameters:    Size  Location     Type
  3146 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  3147 ;;		 -> motorL(9), 
  3148 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  3149 ;;		 -> motorR(9), 
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;		None
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  1    wreg      void 
  3154 ;; Registers used:
  3155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3161 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3164 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3165 ;;Total ram usage:        4 bytes
  3166 ;; Hardware stack levels used: 1
  3167 ;; Hardware stack levels required when called: 6
  3168 ;; This function calls:
  3169 ;;		_TimerReset
  3170 ;;		_reverseHalfSquare
  3171 ;;		_rotate180left
  3172 ;; This function is called by:
  3173 ;;		_White
  3174 ;;		_Colour2Action
  3175 ;; This function uses a non-reentrant model
  3176 ;;
  3177                           
  3178                           	psect	text21
  3179   001D38                     __ptext21:
  3180                           	callstack 0
  3181   001D38                     _Blue_T180:
  3182                           	callstack 23
  3183   001D38                     
  3184                           ;dc_motor.c: 257: void Blue_T180(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 2
      +                          58: {;dc_motor.c: 259:     if (ForwardFlag){
  3185   001D38  505E               	movf	_ForwardFlag^0,w,c	;volatile
  3186   001D3A  B4D8               	btfsc	status,2,c
  3187   001D3C  EFA2  F00E         	goto	u1321
  3188   001D40  EFA4  F00E         	goto	u1320
  3189   001D44                     u1321:
  3190   001D44  EFBC  F00E         	goto	l2505
  3191   001D48                     u1320:
  3192   001D48                     
  3193                           ;dc_motor.c: 260:     reverseHalfSquare(mL,mR);
  3194   001D48  C024  F01B         	movff	Blue_T180@mL,reverseHalfSquare@mL
  3195   001D4C  C025  F01C         	movff	Blue_T180@mL+1,reverseHalfSquare@mL+1
  3196   001D50  C026  F01D         	movff	Blue_T180@mR,reverseHalfSquare@mR
  3197   001D54  C027  F01E         	movff	Blue_T180@mR+1,reverseHalfSquare@mR+1
  3198   001D58  ECEC  F00C         	call	_reverseHalfSquare	;wreg free
  3199                           
  3200                           ;dc_motor.c: 262:     rotate180left(mL,mR);
  3201   001D5C  C024  F020         	movff	Blue_T180@mL,rotate180left@mL
  3202   001D60  C025  F021         	movff	Blue_T180@mL+1,rotate180left@mL+1
  3203   001D64  C026  F022         	movff	Blue_T180@mR,rotate180left@mR
  3204   001D68  C027  F023         	movff	Blue_T180@mR+1,rotate180left@mR+1
  3205   001D6C  ECC7  F00E         	call	_rotate180left	;wreg free
  3206   001D70                     
  3207                           ;dc_motor.c: 263:     TimerReset();
  3208   001D70  ECCD  F00F         	call	_TimerReset	;wreg free
  3209                           
  3210                           ;dc_motor.c: 264:     }else{
  3211   001D74  EFC6  F00E         	goto	l268
  3212   001D78                     l2505:
  3213                           
  3214                           ;dc_motor.c: 265:     rotate180left(mL,mR);
  3215   001D78  C024  F020         	movff	Blue_T180@mL,rotate180left@mL
  3216   001D7C  C025  F021         	movff	Blue_T180@mL+1,rotate180left@mL+1
  3217   001D80  C026  F022         	movff	Blue_T180@mR,rotate180left@mR
  3218   001D84  C027  F023         	movff	Blue_T180@mR+1,rotate180left@mR+1
  3219   001D88  ECC7  F00E         	call	_rotate180left	;wreg free
  3220   001D8C                     l268:
  3221   001D8C  0012               	return		;funcret
  3222   001D8E                     __end_of_Blue_T180:
  3223                           	callstack 0
  3224                           
  3225 ;; *************** function _rotate180left *****************
  3226 ;; Defined at:
  3227 ;;		line 207 in file "dc_motor.c"
  3228 ;; Parameters:    Size  Location     Type
  3229 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  3230 ;;		 -> motorL(9), 
  3231 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  3232 ;;		 -> motorR(9), 
  3233 ;; Auto vars:     Size  Location     Type
  3234 ;;		None
  3235 ;; Return value:  Size  Location     Type
  3236 ;;                  1    wreg      void 
  3237 ;; Registers used:
  3238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3239 ;; Tracked objects:
  3240 ;;		On entry : 0/0
  3241 ;;		On exit  : 0/0
  3242 ;;		Unchanged: 0/0
  3243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3244 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3247 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3248 ;;Total ram usage:        4 bytes
  3249 ;; Hardware stack levels used: 1
  3250 ;; Hardware stack levels required when called: 5
  3251 ;; This function calls:
  3252 ;;		_Left45
  3253 ;; This function is called by:
  3254 ;;		_Blue_T180
  3255 ;;		_White
  3256 ;; This function uses a non-reentrant model
  3257 ;;
  3258                           
  3259                           	psect	text22
  3260   001D8E                     __ptext22:
  3261                           	callstack 0
  3262   001D8E                     _rotate180left:
  3263                           	callstack 24
  3264   001D8E                     
  3265                           ;dc_motor.c: 207: void rotate180left(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 208: {;dc_motor.c: 210:     Left45(mL,mR);
  3266   001D8E  C020  F01A         	movff	rotate180left@mL,Left45@mL
  3267   001D92  C021  F01B         	movff	rotate180left@mL+1,Left45@mL+1
  3268   001D96  C022  F01C         	movff	rotate180left@mR,Left45@mR
  3269   001D9A  C023  F01D         	movff	rotate180left@mR+1,Left45@mR+1
  3270   001D9E  ECA7  F00C         	call	_Left45	;wreg free
  3271                           
  3272                           ;dc_motor.c: 211:     Left45(mL,mR);
  3273   001DA2  C020  F01A         	movff	rotate180left@mL,Left45@mL
  3274   001DA6  C021  F01B         	movff	rotate180left@mL+1,Left45@mL+1
  3275   001DAA  C022  F01C         	movff	rotate180left@mR,Left45@mR
  3276   001DAE  C023  F01D         	movff	rotate180left@mR+1,Left45@mR+1
  3277   001DB2  ECA7  F00C         	call	_Left45	;wreg free
  3278                           
  3279                           ;dc_motor.c: 212:     Left45(mL,mR);
  3280   001DB6  C020  F01A         	movff	rotate180left@mL,Left45@mL
  3281   001DBA  C021  F01B         	movff	rotate180left@mL+1,Left45@mL+1
  3282   001DBE  C022  F01C         	movff	rotate180left@mR,Left45@mR
  3283   001DC2  C023  F01D         	movff	rotate180left@mR+1,Left45@mR+1
  3284   001DC6  ECA7  F00C         	call	_Left45	;wreg free
  3285                           
  3286                           ;dc_motor.c: 213:     Left45(mL,mR);
  3287   001DCA  C020  F01A         	movff	rotate180left@mL,Left45@mL
  3288   001DCE  C021  F01B         	movff	rotate180left@mL+1,Left45@mL+1
  3289   001DD2  C022  F01C         	movff	rotate180left@mR,Left45@mR
  3290   001DD6  C023  F01D         	movff	rotate180left@mR+1,Left45@mR+1
  3291   001DDA  ECA7  F00C         	call	_Left45	;wreg free
  3292   001DDE  0012               	return		;funcret
  3293   001DE0                     __end_of_rotate180left:
  3294                           	callstack 0
  3295                           
  3296 ;; *************** function _Left45 *****************
  3297 ;; Defined at:
  3298 ;;		line 179 in file "dc_motor.c"
  3299 ;; Parameters:    Size  Location     Type
  3300 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3301 ;;		 -> motorL(9), 
  3302 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3303 ;;		 -> motorR(9), 
  3304 ;; Auto vars:     Size  Location     Type
  3305 ;;		None
  3306 ;; Return value:  Size  Location     Type
  3307 ;;                  1    wreg      void 
  3308 ;; Registers used:
  3309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3310 ;; Tracked objects:
  3311 ;;		On entry : 0/0
  3312 ;;		On exit  : 0/0
  3313 ;;		Unchanged: 0/0
  3314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3315 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3317 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3318 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3319 ;;Total ram usage:        6 bytes
  3320 ;; Hardware stack levels used: 1
  3321 ;; Hardware stack levels required when called: 4
  3322 ;; This function calls:
  3323 ;;		_stop
  3324 ;;		_turnLeft
  3325 ;; This function is called by:
  3326 ;;		_rotate180left
  3327 ;;		_Red_R90
  3328 ;;		_Green_L90
  3329 ;;		_Yellow_rev1_R90
  3330 ;;		_Pink_rev1_L90
  3331 ;;		_Orange_R135
  3332 ;;		_LightBlue_L135
  3333 ;; This function uses a non-reentrant model
  3334 ;;
  3335                           
  3336                           	psect	text23
  3337   00194E                     __ptext23:
  3338                           	callstack 0
  3339   00194E                     _Left45:
  3340                           	callstack 24
  3341   00194E                     
  3342                           ;dc_motor.c: 179: void Left45(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 180:
      +                           {;dc_motor.c: 181:     LATFbits.LATF0 = 1;;
  3343   00194E  807E               	bsf	126,0,c	;volatile
  3344   001950                     
  3345                           ;dc_motor.c: 183:     stop(mL,mR);
  3346   001950  C01A  F014         	movff	Left45@mL,stop@mL
  3347   001954  C01B  F015         	movff	Left45@mL+1,stop@mL+1
  3348   001958  C01C  F016         	movff	Left45@mR,stop@mR
  3349   00195C  C01D  F017         	movff	Left45@mR+1,stop@mR+1
  3350   001960  EC31  F00B         	call	_stop	;wreg free
  3351   001964                     
  3352                           ;dc_motor.c: 184:     _delay((unsigned long)((50)*(64000000/4000.0)));
  3353   001964  0E05               	movlw	5
  3354   001966  6E1F               	movwf	(??_Left45+1)^0,c
  3355   001968  0E0F               	movlw	15
  3356   00196A  6E1E               	movwf	??_Left45^0,c
  3357   00196C  0EF1               	movlw	241
  3358   00196E                     u2177:
  3359   00196E  2EE8               	decfsz	wreg,f,c
  3360   001970  D7FE               	bra	u2177
  3361   001972  2E1E               	decfsz	??_Left45^0,f,c
  3362   001974  D7FC               	bra	u2177
  3363   001976  2E1F               	decfsz	(??_Left45+1)^0,f,c
  3364   001978  D7FA               	bra	u2177
  3365   00197A  F000               	nop	
  3366   00197C                     
  3367                           ;dc_motor.c: 185:     turnLeft(mL,mR);
  3368   00197C  C01A  F014         	movff	Left45@mL,turnLeft@mL
  3369   001980  C01B  F015         	movff	Left45@mL+1,turnLeft@mL+1
  3370   001984  C01C  F016         	movff	Left45@mR,turnLeft@mR
  3371   001988  C01D  F017         	movff	Left45@mR+1,turnLeft@mR+1
  3372   00198C  ECCF  F00B         	call	_turnLeft	;wreg free
  3373                           
  3374                           ;dc_motor.c: 186:     _delay((unsigned long)((_45dleftdelay)*(64000000/4000.0)));
  3375   001990  0E0E               	movlw	14
  3376   001992  6E1F               	movwf	(??_Left45+1)^0,c
  3377   001994  0ECD               	movlw	205
  3378   001996  6E1E               	movwf	??_Left45^0,c
  3379   001998  0E6C               	movlw	108
  3380   00199A                     u2187:
  3381   00199A  2EE8               	decfsz	wreg,f,c
  3382   00199C  D7FE               	bra	u2187
  3383   00199E  2E1E               	decfsz	??_Left45^0,f,c
  3384   0019A0  D7FC               	bra	u2187
  3385   0019A2  2E1F               	decfsz	(??_Left45+1)^0,f,c
  3386   0019A4  D7FA               	bra	u2187
  3387   0019A6  D000               	nop2	
  3388   0019A8                     
  3389                           ;dc_motor.c: 187:     stop(mL,mR);
  3390   0019A8  C01A  F014         	movff	Left45@mL,stop@mL
  3391   0019AC  C01B  F015         	movff	Left45@mL+1,stop@mL+1
  3392   0019B0  C01C  F016         	movff	Left45@mR,stop@mR
  3393   0019B4  C01D  F017         	movff	Left45@mR+1,stop@mR+1
  3394   0019B8  EC31  F00B         	call	_stop	;wreg free
  3395   0019BC                     
  3396                           ;dc_motor.c: 188:     _delay((unsigned long)((50)*(64000000/4000.0)));
  3397   0019BC  0E05               	movlw	5
  3398   0019BE  6E1F               	movwf	(??_Left45+1)^0,c
  3399   0019C0  0E0F               	movlw	15
  3400   0019C2  6E1E               	movwf	??_Left45^0,c
  3401   0019C4  0EF1               	movlw	241
  3402   0019C6                     u2197:
  3403   0019C6  2EE8               	decfsz	wreg,f,c
  3404   0019C8  D7FE               	bra	u2197
  3405   0019CA  2E1E               	decfsz	??_Left45^0,f,c
  3406   0019CC  D7FC               	bra	u2197
  3407   0019CE  2E1F               	decfsz	(??_Left45+1)^0,f,c
  3408   0019D0  D7FA               	bra	u2197
  3409   0019D2  F000               	nop	
  3410   0019D4                     
  3411                           ;dc_motor.c: 189:     LATFbits.LATF0 = 0;;
  3412   0019D4  907E               	bcf	126,0,c	;volatile
  3413   0019D6  0012               	return		;funcret
  3414   0019D8                     __end_of_Left45:
  3415                           	callstack 0
  3416                           
  3417 ;; *************** function _turnLeft *****************
  3418 ;; Defined at:
  3419 ;;		line 113 in file "dc_motor.c"
  3420 ;; Parameters:    Size  Location     Type
  3421 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  3422 ;;		 -> motorL(9), 
  3423 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  3424 ;;		 -> motorR(9), 
  3425 ;; Auto vars:     Size  Location     Type
  3426 ;;  i               2   23[COMRAM] unsigned int 
  3427 ;; Return value:  Size  Location     Type
  3428 ;;                  1    wreg      void 
  3429 ;; Registers used:
  3430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3431 ;; Tracked objects:
  3432 ;;		On entry : 0/0
  3433 ;;		On exit  : 0/0
  3434 ;;		Unchanged: 0/0
  3435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3436 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3437 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3439 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3440 ;;Total ram usage:        6 bytes
  3441 ;; Hardware stack levels used: 1
  3442 ;; Hardware stack levels required when called: 3
  3443 ;; This function calls:
  3444 ;;		_setMotorPWM
  3445 ;; This function is called by:
  3446 ;;		_Left45
  3447 ;; This function uses a non-reentrant model
  3448 ;;
  3449                           
  3450                           	psect	text24
  3451   00179E                     __ptext24:
  3452                           	callstack 0
  3453   00179E                     _turnLeft:
  3454                           	callstack 24
  3455   00179E                     
  3456                           ;dc_motor.c: 113: void turnLeft(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 11
      +                          4: {;dc_motor.c: 116:     (mL->direction) = 1;
  3457   00179E  EE20 F001          	lfsr	2,1
  3458   0017A2  5014               	movf	turnLeft@mL^0,w,c
  3459   0017A4  26D9               	addwf	fsr2l,f,c
  3460   0017A6  5015               	movf	(turnLeft@mL+1)^0,w,c
  3461   0017A8  22DA               	addwfc	fsr2h,f,c
  3462   0017AA  0E01               	movlw	1
  3463   0017AC  6EDF               	movwf	indf2,c
  3464                           
  3465                           ;dc_motor.c: 117:     (mR->direction) = 0;
  3466   0017AE  EE20 F001          	lfsr	2,1
  3467   0017B2  5016               	movf	turnLeft@mR^0,w,c
  3468   0017B4  26D9               	addwf	fsr2l,f,c
  3469   0017B6  5017               	movf	(turnLeft@mR+1)^0,w,c
  3470   0017B8  22DA               	addwfc	fsr2h,f,c
  3471   0017BA  0E00               	movlw	0
  3472   0017BC  6EDF               	movwf	indf2,c
  3473   0017BE                     
  3474                           ;dc_motor.c: 118:     setMotorPWM(mL);
  3475   0017BE  C014  F00E         	movff	turnLeft@mL,setMotorPWM@m
  3476   0017C2  C015  F00F         	movff	turnLeft@mL+1,setMotorPWM@m+1
  3477   0017C6  EC70  F008         	call	_setMotorPWM	;wreg free
  3478   0017CA                     
  3479                           ;dc_motor.c: 119:     setMotorPWM(mR);
  3480   0017CA  C016  F00E         	movff	turnLeft@mR,setMotorPWM@m
  3481   0017CE  C017  F00F         	movff	turnLeft@mR+1,setMotorPWM@m+1
  3482   0017D2  EC70  F008         	call	_setMotorPWM	;wreg free
  3483   0017D6                     
  3484                           ;dc_motor.c: 120:     for (unsigned int i = 0; i <50; i++)
  3485   0017D6  0E00               	movlw	0
  3486   0017D8  6E19               	movwf	(turnLeft@i+1)^0,c
  3487   0017DA  0E00               	movlw	0
  3488   0017DC  6E18               	movwf	turnLeft@i^0,c
  3489   0017DE                     l2319:
  3490                           
  3491                           ;dc_motor.c: 121:     {;dc_motor.c: 122:         mL->power++;
  3492   0017DE  C014  FFD9         	movff	turnLeft@mL,fsr2l
  3493   0017E2  C015  FFDA         	movff	turnLeft@mL+1,fsr2h
  3494   0017E6  2ADF               	incf	indf2,f,c
  3495                           
  3496                           ;dc_motor.c: 123:         mR->power++;
  3497   0017E8  C016  FFD9         	movff	turnLeft@mR,fsr2l
  3498   0017EC  C017  FFDA         	movff	turnLeft@mR+1,fsr2h
  3499   0017F0  2ADF               	incf	indf2,f,c
  3500   0017F2                     
  3501                           ;dc_motor.c: 124:         setMotorPWM(mL);
  3502   0017F2  C014  F00E         	movff	turnLeft@mL,setMotorPWM@m
  3503   0017F6  C015  F00F         	movff	turnLeft@mL+1,setMotorPWM@m+1
  3504   0017FA  EC70  F008         	call	_setMotorPWM	;wreg free
  3505   0017FE                     
  3506                           ;dc_motor.c: 125:         setMotorPWM(mR);
  3507   0017FE  C016  F00E         	movff	turnLeft@mR,setMotorPWM@m
  3508   001802  C017  F00F         	movff	turnLeft@mR+1,setMotorPWM@m+1
  3509   001806  EC70  F008         	call	_setMotorPWM	;wreg free
  3510   00180A                     
  3511                           ;dc_motor.c: 126:         _delay((unsigned long)((100)*(64000000/4000000.0)));
  3512   00180A  0EE4               	movlw	228
  3513   00180C                     u2207:
  3514   00180C  D000               	nop2	
  3515   00180E  D000               	nop2	
  3516   001810  2EE8               	decfsz	wreg,f,c
  3517   001812  D7FC               	bra	u2207
  3518   001814  D000               	nop2	
  3519   001816  D000               	nop2	
  3520   001818                     
  3521                           ;dc_motor.c: 127:     }
  3522   001818  4A18               	infsnz	turnLeft@i^0,f,c
  3523   00181A  2A19               	incf	(turnLeft@i+1)^0,f,c
  3524   00181C  5019               	movf	(turnLeft@i+1)^0,w,c
  3525   00181E  E109               	bnz	u1220
  3526   001820  0E32               	movlw	50
  3527   001822  5C18               	subwf	turnLeft@i^0,w,c
  3528   001824  A0D8               	btfss	status,0,c
  3529   001826  EF17  F00C         	goto	u1221
  3530   00182A  EF19  F00C         	goto	u1220
  3531   00182E                     u1221:
  3532   00182E  EFEF  F00B         	goto	l2319
  3533   001832                     u1220:
  3534   001832  0012               	return		;funcret
  3535   001834                     __end_of_turnLeft:
  3536                           	callstack 0
  3537                           
  3538 ;; *************** function _reverseHalfSquare *****************
  3539 ;; Defined at:
  3540 ;;		line 216 in file "dc_motor.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;  mL              2   26[COMRAM] PTR struct DC_motor
  3543 ;;		 -> motorL(9), 
  3544 ;;  mR              2   28[COMRAM] PTR struct DC_motor
  3545 ;;		 -> motorR(9), 
  3546 ;; Auto vars:     Size  Location     Type
  3547 ;;		None
  3548 ;; Return value:  Size  Location     Type
  3549 ;;                  1    wreg      void 
  3550 ;; Registers used:
  3551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3552 ;; Tracked objects:
  3553 ;;		On entry : 0/0
  3554 ;;		On exit  : 0/0
  3555 ;;		Unchanged: 0/0
  3556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3557 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3559 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3560 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3561 ;;Total ram usage:        6 bytes
  3562 ;; Hardware stack levels used: 1
  3563 ;; Hardware stack levels required when called: 4
  3564 ;; This function calls:
  3565 ;;		_fullSpeedReverse
  3566 ;;		_stop
  3567 ;; This function is called by:
  3568 ;;		_Red_R90
  3569 ;;		_Green_L90
  3570 ;;		_Blue_T180
  3571 ;;		_Yellow_rev1_R90
  3572 ;;		_Pink_rev1_L90
  3573 ;;		_Orange_R135
  3574 ;;		_LightBlue_L135
  3575 ;;		_White
  3576 ;; This function uses a non-reentrant model
  3577 ;;
  3578                           
  3579                           	psect	text25
  3580   0019D8                     __ptext25:
  3581                           	callstack 0
  3582   0019D8                     _reverseHalfSquare:
  3583                           	callstack 25
  3584   0019D8                     
  3585                           ;dc_motor.c: 216: void reverseHalfSquare(struct DC_motor *mL, struct DC_motor *mR);dc_mo
      +                          tor.c: 217: {;dc_motor.c: 218:     stop(mL,mR);
  3586   0019D8  C01B  F014         	movff	reverseHalfSquare@mL,stop@mL
  3587   0019DC  C01C  F015         	movff	reverseHalfSquare@mL+1,stop@mL+1
  3588   0019E0  C01D  F016         	movff	reverseHalfSquare@mR,stop@mR
  3589   0019E4  C01E  F017         	movff	reverseHalfSquare@mR+1,stop@mR+1
  3590   0019E8  EC31  F00B         	call	_stop	;wreg free
  3591   0019EC                     
  3592                           ;dc_motor.c: 219:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3593   0019EC  0E09               	movlw	9
  3594   0019EE  6E20               	movwf	(??_reverseHalfSquare+1)^0,c
  3595   0019F0  0E1E               	movlw	30
  3596   0019F2  6E1F               	movwf	??_reverseHalfSquare^0,c
  3597   0019F4  0EE4               	movlw	228
  3598   0019F6                     u2217:
  3599   0019F6  2EE8               	decfsz	wreg,f,c
  3600   0019F8  D7FE               	bra	u2217
  3601   0019FA  2E1F               	decfsz	??_reverseHalfSquare^0,f,c
  3602   0019FC  D7FC               	bra	u2217
  3603   0019FE  2E20               	decfsz	(??_reverseHalfSquare+1)^0,f,c
  3604   001A00  D7FA               	bra	u2217
  3605   001A02  D000               	nop2	
  3606   001A04                     
  3607                           ;dc_motor.c: 220:     fullSpeedReverse(mL,mR);
  3608   001A04  C01B  F014         	movff	reverseHalfSquare@mL,fullSpeedReverse@mL
  3609   001A08  C01C  F015         	movff	reverseHalfSquare@mL+1,fullSpeedReverse@mL+1
  3610   001A0C  C01D  F016         	movff	reverseHalfSquare@mR,fullSpeedReverse@mR
  3611   001A10  C01E  F017         	movff	reverseHalfSquare@mR+1,fullSpeedReverse@mR+1
  3612   001A14  EC6F  F00D         	call	_fullSpeedReverse	;wreg free
  3613                           
  3614                           ;dc_motor.c: 221:     _delay((unsigned long)((_halfsquare)*(64000000/4000.0)));
  3615   001A18  0E1D               	movlw	29
  3616   001A1A  6E20               	movwf	(??_reverseHalfSquare+1)^0,c
  3617   001A1C  0E69               	movlw	105
  3618   001A1E  6E1F               	movwf	??_reverseHalfSquare^0,c
  3619   001A20  0EA5               	movlw	165
  3620   001A22                     u2227:
  3621   001A22  2EE8               	decfsz	wreg,f,c
  3622   001A24  D7FE               	bra	u2227
  3623   001A26  2E1F               	decfsz	??_reverseHalfSquare^0,f,c
  3624   001A28  D7FC               	bra	u2227
  3625   001A2A  2E20               	decfsz	(??_reverseHalfSquare+1)^0,f,c
  3626   001A2C  D7FA               	bra	u2227
  3627   001A2E  F000               	nop	
  3628   001A30                     
  3629                           ;dc_motor.c: 222:     stop(mL,mR);
  3630   001A30  C01B  F014         	movff	reverseHalfSquare@mL,stop@mL
  3631   001A34  C01C  F015         	movff	reverseHalfSquare@mL+1,stop@mL+1
  3632   001A38  C01D  F016         	movff	reverseHalfSquare@mR,stop@mR
  3633   001A3C  C01E  F017         	movff	reverseHalfSquare@mR+1,stop@mR+1
  3634   001A40  EC31  F00B         	call	_stop	;wreg free
  3635   001A44                     
  3636                           ;dc_motor.c: 223:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3637   001A44  0E09               	movlw	9
  3638   001A46  6E20               	movwf	(??_reverseHalfSquare+1)^0,c
  3639   001A48  0E1E               	movlw	30
  3640   001A4A  6E1F               	movwf	??_reverseHalfSquare^0,c
  3641   001A4C  0EE4               	movlw	228
  3642   001A4E                     u2237:
  3643   001A4E  2EE8               	decfsz	wreg,f,c
  3644   001A50  D7FE               	bra	u2237
  3645   001A52  2E1F               	decfsz	??_reverseHalfSquare^0,f,c
  3646   001A54  D7FC               	bra	u2237
  3647   001A56  2E20               	decfsz	(??_reverseHalfSquare+1)^0,f,c
  3648   001A58  D7FA               	bra	u2237
  3649   001A5A  D000               	nop2	
  3650   001A5C  0012               	return		;funcret
  3651   001A5E                     __end_of_reverseHalfSquare:
  3652                           	callstack 0
  3653                           
  3654 ;; *************** function _stop *****************
  3655 ;; Defined at:
  3656 ;;		line 93 in file "dc_motor.c"
  3657 ;; Parameters:    Size  Location     Type
  3658 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  3659 ;;		 -> motorL(9), 
  3660 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  3661 ;;		 -> motorR(9), 
  3662 ;; Auto vars:     Size  Location     Type
  3663 ;;		None
  3664 ;; Return value:  Size  Location     Type
  3665 ;;                  1    wreg      void 
  3666 ;; Registers used:
  3667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3668 ;; Tracked objects:
  3669 ;;		On entry : 0/0
  3670 ;;		On exit  : 0/0
  3671 ;;		Unchanged: 0/0
  3672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3673 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3675 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3676 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3677 ;;Total ram usage:        5 bytes
  3678 ;; Hardware stack levels used: 1
  3679 ;; Hardware stack levels required when called: 3
  3680 ;; This function calls:
  3681 ;;		_setMotorPWM
  3682 ;; This function is called by:
  3683 ;;		_Left45
  3684 ;;		_Right45
  3685 ;;		_reverseHalfSquare
  3686 ;;		_Yellow_rev1_R90
  3687 ;;		_Pink_rev1_L90
  3688 ;;		_Orange_R135
  3689 ;;		_White
  3690 ;;		_maxTimeReturn
  3691 ;; This function uses a non-reentrant model
  3692 ;;
  3693                           
  3694                           	psect	text26
  3695   001662                     __ptext26:
  3696                           	callstack 0
  3697   001662                     _stop:
  3698                           	callstack 26
  3699   001662                     
  3700                           ;dc_motor.c: 93: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 94: {;d
      +                          c_motor.c: 95:     LATDbits.LATD4 = 1;;
  3701   001662  887C               	bsf	124,4,c	;volatile
  3702                           
  3703                           ;dc_motor.c: 96:     while((mL->power)>0 && (mR->power)>0)
  3704   001664  EF6A  F00B         	goto	l2303
  3705   001668                     l2289:
  3706                           
  3707                           ;dc_motor.c: 97:     {;dc_motor.c: 99:         if (mL->power>0){
  3708   001668  C014  FFD9         	movff	stop@mL,fsr2l
  3709   00166C  C015  FFDA         	movff	stop@mL+1,fsr2h
  3710   001670  50DF               	movf	indf2,w,c
  3711   001672  B4D8               	btfsc	status,2,c
  3712   001674  EF3E  F00B         	goto	u1181
  3713   001678  EF40  F00B         	goto	u1180
  3714   00167C                     u1181:
  3715   00167C  EF45  F00B         	goto	l2293
  3716   001680                     u1180:
  3717   001680                     
  3718                           ;dc_motor.c: 100:             mL->power--;
  3719   001680  C014  FFD9         	movff	stop@mL,fsr2l
  3720   001684  C015  FFDA         	movff	stop@mL+1,fsr2h
  3721   001688  06DF               	decf	indf2,f,c
  3722   00168A                     l2293:
  3723                           
  3724                           ;dc_motor.c: 102:         if ((mR->power)>0){
  3725   00168A  C016  FFD9         	movff	stop@mR,fsr2l
  3726   00168E  C017  FFDA         	movff	stop@mR+1,fsr2h
  3727   001692  50DF               	movf	indf2,w,c
  3728   001694  B4D8               	btfsc	status,2,c
  3729   001696  EF4F  F00B         	goto	u1191
  3730   00169A  EF51  F00B         	goto	u1190
  3731   00169E                     u1191:
  3732   00169E  EF56  F00B         	goto	l2297
  3733   0016A2                     u1190:
  3734   0016A2                     
  3735                           ;dc_motor.c: 103:             mR->power--;
  3736   0016A2  C016  FFD9         	movff	stop@mR,fsr2l
  3737   0016A6  C017  FFDA         	movff	stop@mR+1,fsr2h
  3738   0016AA  06DF               	decf	indf2,f,c
  3739   0016AC                     l2297:
  3740                           
  3741                           ;dc_motor.c: 105:         setMotorPWM(mL);
  3742   0016AC  C014  F00E         	movff	stop@mL,setMotorPWM@m
  3743   0016B0  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  3744   0016B4  EC70  F008         	call	_setMotorPWM	;wreg free
  3745   0016B8                     
  3746                           ;dc_motor.c: 106:         setMotorPWM(mR);
  3747   0016B8  C016  F00E         	movff	stop@mR,setMotorPWM@m
  3748   0016BC  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  3749   0016C0  EC70  F008         	call	_setMotorPWM	;wreg free
  3750   0016C4                     
  3751                           ;dc_motor.c: 107:         _delay((unsigned long)((400)*(64000000/4000000.0)));
  3752   0016C4  0E09               	movlw	9
  3753   0016C6  6E18               	movwf	??_stop^0,c
  3754   0016C8  0E4E               	movlw	78
  3755   0016CA                     u2247:
  3756   0016CA  2EE8               	decfsz	wreg,f,c
  3757   0016CC  D7FE               	bra	u2247
  3758   0016CE  2E18               	decfsz	??_stop^0,f,c
  3759   0016D0  D7FC               	bra	u2247
  3760   0016D2  D000               	nop2	
  3761   0016D4                     l2303:
  3762                           
  3763                           ;dc_motor.c: 96:     while((mL->power)>0 && (mR->power)>0)
  3764   0016D4  C014  FFD9         	movff	stop@mL,fsr2l
  3765   0016D8  C015  FFDA         	movff	stop@mL+1,fsr2h
  3766   0016DC  50DF               	movf	indf2,w,c
  3767   0016DE  B4D8               	btfsc	status,2,c
  3768   0016E0  EF74  F00B         	goto	u1201
  3769   0016E4  EF76  F00B         	goto	u1200
  3770   0016E8                     u1201:
  3771   0016E8  EF82  F00B         	goto	l220
  3772   0016EC                     u1200:
  3773   0016EC  C016  FFD9         	movff	stop@mR,fsr2l
  3774   0016F0  C017  FFDA         	movff	stop@mR+1,fsr2h
  3775   0016F4  50DF               	movf	indf2,w,c
  3776   0016F6  A4D8               	btfss	status,2,c
  3777   0016F8  EF80  F00B         	goto	u1211
  3778   0016FC  EF82  F00B         	goto	u1210
  3779   001700                     u1211:
  3780   001700  EF34  F00B         	goto	l2289
  3781   001704                     u1210:
  3782   001704                     l220:
  3783                           
  3784                           ;dc_motor.c: 109:     LATDbits.LATD4 = 0;;
  3785   001704  987C               	bcf	124,4,c	;volatile
  3786   001706  0012               	return		;funcret
  3787   001708                     __end_of_stop:
  3788                           	callstack 0
  3789                           
  3790 ;; *************** function _fullSpeedReverse *****************
  3791 ;; Defined at:
  3792 ;;		line 163 in file "dc_motor.c"
  3793 ;; Parameters:    Size  Location     Type
  3794 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  3795 ;;		 -> motorL(9), 
  3796 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  3797 ;;		 -> motorR(9), 
  3798 ;; Auto vars:     Size  Location     Type
  3799 ;;  i               2   24[COMRAM] unsigned int 
  3800 ;; Return value:  Size  Location     Type
  3801 ;;                  1    wreg      void 
  3802 ;; Registers used:
  3803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3804 ;; Tracked objects:
  3805 ;;		On entry : 0/0
  3806 ;;		On exit  : 0/0
  3807 ;;		Unchanged: 0/0
  3808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3809 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3810 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3811 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3812 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3813 ;;Total ram usage:        7 bytes
  3814 ;; Hardware stack levels used: 1
  3815 ;; Hardware stack levels required when called: 3
  3816 ;; This function calls:
  3817 ;;		_setMotorPWM
  3818 ;; This function is called by:
  3819 ;;		_reverseHalfSquare
  3820 ;;		_Yellow_rev1_R90
  3821 ;;		_Pink_rev1_L90
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           	psect	text27
  3826   001ADE                     __ptext27:
  3827                           	callstack 0
  3828   001ADE                     _fullSpeedReverse:
  3829                           	callstack 25
  3830   001ADE                     
  3831                           ;dc_motor.c: 163: void fullSpeedReverse(struct DC_motor *mL, struct DC_motor *mR);dc_mot
      +                          or.c: 164: {;dc_motor.c: 165:  (mL->direction) = 0;
  3832   001ADE  EE20 F001          	lfsr	2,1
  3833   001AE2  5014               	movf	fullSpeedReverse@mL^0,w,c
  3834   001AE4  26D9               	addwf	fsr2l,f,c
  3835   001AE6  5015               	movf	(fullSpeedReverse@mL+1)^0,w,c
  3836   001AE8  22DA               	addwfc	fsr2h,f,c
  3837   001AEA  0E00               	movlw	0
  3838   001AEC  6EDF               	movwf	indf2,c
  3839                           
  3840                           ;dc_motor.c: 166:  (mR->direction) = 0;
  3841   001AEE  EE20 F001          	lfsr	2,1
  3842   001AF2  5016               	movf	fullSpeedReverse@mR^0,w,c
  3843   001AF4  26D9               	addwf	fsr2l,f,c
  3844   001AF6  5017               	movf	(fullSpeedReverse@mR+1)^0,w,c
  3845   001AF8  22DA               	addwfc	fsr2h,f,c
  3846   001AFA  0E00               	movlw	0
  3847   001AFC  6EDF               	movwf	indf2,c
  3848   001AFE                     
  3849                           ;dc_motor.c: 168:     for (unsigned int i = 0; i <50; i++)
  3850   001AFE  0E00               	movlw	0
  3851   001B00  6E1A               	movwf	(fullSpeedReverse@i+1)^0,c
  3852   001B02  0E00               	movlw	0
  3853   001B04  6E19               	movwf	fullSpeedReverse@i^0,c
  3854   001B06                     l2367:
  3855                           
  3856                           ;dc_motor.c: 169:     {;dc_motor.c: 170:         (mL->power)++;
  3857   001B06  C014  FFD9         	movff	fullSpeedReverse@mL,fsr2l
  3858   001B0A  C015  FFDA         	movff	fullSpeedReverse@mL+1,fsr2h
  3859   001B0E  2ADF               	incf	indf2,f,c
  3860                           
  3861                           ;dc_motor.c: 171:         (mR->power)++;
  3862   001B10  C016  FFD9         	movff	fullSpeedReverse@mR,fsr2l
  3863   001B14  C017  FFDA         	movff	fullSpeedReverse@mR+1,fsr2h
  3864   001B18  2ADF               	incf	indf2,f,c
  3865   001B1A                     
  3866                           ;dc_motor.c: 172:         setMotorPWM(mL);
  3867   001B1A  C014  F00E         	movff	fullSpeedReverse@mL,setMotorPWM@m
  3868   001B1E  C015  F00F         	movff	fullSpeedReverse@mL+1,setMotorPWM@m+1
  3869   001B22  EC70  F008         	call	_setMotorPWM	;wreg free
  3870   001B26                     
  3871                           ;dc_motor.c: 173:         setMotorPWM(mR);
  3872   001B26  C016  F00E         	movff	fullSpeedReverse@mR,setMotorPWM@m
  3873   001B2A  C017  F00F         	movff	fullSpeedReverse@mR+1,setMotorPWM@m+1
  3874   001B2E  EC70  F008         	call	_setMotorPWM	;wreg free
  3875   001B32                     
  3876                           ;dc_motor.c: 174:         _delay((unsigned long)((400)*(64000000/4000000.0)));
  3877   001B32  0E09               	movlw	9
  3878   001B34  6E18               	movwf	??_fullSpeedReverse^0,c
  3879   001B36  0E4E               	movlw	78
  3880   001B38                     u2257:
  3881   001B38  2EE8               	decfsz	wreg,f,c
  3882   001B3A  D7FE               	bra	u2257
  3883   001B3C  2E18               	decfsz	??_fullSpeedReverse^0,f,c
  3884   001B3E  D7FC               	bra	u2257
  3885   001B40  D000               	nop2	
  3886   001B42                     
  3887                           ;dc_motor.c: 175:     }
  3888   001B42  4A19               	infsnz	fullSpeedReverse@i^0,f,c
  3889   001B44  2A1A               	incf	(fullSpeedReverse@i+1)^0,f,c
  3890   001B46  501A               	movf	(fullSpeedReverse@i+1)^0,w,c
  3891   001B48  E109               	bnz	u1260
  3892   001B4A  0E32               	movlw	50
  3893   001B4C  5C19               	subwf	fullSpeedReverse@i^0,w,c
  3894   001B4E  A0D8               	btfss	status,0,c
  3895   001B50  EFAC  F00D         	goto	u1261
  3896   001B54  EFAE  F00D         	goto	u1260
  3897   001B58                     u1261:
  3898   001B58  EF83  F00D         	goto	l2367
  3899   001B5C                     u1260:
  3900   001B5C  0012               	return		;funcret
  3901   001B5E                     __end_of_fullSpeedReverse:
  3902                           	callstack 0
  3903                           
  3904 ;; *************** function _setMotorPWM *****************
  3905 ;; Defined at:
  3906 ;;		line 70 in file "dc_motor.c"
  3907 ;; Parameters:    Size  Location     Type
  3908 ;;  m               2   13[COMRAM] PTR struct DC_motor
  3909 ;;		 -> motorR(9), motorL(9), 
  3910 ;; Auto vars:     Size  Location     Type
  3911 ;;  negDuty         1   18[COMRAM] unsigned char 
  3912 ;;  posDuty         1   17[COMRAM] unsigned char 
  3913 ;; Return value:  Size  Location     Type
  3914 ;;                  1    wreg      void 
  3915 ;; Registers used:
  3916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3917 ;; Tracked objects:
  3918 ;;		On entry : 0/0
  3919 ;;		On exit  : 0/0
  3920 ;;		Unchanged: 0/0
  3921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3922 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3923 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3924 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3925 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3926 ;;Total ram usage:        6 bytes
  3927 ;; Hardware stack levels used: 1
  3928 ;; Hardware stack levels required when called: 2
  3929 ;; This function calls:
  3930 ;;		___lwdiv
  3931 ;;		___wmul
  3932 ;; This function is called by:
  3933 ;;		_stop
  3934 ;;		_turnLeft
  3935 ;;		_turnRight
  3936 ;;		_fullSpeedAhead
  3937 ;;		_fullSpeedReverse
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           	psect	text28
  3942   0010E0                     __ptext28:
  3943                           	callstack 0
  3944   0010E0                     _setMotorPWM:
  3945                           	callstack 26
  3946   0010E0                     
  3947                           ;dc_motor.c: 70: void setMotorPWM(struct DC_motor *m);dc_motor.c: 71: {;dc_motor.c: 72: 
      +                              unsigned char posDuty, negDuty;;dc_motor.c: 74:     if(m->brakemode) {
  3948   0010E0  EE20 F002          	lfsr	2,2
  3949   0010E4  500E               	movf	setMotorPWM@m^0,w,c
  3950   0010E6  26D9               	addwf	fsr2l,f,c
  3951   0010E8  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3952   0010EA  22DA               	addwfc	fsr2h,f,c
  3953   0010EC  50DF               	movf	indf2,w,c
  3954   0010EE  B4D8               	btfsc	status,2,c
  3955   0010F0  EF7C  F008         	goto	u1161
  3956   0010F4  EF7E  F008         	goto	u1160
  3957   0010F8                     u1161:
  3958   0010F8  EFB2  F008         	goto	l2277
  3959   0010FC                     u1160:
  3960   0010FC                     
  3961                           ;dc_motor.c: 75:         posDuty=(m->PWMperiod) - ((unsigned int)(m->power)*(m->PWMperio
      +                          d))/100;
  3962   0010FC  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  3963   001100  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3964   001104  50DF               	movf	indf2,w,c
  3965   001106  6E10               	movwf	??_setMotorPWM^0,c
  3966   001108  5010               	movf	??_setMotorPWM^0,w,c
  3967   00110A  6E01               	movwf	___wmul@multiplier^0,c
  3968   00110C  6A02               	clrf	(___wmul@multiplier+1)^0,c
  3969   00110E  EE20 F003          	lfsr	2,3
  3970   001112  500E               	movf	setMotorPWM@m^0,w,c
  3971   001114  26D9               	addwf	fsr2l,f,c
  3972   001116  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3973   001118  22DA               	addwfc	fsr2h,f,c
  3974   00111A  CFDE F003          	movff	postinc2,___wmul@multiplicand
  3975   00111E  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  3976   001122  EC53  F00F         	call	___wmul	;wreg free
  3977   001126  C001  F007         	movff	?___wmul,___lwdiv@dividend
  3978   00112A  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  3979   00112E  0E00               	movlw	0
  3980   001130  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  3981   001132  0E64               	movlw	100
  3982   001134  6E09               	movwf	___lwdiv@divisor^0,c
  3983   001136  EC2D  F00E         	call	___lwdiv	;wreg free
  3984   00113A  EE20 F003          	lfsr	2,3
  3985   00113E  500E               	movf	setMotorPWM@m^0,w,c
  3986   001140  26D9               	addwf	fsr2l,f,c
  3987   001142  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3988   001144  22DA               	addwfc	fsr2h,f,c
  3989   001146  50DF               	movf	indf2,w,c
  3990   001148  6E11               	movwf	(??_setMotorPWM+1)^0,c
  3991   00114A  5007               	movf	?___lwdiv^0,w,c
  3992   00114C  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  3993   00114E  6E12               	movwf	setMotorPWM@posDuty^0,c
  3994   001150                     
  3995                           ;dc_motor.c: 76:         negDuty=(m->PWMperiod);
  3996   001150  EE20 F003          	lfsr	2,3
  3997   001154  500E               	movf	setMotorPWM@m^0,w,c
  3998   001156  26D9               	addwf	fsr2l,f,c
  3999   001158  500F               	movf	(setMotorPWM@m+1)^0,w,c
  4000   00115A  22DA               	addwfc	fsr2h,f,c
  4001   00115C  50DF               	movf	indf2,w,c
  4002   00115E  6E13               	movwf	setMotorPWM@negDuty^0,c
  4003                           
  4004                           ;dc_motor.c: 77:     }
  4005   001160  EFD5  F008         	goto	l2281
  4006   001164                     l2277:
  4007                           
  4008                           ;dc_motor.c: 79:         posDuty=0;
  4009   001164  0E00               	movlw	0
  4010   001166  6E12               	movwf	setMotorPWM@posDuty^0,c
  4011   001168                     
  4012                           ;dc_motor.c: 80:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  4013   001168  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  4014   00116C  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4015   001170  50DF               	movf	indf2,w,c
  4016   001172  6E10               	movwf	??_setMotorPWM^0,c
  4017   001174  5010               	movf	??_setMotorPWM^0,w,c
  4018   001176  6E01               	movwf	___wmul@multiplier^0,c
  4019   001178  6A02               	clrf	(___wmul@multiplier+1)^0,c
  4020   00117A  EE20 F003          	lfsr	2,3
  4021   00117E  500E               	movf	setMotorPWM@m^0,w,c
  4022   001180  26D9               	addwf	fsr2l,f,c
  4023   001182  500F               	movf	(setMotorPWM@m+1)^0,w,c
  4024   001184  22DA               	addwfc	fsr2h,f,c
  4025   001186  CFDE F003          	movff	postinc2,___wmul@multiplicand
  4026   00118A  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  4027   00118E  EC53  F00F         	call	___wmul	;wreg free
  4028   001192  C001  F007         	movff	?___wmul,___lwdiv@dividend
  4029   001196  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  4030   00119A  0E00               	movlw	0
  4031   00119C  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  4032   00119E  0E64               	movlw	100
  4033   0011A0  6E09               	movwf	___lwdiv@divisor^0,c
  4034   0011A2  EC2D  F00E         	call	___lwdiv	;wreg free
  4035   0011A6  5007               	movf	?___lwdiv^0,w,c
  4036   0011A8  6E13               	movwf	setMotorPWM@negDuty^0,c
  4037   0011AA                     l2281:
  4038                           
  4039                           ;dc_motor.c: 83:     if (m->direction) {
  4040   0011AA  EE20 F001          	lfsr	2,1
  4041   0011AE  500E               	movf	setMotorPWM@m^0,w,c
  4042   0011B0  26D9               	addwf	fsr2l,f,c
  4043   0011B2  500F               	movf	(setMotorPWM@m+1)^0,w,c
  4044   0011B4  22DA               	addwfc	fsr2h,f,c
  4045   0011B6  50DF               	movf	indf2,w,c
  4046   0011B8  B4D8               	btfsc	status,2,c
  4047   0011BA  EFE1  F008         	goto	u1171
  4048   0011BE  EFE3  F008         	goto	u1170
  4049   0011C2                     u1171:
  4050   0011C2  EF05  F009         	goto	l2285
  4051   0011C6                     u1170:
  4052   0011C6                     
  4053                           ;dc_motor.c: 84:         *(m->posDutyHighByte)=posDuty;
  4054   0011C6  EE20 F005          	lfsr	2,5
  4055   0011CA  500E               	movf	setMotorPWM@m^0,w,c
  4056   0011CC  26D9               	addwf	fsr2l,f,c
  4057   0011CE  500F               	movf	(setMotorPWM@m+1)^0,w,c
  4058   0011D0  22DA               	addwfc	fsr2h,f,c
  4059   0011D2  CFDE F010          	movff	postinc2,??_setMotorPWM
  4060   0011D6  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  4061   0011DA  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  4062   0011DE  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4063   0011E2  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  4064                           
  4065                           ;dc_motor.c: 85:         *(m->negDutyHighByte)=negDuty;
  4066   0011E6  EE20 F007          	lfsr	2,7
  4067   0011EA  500E               	movf	setMotorPWM@m^0,w,c
  4068   0011EC  26D9               	addwf	fsr2l,f,c
  4069   0011EE  500F               	movf	(setMotorPWM@m+1)^0,w,c
  4070   0011F0  22DA               	addwfc	fsr2h,f,c
  4071   0011F2  CFDE F010          	movff	postinc2,??_setMotorPWM
  4072   0011F6  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  4073   0011FA  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  4074   0011FE  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4075   001202  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  4076                           
  4077                           ;dc_motor.c: 86:     } else {
  4078   001206  EF25  F009         	goto	l211
  4079   00120A                     l2285:
  4080                           
  4081                           ;dc_motor.c: 87:         *(m->posDutyHighByte)=negDuty;
  4082   00120A  EE20 F005          	lfsr	2,5
  4083   00120E  500E               	movf	setMotorPWM@m^0,w,c
  4084   001210  26D9               	addwf	fsr2l,f,c
  4085   001212  500F               	movf	(setMotorPWM@m+1)^0,w,c
  4086   001214  22DA               	addwfc	fsr2h,f,c
  4087   001216  CFDE F010          	movff	postinc2,??_setMotorPWM
  4088   00121A  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  4089   00121E  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  4090   001222  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4091   001226  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  4092                           
  4093                           ;dc_motor.c: 88:         *(m->negDutyHighByte)=posDuty;
  4094   00122A  EE20 F007          	lfsr	2,7
  4095   00122E  500E               	movf	setMotorPWM@m^0,w,c
  4096   001230  26D9               	addwf	fsr2l,f,c
  4097   001232  500F               	movf	(setMotorPWM@m+1)^0,w,c
  4098   001234  22DA               	addwfc	fsr2h,f,c
  4099   001236  CFDE F010          	movff	postinc2,??_setMotorPWM
  4100   00123A  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  4101   00123E  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  4102   001242  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4103   001246  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  4104   00124A                     l211:
  4105   00124A  0012               	return		;funcret
  4106   00124C                     __end_of_setMotorPWM:
  4107                           	callstack 0
  4108                           
  4109 ;; *************** function ___wmul *****************
  4110 ;; Defined at:
  4111 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  4112 ;; Parameters:    Size  Location     Type
  4113 ;;  multiplier      2    0[COMRAM] unsigned int 
  4114 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4115 ;; Auto vars:     Size  Location     Type
  4116 ;;  product         2    4[COMRAM] unsigned int 
  4117 ;; Return value:  Size  Location     Type
  4118 ;;                  2    0[COMRAM] unsigned int 
  4119 ;; Registers used:
  4120 ;;		wreg, status,2, status,0, prodl, prodh
  4121 ;; Tracked objects:
  4122 ;;		On entry : 0/0
  4123 ;;		On exit  : 0/0
  4124 ;;		Unchanged: 0/0
  4125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4126 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4127 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4129 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4130 ;;Total ram usage:        6 bytes
  4131 ;; Hardware stack levels used: 1
  4132 ;; Hardware stack levels required when called: 1
  4133 ;; This function calls:
  4134 ;;		Nothing
  4135 ;; This function is called by:
  4136 ;;		_setMotorPWM
  4137 ;; This function uses a non-reentrant model
  4138 ;;
  4139                           
  4140                           	psect	text29
  4141   001EA6                     __ptext29:
  4142                           	callstack 0
  4143   001EA6                     ___wmul:
  4144                           	callstack 26
  4145   001EA6  5001               	movf	___wmul@multiplier^0,w,c
  4146   001EA8  0203               	mulwf	___wmul@multiplicand^0,c
  4147   001EAA  CFF3 F005          	movff	prodl,___wmul@product
  4148   001EAE  CFF4 F006          	movff	prodh,___wmul@product+1
  4149   001EB2  5001               	movf	___wmul@multiplier^0,w,c
  4150   001EB4  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  4151   001EB6  50F3               	movf	243,w,c
  4152   001EB8  2606               	addwf	(___wmul@product+1)^0,f,c
  4153   001EBA  5002               	movf	(___wmul@multiplier+1)^0,w,c
  4154   001EBC  0203               	mulwf	___wmul@multiplicand^0,c
  4155   001EBE  50F3               	movf	243,w,c
  4156   001EC0  2606               	addwf	(___wmul@product+1)^0,f,c
  4157   001EC2  C005  F001         	movff	___wmul@product,?___wmul
  4158   001EC6  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4159   001ECA  0012               	return		;funcret
  4160   001ECC                     __end_of___wmul:
  4161                           	callstack 0
  4162                           
  4163 ;; *************** function ___lwdiv *****************
  4164 ;; Defined at:
  4165 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  4166 ;; Parameters:    Size  Location     Type
  4167 ;;  dividend        2    6[COMRAM] unsigned int 
  4168 ;;  divisor         2    8[COMRAM] unsigned int 
  4169 ;; Auto vars:     Size  Location     Type
  4170 ;;  quotient        2   10[COMRAM] unsigned int 
  4171 ;;  counter         1   12[COMRAM] unsigned char 
  4172 ;; Return value:  Size  Location     Type
  4173 ;;                  2    6[COMRAM] unsigned int 
  4174 ;; Registers used:
  4175 ;;		wreg, status,2, status,0
  4176 ;; Tracked objects:
  4177 ;;		On entry : 0/0
  4178 ;;		On exit  : 0/0
  4179 ;;		Unchanged: 0/0
  4180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4181 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4182 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4184 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4185 ;;Total ram usage:        7 bytes
  4186 ;; Hardware stack levels used: 1
  4187 ;; Hardware stack levels required when called: 1
  4188 ;; This function calls:
  4189 ;;		Nothing
  4190 ;; This function is called by:
  4191 ;;		_setMotorPWM
  4192 ;; This function uses a non-reentrant model
  4193 ;;
  4194                           
  4195                           	psect	text30
  4196   001C5A                     __ptext30:
  4197                           	callstack 0
  4198   001C5A                     ___lwdiv:
  4199                           	callstack 26
  4200   001C5A  0E00               	movlw	0
  4201   001C5C  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  4202   001C5E  0E00               	movlw	0
  4203   001C60  6E0B               	movwf	___lwdiv@quotient^0,c
  4204   001C62  5009               	movf	___lwdiv@divisor^0,w,c
  4205   001C64  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  4206   001C66  B4D8               	btfsc	status,2,c
  4207   001C68  EF38  F00E         	goto	u1131
  4208   001C6C  EF3A  F00E         	goto	u1130
  4209   001C70                     u1131:
  4210   001C70  EF62  F00E         	goto	l1120
  4211   001C74                     u1130:
  4212   001C74  0E01               	movlw	1
  4213   001C76  6E0D               	movwf	___lwdiv@counter^0,c
  4214   001C78  EF42  F00E         	goto	l2257
  4215   001C7C                     l2255:
  4216   001C7C  90D8               	bcf	status,0,c
  4217   001C7E  3609               	rlcf	___lwdiv@divisor^0,f,c
  4218   001C80  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  4219   001C82  2A0D               	incf	___lwdiv@counter^0,f,c
  4220   001C84                     l2257:
  4221   001C84  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  4222   001C86  EF47  F00E         	goto	u1141
  4223   001C8A  EF49  F00E         	goto	u1140
  4224   001C8E                     u1141:
  4225   001C8E  EF3E  F00E         	goto	l2255
  4226   001C92                     u1140:
  4227   001C92                     l2259:
  4228   001C92  90D8               	bcf	status,0,c
  4229   001C94  360B               	rlcf	___lwdiv@quotient^0,f,c
  4230   001C96  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  4231   001C98  5009               	movf	___lwdiv@divisor^0,w,c
  4232   001C9A  5C07               	subwf	___lwdiv@dividend^0,w,c
  4233   001C9C  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  4234   001C9E  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  4235   001CA0  A0D8               	btfss	status,0,c
  4236   001CA2  EF55  F00E         	goto	u1151
  4237   001CA6  EF57  F00E         	goto	u1150
  4238   001CAA                     u1151:
  4239   001CAA  EF5C  F00E         	goto	l2267
  4240   001CAE                     u1150:
  4241   001CAE  5009               	movf	___lwdiv@divisor^0,w,c
  4242   001CB0  5E07               	subwf	___lwdiv@dividend^0,f,c
  4243   001CB2  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  4244   001CB4  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  4245   001CB6  800B               	bsf	___lwdiv@quotient^0,0,c
  4246   001CB8                     l2267:
  4247   001CB8  90D8               	bcf	status,0,c
  4248   001CBA  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  4249   001CBC  3209               	rrcf	___lwdiv@divisor^0,f,c
  4250   001CBE  2E0D               	decfsz	___lwdiv@counter^0,f,c
  4251   001CC0  EF49  F00E         	goto	l2259
  4252   001CC4                     l1120:
  4253   001CC4  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  4254   001CC8  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4255   001CCC  0012               	return		;funcret
  4256   001CCE                     __end_of___lwdiv:
  4257                           	callstack 0
  4258                           
  4259 ;; *************** function _TimerReset *****************
  4260 ;; Defined at:
  4261 ;;		line 23 in file "timer.c"
  4262 ;; Parameters:    Size  Location     Type
  4263 ;;		None
  4264 ;; Auto vars:     Size  Location     Type
  4265 ;;		None
  4266 ;; Return value:  Size  Location     Type
  4267 ;;                  1    wreg      void 
  4268 ;; Registers used:
  4269 ;;		wreg, status,2
  4270 ;; Tracked objects:
  4271 ;;		On entry : 0/0
  4272 ;;		On exit  : 0/0
  4273 ;;		Unchanged: 0/0
  4274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4279 ;;Total ram usage:        0 bytes
  4280 ;; Hardware stack levels used: 1
  4281 ;; Hardware stack levels required when called: 1
  4282 ;; This function calls:
  4283 ;;		Nothing
  4284 ;; This function is called by:
  4285 ;;		_Red_R90
  4286 ;;		_Green_L90
  4287 ;;		_Blue_T180
  4288 ;;		_Yellow_rev1_R90
  4289 ;;		_Pink_rev1_L90
  4290 ;;		_Orange_R135
  4291 ;;		_LightBlue_L135
  4292 ;;		_White
  4293 ;; This function uses a non-reentrant model
  4294 ;;
  4295                           
  4296                           	psect	text31
  4297   001F9A                     __ptext31:
  4298                           	callstack 0
  4299   001F9A                     _TimerReset:
  4300                           	callstack 27
  4301   001F9A                     
  4302                           ;timer.c: 25:     TMR0L = 0;
  4303   001F9A  0E00               	movlw	0
  4304   001F9C  6ED3               	movwf	211,c	;volatile
  4305                           
  4306                           ;timer.c: 26:     TMR0H = 0;
  4307   001F9E  0E00               	movlw	0
  4308   001FA0  6ED4               	movwf	212,c	;volatile
  4309   001FA2  0012               	return		;funcret
  4310   001FA4                     __end_of_TimerReset:
  4311                           	callstack 0
  4312                           
  4313 ;; *************** function _Timer0_init *****************
  4314 ;; Defined at:
  4315 ;;		line 7 in file "timer.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;		None
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;		None
  4320 ;; Return value:  Size  Location     Type
  4321 ;;                  1    wreg      void 
  4322 ;; Registers used:
  4323 ;;		wreg, status,2
  4324 ;; Tracked objects:
  4325 ;;		On entry : 0/0
  4326 ;;		On exit  : 0/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4332 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4333 ;;Total ram usage:        0 bytes
  4334 ;; Hardware stack levels used: 1
  4335 ;; Hardware stack levels required when called: 1
  4336 ;; This function calls:
  4337 ;;		Nothing
  4338 ;; This function is called by:
  4339 ;;		_main
  4340 ;; This function uses a non-reentrant model
  4341 ;;
  4342                           
  4343                           	psect	text32
  4344   001ECC                     __ptext32:
  4345                           	callstack 0
  4346   001ECC                     _Timer0_init:
  4347                           	callstack 29
  4348   001ECC                     
  4349                           ;timer.c: 9:     T0CON1bits.T0CS=0b010;
  4350   001ECC  50D6               	movf	214,w,c	;volatile
  4351   001ECE  0B1F               	andlw	-225
  4352   001ED0  0940               	iorlw	64
  4353   001ED2  6ED6               	movwf	214,c	;volatile
  4354   001ED4                     
  4355                           ;timer.c: 10:     T0CON1bits.T0ASYNC=1;
  4356   001ED4  88D6               	bsf	214,4,c	;volatile
  4357                           
  4358                           ;timer.c: 12:     T0CON1bits.T0CKPS=0b1101;
  4359   001ED6  50D6               	movf	214,w,c	;volatile
  4360   001ED8  0BF0               	andlw	-16
  4361   001EDA  090D               	iorlw	13
  4362   001EDC  6ED6               	movwf	214,c	;volatile
  4363   001EDE                     
  4364                           ;timer.c: 13:     T0CON0bits.T016BIT=1;
  4365   001EDE  88D5               	bsf	213,4,c	;volatile
  4366   001EE0                     
  4367                           ;timer.c: 14:  PIE0bits.TMR0IE = 1;
  4368   001EE0  010E               	movlb	14	; () banked
  4369   001EE2  8B29               	bsf	41,5,b	;volatile
  4370                           
  4371                           ;timer.c: 17:     TMR0H=0;
  4372   001EE4  0E00               	movlw	0
  4373   001EE6  6ED4               	movwf	212,c	;volatile
  4374                           
  4375                           ;timer.c: 18:     TMR0L=0;
  4376   001EE8  0E00               	movlw	0
  4377   001EEA  6ED3               	movwf	211,c	;volatile
  4378   001EEC                     
  4379                           ; BSR set to: 14
  4380                           ;timer.c: 20:     T0CON0bits.T0EN=1;
  4381   001EEC  8ED5               	bsf	213,7,c	;volatile
  4382   001EEE                     
  4383                           ; BSR set to: 14
  4384   001EEE  0012               	return		;funcret
  4385   001EF0                     __end_of_Timer0_init:
  4386                           	callstack 0
  4387                           
  4388 ;; *************** function _LED_init *****************
  4389 ;; Defined at:
  4390 ;;		line 4 in file "LED.c"
  4391 ;; Parameters:    Size  Location     Type
  4392 ;;		None
  4393 ;; Auto vars:     Size  Location     Type
  4394 ;;		None
  4395 ;; Return value:  Size  Location     Type
  4396 ;;                  1    wreg      void 
  4397 ;; Registers used:
  4398 ;;		None
  4399 ;; Tracked objects:
  4400 ;;		On entry : 0/0
  4401 ;;		On exit  : 0/0
  4402 ;;		Unchanged: 0/0
  4403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4408 ;;Total ram usage:        0 bytes
  4409 ;; Hardware stack levels used: 1
  4410 ;; Hardware stack levels required when called: 1
  4411 ;; This function calls:
  4412 ;;		Nothing
  4413 ;; This function is called by:
  4414 ;;		_main
  4415 ;; This function uses a non-reentrant model
  4416 ;;
  4417                           
  4418                           	psect	text33
  4419   001F60                     __ptext33:
  4420                           	callstack 0
  4421   001F60                     _LED_init:
  4422                           	callstack 29
  4423   001F60                     
  4424                           ;LED.c: 6:     TRISDbits.TRISD4 = 0;
  4425   001F60  9884               	bcf	132,4,c	;volatile
  4426                           
  4427                           ;LED.c: 7:     TRISHbits.TRISH0 = 0;
  4428   001F62  9088               	bcf	136,0,c	;volatile
  4429                           
  4430                           ;LED.c: 8:     TRISFbits.TRISF0 = 0;
  4431   001F64  9086               	bcf	134,0,c	;volatile
  4432                           
  4433                           ;LED.c: 11:     LATDbits.LATD4 = 0;
  4434   001F66  987C               	bcf	124,4,c	;volatile
  4435                           
  4436                           ;LED.c: 12:     LATHbits.LATH0 = 0;
  4437   001F68  9080               	bcf	128,0,c	;volatile
  4438                           
  4439                           ;LED.c: 13:     LATFbits.LATF0 = 0;
  4440   001F6A  907E               	bcf	126,0,c	;volatile
  4441   001F6C  0012               	return		;funcret
  4442   001F6E                     __end_of_LED_init:
  4443                           	callstack 0
  4444                           
  4445 ;; *************** function _Interrupts_init *****************
  4446 ;; Defined at:
  4447 ;;		line 5 in file "interrupts.c"
  4448 ;; Parameters:    Size  Location     Type
  4449 ;;		None
  4450 ;; Auto vars:     Size  Location     Type
  4451 ;;		None
  4452 ;; Return value:  Size  Location     Type
  4453 ;;                  1    wreg      void 
  4454 ;; Registers used:
  4455 ;;		None
  4456 ;; Tracked objects:
  4457 ;;		On entry : 0/0
  4458 ;;		On exit  : 0/0
  4459 ;;		Unchanged: 0/0
  4460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4465 ;;Total ram usage:        0 bytes
  4466 ;; Hardware stack levels used: 1
  4467 ;; Hardware stack levels required when called: 1
  4468 ;; This function calls:
  4469 ;;		Nothing
  4470 ;; This function is called by:
  4471 ;;		_main
  4472 ;; This function uses a non-reentrant model
  4473 ;;
  4474                           
  4475                           	psect	text34
  4476   001F7A                     __ptext34:
  4477                           	callstack 0
  4478   001F7A                     _Interrupts_init:
  4479                           	callstack 29
  4480   001F7A                     
  4481                           ;interrupts.c: 8:     PIE4bits.RC4IE=1;
  4482   001F7A  010E               	movlb	14	; () banked
  4483   001F7C  872D               	bsf	45,3,b	;volatile
  4484                           
  4485                           ;interrupts.c: 10:     INTCONbits.IPEN=1;
  4486   001F7E  8AF2               	bsf	242,5,c	;volatile
  4487                           
  4488                           ;interrupts.c: 15:     INTCONbits.PEIE=1;
  4489   001F80  8CF2               	bsf	242,6,c	;volatile
  4490                           
  4491                           ;interrupts.c: 17:     INTCONbits.GIE=1;
  4492   001F82  8EF2               	bsf	242,7,c	;volatile
  4493   001F84                     
  4494                           ; BSR set to: 14
  4495   001F84  0012               	return		;funcret
  4496   001F86                     __end_of_Interrupts_init:
  4497                           	callstack 0
  4498                           
  4499 ;; *************** function _ClickLEDOn *****************
  4500 ;; Defined at:
  4501 ;;		line 93 in file "colorclick.c"
  4502 ;; Parameters:    Size  Location     Type
  4503 ;;  power           1    wreg     unsigned char 
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;  power           1    0[COMRAM] unsigned char 
  4506 ;; Return value:  Size  Location     Type
  4507 ;;                  1    wreg      void 
  4508 ;; Registers used:
  4509 ;;		wreg, status,2
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4516 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4518 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4519 ;;Total ram usage:        1 bytes
  4520 ;; Hardware stack levels used: 1
  4521 ;; Hardware stack levels required when called: 1
  4522 ;; This function calls:
  4523 ;;		Nothing
  4524 ;; This function is called by:
  4525 ;;		_main
  4526 ;; This function uses a non-reentrant model
  4527 ;;
  4528                           
  4529                           	psect	text35
  4530   001E20                     __ptext35:
  4531                           	callstack 0
  4532   001E20                     _ClickLEDOn:
  4533                           	callstack 29
  4534                           
  4535                           ; BSR set to: 14
  4536                           ;incstack = 0
  4537                           ;ClickLEDOn@power stored from wreg
  4538   001E20  6E01               	movwf	ClickLEDOn@power^0,c
  4539   001E22                     
  4540                           ;colorclick.c: 93: void ClickLEDOn(char power);colorclick.c: 94: {;colorclick.c: 95:    
      +                           if (power){
  4541   001E22  5001               	movf	ClickLEDOn@power^0,w,c
  4542   001E24  B4D8               	btfsc	status,2,c
  4543   001E26  EF17  F00F         	goto	u1371
  4544   001E2A  EF19  F00F         	goto	u1370
  4545   001E2E                     u1371:
  4546   001E2E  EF1E  F00F         	goto	l2649
  4547   001E32                     u1370:
  4548   001E32                     
  4549                           ;colorclick.c: 96:     LATGbits.LATG1=1;
  4550   001E32  827F               	bsf	127,1,c	;volatile
  4551                           
  4552                           ;colorclick.c: 97:     LATAbits.LATA4=1;
  4553   001E34  8879               	bsf	121,4,c	;volatile
  4554                           
  4555                           ;colorclick.c: 98:     LATFbits.LATF7=1;
  4556   001E36  8E7E               	bsf	126,7,c	;volatile
  4557                           
  4558                           ;colorclick.c: 99:     }
  4559   001E38  EF29  F00F         	goto	l418
  4560   001E3C                     l2649:
  4561   001E3C  5001               	movf	ClickLEDOn@power^0,w,c
  4562   001E3E  A4D8               	btfss	status,2,c
  4563   001E40  EF24  F00F         	goto	u1381
  4564   001E44  EF26  F00F         	goto	u1380
  4565   001E48                     u1381:
  4566   001E48  EF29  F00F         	goto	l418
  4567   001E4C                     u1380:
  4568   001E4C                     
  4569                           ;colorclick.c: 101:     LATGbits.LATG1=0;
  4570   001E4C  927F               	bcf	127,1,c	;volatile
  4571                           
  4572                           ;colorclick.c: 102:     LATAbits.LATA4=0;
  4573   001E4E  9879               	bcf	121,4,c	;volatile
  4574                           
  4575                           ;colorclick.c: 103:     LATFbits.LATF7=0;
  4576   001E50  9E7E               	bcf	126,7,c	;volatile
  4577   001E52                     l418:
  4578   001E52  0012               	return		;funcret
  4579   001E54                     __end_of_ClickLEDOn:
  4580                           	callstack 0
  4581                           
  4582 ;; *************** function _HighISR *****************
  4583 ;; Defined at:
  4584 ;;		line 25 in file "interrupts.c"
  4585 ;; Parameters:    Size  Location     Type
  4586 ;;		None
  4587 ;; Auto vars:     Size  Location     Type
  4588 ;;		None
  4589 ;; Return value:  Size  Location     Type
  4590 ;;                  1    wreg      void 
  4591 ;; Registers used:
  4592 ;;		wreg, status,2
  4593 ;; Tracked objects:
  4594 ;;		On entry : 0/0
  4595 ;;		On exit  : 0/0
  4596 ;;		Unchanged: 0/0
  4597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4602 ;;Total ram usage:        0 bytes
  4603 ;; Hardware stack levels used: 1
  4604 ;; This function calls:
  4605 ;;		Nothing
  4606 ;; This function is called by:
  4607 ;;		Interrupt level 2
  4608 ;; This function uses a non-reentrant model
  4609 ;;
  4610                           
  4611                           	psect	intcode
  4612   000008                     __pintcode:
  4613                           	callstack 0
  4614   000008                     _HighISR:
  4615                           	callstack 23
  4616                           
  4617                           ;incstack = 0
  4618   000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  4619   00000A                     
  4620                           ;interrupts.c: 28:     if (PIR0bits.TMR0IF) {
  4621   00000A  010E               	movlb	14	; () banked
  4622   00000C  AB33               	btfss	51,5,b	;volatile
  4623   00000E  EF0B  F000         	goto	i2u76_41
  4624   000012  EF0D  F000         	goto	i2u76_40
  4625   000016                     i2u76_41:
  4626   000016  EF12  F000         	goto	i2l626
  4627   00001A                     i2u76_40:
  4628   00001A                     
  4629                           ; BSR set to: 14
  4630                           ;interrupts.c: 29:     maxTime = 1;
  4631   00001A  0E00               	movlw	0
  4632   00001C  6E47               	movwf	(_maxTime+1)^0,c	;volatile
  4633   00001E  0E01               	movlw	1
  4634   000020  6E46               	movwf	_maxTime^0,c	;volatile
  4635   000022                     
  4636                           ; BSR set to: 14
  4637                           ;interrupts.c: 30:     PIR0bits.TMR0IF=0;
  4638   000022  9B33               	bcf	51,5,b	;volatile
  4639   000024                     i2l626:
  4640                           
  4641                           ; BSR set to: 14
  4642   000024  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  4643   000026  0011               	retfie		f
  4644   000028                     __end_of_HighISR:
  4645                           	callstack 0
  4646                           
  4647                           	psect	rparam
  4648   000000                     
  4649                           	psect	temp
  4650   00005F                     btemp:
  4651                           	callstack 0
  4652   00005F                     	ds	1
  4653   000000                     int$flags	set	btemp
  4654   000000                     wtemp8	set	btemp+1
  4655   000000                     ttemp5	set	btemp+1
  4656   000000                     ttemp6	set	btemp+4
  4657   000000                     ttemp7	set	btemp+8
  4658                           
  4659                           	psect	idloc
  4660                           
  4661                           ;Config register IDLOC0 @ 0x200000
  4662                           ;	unspecified, using default values
  4663   200000                     	org	2097152
  4664   200000  0FFF               	dw	4095
  4665                           
  4666                           ;Config register IDLOC1 @ 0x200002
  4667                           ;	unspecified, using default values
  4668   200002                     	org	2097154
  4669   200002  0FFF               	dw	4095
  4670                           
  4671                           ;Config register IDLOC2 @ 0x200004
  4672                           ;	unspecified, using default values
  4673   200004                     	org	2097156
  4674   200004  0FFF               	dw	4095
  4675                           
  4676                           ;Config register IDLOC3 @ 0x200006
  4677                           ;	unspecified, using default values
  4678   200006                     	org	2097158
  4679   200006  0FFF               	dw	4095
  4680                           
  4681                           ;Config register IDLOC4 @ 0x200008
  4682                           ;	unspecified, using default values
  4683   200008                     	org	2097160
  4684   200008  0FFF               	dw	4095
  4685                           
  4686                           ;Config register IDLOC5 @ 0x20000A
  4687                           ;	unspecified, using default values
  4688   20000A                     	org	2097162
  4689   20000A  0FFF               	dw	4095
  4690                           
  4691                           ;Config register IDLOC6 @ 0x20000C
  4692                           ;	unspecified, using default values
  4693   20000C                     	org	2097164
  4694   20000C  0FFF               	dw	4095
  4695                           
  4696                           ;Config register IDLOC7 @ 0x20000E
  4697                           ;	unspecified, using default values
  4698   20000E                     	org	2097166
  4699   20000E  0FFF               	dw	4095
  4700                           
  4701                           	psect	config
  4702                           
  4703                           ;Config register CONFIG1L @ 0x300000
  4704                           ;	External Oscillator mode Selection bits
  4705                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  4706                           ;	Power-up default value for COSC bits
  4707                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  4708   300000                     	org	3145728
  4709   300000  AA                 	db	170
  4710                           
  4711                           ;Config register CONFIG1H @ 0x300001
  4712                           ;	unspecified, using default values
  4713                           ;	Clock Out Enable bit
  4714                           ;	CLKOUTEN = 0x1, unprogrammed default
  4715                           ;	Clock Switch Enable bit
  4716                           ;	CSWEN = 0x1, unprogrammed default
  4717                           ;	Fail-Safe Clock Monitor Enable bit
  4718                           ;	FCMEN = 0x1, unprogrammed default
  4719   300001                     	org	3145729
  4720   300001  FF                 	db	255
  4721                           
  4722                           ;Config register CONFIG2L @ 0x300002
  4723                           ;	unspecified, using default values
  4724                           ;	Master Clear Enable bit
  4725                           ;	MCLRE = 0x1, unprogrammed default
  4726                           ;	Power-up Timer Enable bit
  4727                           ;	PWRTE = 0x1, unprogrammed default
  4728                           ;	Low-power BOR enable bit
  4729                           ;	LPBOREN = 0x1, unprogrammed default
  4730                           ;	Brown-out Reset Enable bits
  4731                           ;	BOREN = 0x3, unprogrammed default
  4732   300002                     	org	3145730
  4733   300002  FF                 	db	255
  4734                           
  4735                           ;Config register CONFIG2H @ 0x300003
  4736                           ;	unspecified, using default values
  4737                           ;	Brown Out Reset Voltage selection bits
  4738                           ;	BORV = 0x3, unprogrammed default
  4739                           ;	ZCD Disable bit
  4740                           ;	ZCD = 0x1, unprogrammed default
  4741                           ;	PPSLOCK bit One-Way Set Enable bit
  4742                           ;	PPS1WAY = 0x1, unprogrammed default
  4743                           ;	Stack Full/Underflow Reset Enable bit
  4744                           ;	STVREN = 0x1, unprogrammed default
  4745                           ;	Debugger Enable bit
  4746                           ;	DEBUG = 0x1, unprogrammed default
  4747                           ;	Extended Instruction Set Enable bit
  4748                           ;	XINST = 0x1, unprogrammed default
  4749   300003                     	org	3145731
  4750   300003  FF                 	db	255
  4751                           
  4752                           ;Config register CONFIG3L @ 0x300004
  4753                           ;	WDT Period Select bits
  4754                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  4755                           ;	WDT operating mode
  4756                           ;	WDTE = OFF, WDT Disabled
  4757   300004                     	org	3145732
  4758   300004  9F                 	db	159
  4759                           
  4760                           ;Config register CONFIG3H @ 0x300005
  4761                           ;	unspecified, using default values
  4762                           ;	WDT Window Select bits
  4763                           ;	WDTCWS = 0x7, unprogrammed default
  4764                           ;	WDT input clock selector
  4765                           ;	WDTCCS = 0x7, unprogrammed default
  4766   300005                     	org	3145733
  4767   300005  FF                 	db	255
  4768                           
  4769                           ;Config register CONFIG4L @ 0x300006
  4770                           ;	unspecified, using default values
  4771                           ;	Write Protection Block 0
  4772                           ;	WRT0 = 0x1, unprogrammed default
  4773                           ;	Write Protection Block 1
  4774                           ;	WRT1 = 0x1, unprogrammed default
  4775                           ;	Write Protection Block 2
  4776                           ;	WRT2 = 0x1, unprogrammed default
  4777                           ;	Write Protection Block 3
  4778                           ;	WRT3 = 0x1, unprogrammed default
  4779                           ;	Write Protection Block 3
  4780                           ;	WRT4 = 0x1, unprogrammed default
  4781                           ;	Write Protection Block 3
  4782                           ;	WRT5 = 0x1, unprogrammed default
  4783                           ;	Write Protection Block 3
  4784                           ;	WRT6 = 0x1, unprogrammed default
  4785                           ;	Write Protection Block 3
  4786                           ;	WRT7 = 0x1, unprogrammed default
  4787   300006                     	org	3145734
  4788   300006  FF                 	db	255
  4789                           
  4790                           ;Config register CONFIG4H @ 0x300007
  4791                           ;	unspecified, using default values
  4792                           ;	Configuration Register Write Protection bit
  4793                           ;	WRTC = 0x1, unprogrammed default
  4794                           ;	Boot Block Write Protection bit
  4795                           ;	WRTB = 0x1, unprogrammed default
  4796                           ;	Data EEPROM Write Protection bit
  4797                           ;	WRTD = 0x1, unprogrammed default
  4798                           ;	Scanner Enable bit
  4799                           ;	SCANE = 0x1, unprogrammed default
  4800                           ;	Low Voltage Programming Enable bit
  4801                           ;	LVP = 0x1, unprogrammed default
  4802   300007                     	org	3145735
  4803   300007  FF                 	db	255
  4804                           
  4805                           ;Config register CONFIG5L @ 0x300008
  4806                           ;	unspecified, using default values
  4807                           ;	UserNVM Program Memory Code Protection bit
  4808                           ;	CP = 0x1, unprogrammed default
  4809                           ;	DataNVM Memory Code Protection bit
  4810                           ;	CPD = 0x1, unprogrammed default
  4811   300008                     	org	3145736
  4812   300008  FF                 	db	255
  4813                           
  4814                           ;Config register CONFIG5H @ 0x300009
  4815                           ;	unspecified, using default values
  4816   300009                     	org	3145737
  4817   300009  FF                 	db	255
  4818                           
  4819                           ;Config register CONFIG6L @ 0x30000A
  4820                           ;	unspecified, using default values
  4821                           ;	Table Read Protection Block 0
  4822                           ;	EBTR0 = 0x1, unprogrammed default
  4823                           ;	Table Read Protection Block 1
  4824                           ;	EBTR1 = 0x1, unprogrammed default
  4825                           ;	Table Read Protection Block 2
  4826                           ;	EBTR2 = 0x1, unprogrammed default
  4827                           ;	Table Read Protection Block 3
  4828                           ;	EBTR3 = 0x1, unprogrammed default
  4829                           ;	Table Read Protection Block 4
  4830                           ;	EBTR4 = 0x1, unprogrammed default
  4831                           ;	Table Read Protection Block 5
  4832                           ;	EBTR5 = 0x1, unprogrammed default
  4833                           ;	Table Read Protection Block 6
  4834                           ;	EBTR6 = 0x1, unprogrammed default
  4835                           ;	Table Read Protection Block 7
  4836                           ;	EBTR7 = 0x1, unprogrammed default
  4837   30000A                     	org	3145738
  4838   30000A  FF                 	db	255
  4839                           
  4840                           ;Config register CONFIG6H @ 0x30000B
  4841                           ;	unspecified, using default values
  4842                           ;	Boot Block Table Read Protection bit
  4843                           ;	EBTRB = 0x1, unprogrammed default
  4844   30000B                     	org	3145739
  4845   30000B  FF                 	db	255
  4846                           tosu	equ	0xFFF
  4847                           tosh	equ	0xFFE
  4848                           tosl	equ	0xFFD
  4849                           stkptr	equ	0xFFC
  4850                           pclatu	equ	0xFFB
  4851                           pclath	equ	0xFFA
  4852                           pcl	equ	0xFF9
  4853                           tblptru	equ	0xFF8
  4854                           tblptrh	equ	0xFF7
  4855                           tblptrl	equ	0xFF6
  4856                           tablat	equ	0xFF5
  4857                           prodh	equ	0xFF4
  4858                           prodl	equ	0xFF3
  4859                           indf0	equ	0xFEF
  4860                           postinc0	equ	0xFEE
  4861                           postdec0	equ	0xFED
  4862                           preinc0	equ	0xFEC
  4863                           plusw0	equ	0xFEB
  4864                           fsr0h	equ	0xFEA
  4865                           fsr0l	equ	0xFE9
  4866                           wreg	equ	0xFE8
  4867                           indf1	equ	0xFE7
  4868                           postinc1	equ	0xFE6
  4869                           postdec1	equ	0xFE5
  4870                           preinc1	equ	0xFE4
  4871                           plusw1	equ	0xFE3
  4872                           fsr1h	equ	0xFE2
  4873                           fsr1l	equ	0xFE1
  4874                           bsr	equ	0xFE0
  4875                           indf2	equ	0xFDF
  4876                           postinc2	equ	0xFDE
  4877                           postdec2	equ	0xFDD
  4878                           preinc2	equ	0xFDC
  4879                           plusw2	equ	0xFDB
  4880                           fsr2h	equ	0xFDA
  4881                           fsr2l	equ	0xFD9
  4882                           status	equ	0xFD8

Data Sizes:
    Strings     75
    Constant    0
    Data        21
    BSS         124
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     67      94
    BANK0           160      0     118
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_1(CODE[16]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    S2705$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2705$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sp__Hue2Colour	PTR unsigned char  size(2) Largest target is 11
		 -> STR_10(CODE[9]), STR_9(CODE[11]), STR_8(CODE[7]), STR_7(CODE[5]), 
		 -> STR_6(CODE[7]), STR_5(CODE[10]), STR_4(CODE[6]), STR_3(CODE[4]), 
		 -> STR_2(CODE[1]), 

    White@timerMemory	PTR unsigned int  size(2) Largest target is 40
		 -> timerMemory(BANK0[40]), main@timerMemory(COMRAM[6]), 

    White@movementMemory	PTR unsigned int  size(2) Largest target is 40
		 -> movementMemory(BANK0[40]), main@movementMemory(COMRAM[6]), 

    White@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    White@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    LightBlue_L135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    LightBlue_L135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    Orange_R135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    Orange_R135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    Pink_rev1_L90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    Pink_rev1_L90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    Yellow_rev1_R90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    Yellow_rev1_R90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    Blue_T180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    Blue_T180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    Green_L90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    Green_L90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    Red_R90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    Red_R90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    reverseHalfSquare@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    reverseHalfSquare@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    rotate180left@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    rotate180left@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    Right45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    Right45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    Left45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    Left45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    fullSpeedReverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    fullSpeedReverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    fullSpeedReverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    fullSpeedReverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    fullSpeedReverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    fullSpeedReverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), motorL(COMRAM[9]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    S243DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    S243DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 


Critical Paths under _main in COMRAM

    _main->_White
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _White->_Blue_T180
    _Yellow_rev1_R90->_reverseHalfSquare
    _Red_R90->_reverseHalfSquare
    _Pink_rev1_L90->_reverseHalfSquare
    _fullSpeedAhead->_setMotorPWM
    _Orange_R135->_reverseHalfSquare
    _LightBlue_L135->_reverseHalfSquare
    _Green_L90->_reverseHalfSquare
    _Right45->_turnRight
    _turnRight->_setMotorPWM
    _Blue_T180->_rotate180left
    _rotate180left->_Left45
    _Left45->_turnLeft
    _turnLeft->_setMotorPWM
    _reverseHalfSquare->_fullSpeedReverse
    _stop->_setMotorPWM
    _fullSpeedReverse->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               117   117      0  237456
                                             55 COMRAM    12    12      0
                         _ClickLEDOn
                  _I2C_2_Master_Init
                    _Interrupts_init
                           _LED_init
                        _Timer0_init
                              _White
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _White                                               18     8     10  236875
                                             39 COMRAM    16     6     10
                          _Blue_T180
                          _Green_L90
                     _LightBlue_L135
                        _Orange_R135
                      _Pink_rev1_L90
                            _Red_R90
                         _TimerReset
                    _Yellow_rev1_R90
                     _fullSpeedAhead
                      _getTimerValue
                  _reverseHalfSquare
                      _rotate180left
                               _stop
 ---------------------------------------------------------------------------------
 (2) _getTimerValue                                        6     4      2      24
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _Yellow_rev1_R90                                      6     2      4   37631
                                             32 COMRAM     6     2      4
                             _Left45
                            _Right45
                         _TimerReset
                     _fullSpeedAhead
                   _fullSpeedReverse
                  _reverseHalfSquare
                               _stop
 ---------------------------------------------------------------------------------
 (2) _Red_R90                                              4     0      4   27636
                                             32 COMRAM     4     0      4
                             _Left45
                            _Right45
                         _TimerReset
                  _reverseHalfSquare
 ---------------------------------------------------------------------------------
 (2) _Pink_rev1_L90                                        6     2      4   37587
                                             32 COMRAM     6     2      4
                             _Left45
                            _Right45
                         _TimerReset
                     _fullSpeedAhead
                   _fullSpeedReverse
                  _reverseHalfSquare
                               _stop
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       7     3      4    2767
                                             19 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _Orange_R135                                          4     0      4   32053
                                             32 COMRAM     4     0      4
                             _Left45
                            _Right45
                         _TimerReset
                  _reverseHalfSquare
                               _stop
 ---------------------------------------------------------------------------------
 (2) _LightBlue_L135                                       4     0      4   27724
                                             32 COMRAM     4     0      4
                             _Left45
                            _Right45
                         _TimerReset
                  _reverseHalfSquare
 ---------------------------------------------------------------------------------
 (2) _Green_L90                                            4     0      4   27636
                                             32 COMRAM     4     0      4
                             _Left45
                            _Right45
                         _TimerReset
                  _reverseHalfSquare
 ---------------------------------------------------------------------------------
 (3) _Right45                                              6     2      4    9052
                                             25 COMRAM     6     2      4
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnRight                                            6     2      4    2507
                                             19 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _Blue_T180                                            4     0      4   19128
                                             35 COMRAM     4     0      4
                         _TimerReset
                  _reverseHalfSquare
                      _rotate180left
 ---------------------------------------------------------------------------------
 (2) _rotate180left                                        4     0      4   10292
                                             31 COMRAM     4     0      4
                             _Left45
 ---------------------------------------------------------------------------------
 (3) _Left45                                               6     2      4    9660
                                             25 COMRAM     6     2      4
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (4) _turnLeft                                             6     2      4    2507
                                             19 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverseHalfSquare                                    6     2      4    8400
                                             26 COMRAM     6     2      4
                   _fullSpeedReverse
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 5     1      4    4285
                                             19 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _fullSpeedReverse                                     7     3      4    2767
                                             19 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    2133
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _TimerReset                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ClickLEDOn                                           1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClickLEDOn
   _I2C_2_Master_Init
   _Interrupts_init
   _LED_init
   _Timer0_init
   _White
     _Blue_T180
       _TimerReset
       _reverseHalfSquare
         _fullSpeedReverse
           _setMotorPWM
             ___lwdiv
               ___wmul (ARG)
             ___wmul
         _stop
           _setMotorPWM
       _rotate180left
         _Left45
           _stop
           _turnLeft
             _setMotorPWM
     _Green_L90
       _Left45
       _Right45
         _stop
         _turnRight
           _setMotorPWM
       _TimerReset
       _reverseHalfSquare
     _LightBlue_L135
       _Left45
       _Right45
       _TimerReset
       _reverseHalfSquare
     _Orange_R135
       _Left45
       _Right45
       _TimerReset
       _reverseHalfSquare
       _stop
     _Pink_rev1_L90
       _Left45
       _Right45
       _TimerReset
       _fullSpeedAhead
         _setMotorPWM
       _fullSpeedReverse
       _reverseHalfSquare
       _stop
     _Red_R90
       _Left45
       _Right45
       _TimerReset
       _reverseHalfSquare
     _TimerReset
     _Yellow_rev1_R90
       _Left45
       _Right45
       _TimerReset
       _fullSpeedAhead
       _fullSpeedReverse
       _reverseHalfSquare
       _stop
     _fullSpeedAhead
     _getTimerValue
     _reverseHalfSquare
     _rotate180left
     _stop
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _initDCmotorsPWM
   _initUSART4

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      63        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      76       5       73.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     43      5E       1      100.0%
BITBIGSFRhlhlll     52      0       0      42        0.0%
BITBIGSFRhlllh      37      0       0      44        0.0%
BITBIGSFRlllhll     2A      0       0      55        0.0%
BITBIGSFRlllll      26      0       0      61        0.0%
BITBIGSFRllhh       20      0       0      47        0.0%
BITBIGSFRlllhhh     1E      0       0      49        0.0%
BITBIGSFRhhhhhl     1B      0       0      33        0.0%
BITBIGSFRhhllhh     17      0       0      38        0.0%
BITBIGSFRhhhhl      13      0       0      34        0.0%
BITBIGSFRlllhhh     11      0       0      50        0.0%
BITBIGSFRhhhlh       E      0       0      35        0.0%
BITBIGSFRhhhhhh      D      0       0      32        0.0%
BITBIGSFRllhl        C      0       0      48        0.0%
BITBIGSFRlllhll      B      0       0      59        0.0%
BITBIGSFRhlllll      8      0       0      45        0.0%
BITBIGSFRllllh       6      0       0      60        0.0%
BITBIGSFRlllhll      6      0       0      54        0.0%
BITBIGSFRlllhll      5      0       0      57        0.0%
BITBIGSFRlllhlh      5      0       0      53        0.0%
BITBIGSFRhhllhl      5      0       0      39        0.0%
BITBIGSFRlllhll      3      0       0      56        0.0%
BITBIGSFRlllhll      3      0       0      58        0.0%
BITBIGSFRlllhhl      3      0       0      52        0.0%
BITBIGSFRhllh        2      0       0      43        0.0%
BITBIGSFRhhlh        2      0       0      37        0.0%
BITBIGSFRhlhllh      1      0       0      41        0.0%
BITBIGSFRlllhhh      1      0       0      51        0.0%
BITBIGSFRhlhhh       1      0       0      40        0.0%
BITBIGSFRhhhll       1      0       0      36        0.0%
BITBIGSFRlh          1      0       0      46        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D4      62        0.0%
DATA                 0      0      D4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Mar 14 14:24:47 2023

                         l30 1E7E                           l33 1EA4                           l42 1F8E  
                         l27 1E7C                           l36 1F98                           l45 1F78  
            ??_getTimerValue 0003          ___wmul@multiplicand 0003               ?_rotate180left 0020  
          ??_Interrupts_init 0001                  Green_L90@mL 0021                  Green_L90@mR 0023  
                        l211 124A                          l220 1704                          l204 18C2  
                        l116 14FA                          l221 1706                          l301 104C  
                        l117 14FA                          l109 1496                          l231 179C  
                        l400 1F30                          l241 1B5C                          l226 1832  
                        l250 1DDE                          l244 19D6                          l236 1ADC  
                        l253 1A5C                          l247 194C                          l263 1C58  
                        l433 1F6C                          l273 1338                          l345 1F10  
                        l418 1E52                          l258 1BDA                          l283 15BA  
                        l620 1F84                          l268 1D8C                          l278 1422  
                        l480 1EEE                          l288 1660                          l483 1FA2  
                        l629 1ECA                          l397 1E1E                          l486 1F4E  
                        wreg 000FE8                         l1120 1CC4                         l1127 1CCC  
                       l2301 16C4                         l2303 16D4                         l2311 17CA  
                       l2305 16EC                         l2321 17F2                         l2313 17D6  
                       l2401 1F70                         l2251 1C62                         l2243 1EA6  
                       l2323 17FE                         l2307 179E                         l2331 1E7E  
                       l2403 1F74                         l2261 1C98                         l2253 1C74  
                       l2245 1EC2                         l2325 180A                         l2309 17BE  
                       l2501 1D48                         l2341 1740                         l2421 1AC2  
                       l2413 1A86                         l2405 1A5E                         l2333 1E8E  
                       l2263 1CAE                         l2255 1C7C                         l2271 10E0  
                       l2327 1818                         l2319 17DE                         l2503 1D70  
                       l2351 1768                         l2335 1708                         l2431 18F2  
                       l2423 1AC6                         l2415 1A9A                         l2407 1A7E  
                       l2511 1284                         l2265 1CB6                         l2257 1C84  
                       l2249 1C5A                         l2281 11AA                         l2273 10FC  
                       l2361 1AFE                         l2441 19D8                         l2329 181C  
                       l2505 1D78                         l2353 1774                         l2337 1728  
                       l2433 191E                         l2425 18C4                         l2417 1AA6  
                       l2513 129C                         l2521 12E0                         l2601 1E18  
                       l2611 1ECC                         l2451 1F9A                         l2267 1CB8  
                       l2259 1C92                         l2283 11C6                         l2275 1150  
                       l2371 1B26                         l2291 1680                         l2443 19EC  
                       l2355 1782                         l2347 1748                         l2339 1734  
                       l2435 1932                         l2427 18C6                         l2419 1AB2  
                       l2531 1372                         l2523 131C                         l2515 12B0  
                       l2507 124C                         l2603 1E1A                         l2613 1ED4  
                       l2269 1CBE                         l2285 120A                         l2277 1164  
                       l2373 1B32                         l2293 168A                         l2445 1A04  
                       l2381 1950                         l2357 1786                         l2349 175C  
                       l2437 194A                         l2429 18DA                         l2541 13F6  
                       l2533 138A                         l2517 12C4                         l2509 125C  
                       l2701 1074                         l2461 1E68                         l2453 1E54  
                       l2605 1E1C                         l2621 1834                         l2607 1F60  
                       l2615 1EDE                         l2279 1168                         l2375 1B42  
                       l2367 1B06                         l2359 1ADE                         l2295 16A2  
                       l2287 1662                         l2447 1A30                         l2391 19D4  
                       l2383 1964                         l2439 1D8E                         l2551 156A  
                       l2543 140E                         l2535 139E                         l2527 133A  
                       l2519 12C8                         l2703 1080                         l2463 1E6A  
                       l2455 1E5E                         l2631 189C                         l2623 1844  
                       l2609 1F7A                         l2617 1EE0                         l2377 1B46  
                       l2369 1B1A                         l2297 16AC                         l2289 1668  
                       l2449 1A44                         l2385 197C                         l2553 15BC  
                       l2545 1502                         l2537 13B2                         l2529 134A  
                       l2561 1F32                         l2705 10A8                         l2457 1E64  
                       l2393 1F90                         l2641 18B6                         l2633 189E  
                       l2625 186A                         l2651 1E4C                         l2619 1EEC  
                       l2299 16B8                         l2387 19A8                         l2379 194E  
                       l2491 1BDC                         l2555 15CC                         l2547 1512  
                       l2539 13BA                         l2483 1B5E                         l2563 1F38  
                       l2707 10BC                         l2459 1E66                         l2395 1F94  
                       l2643 18C0                         l2635 18A8                         l2627 186E  
                       l2571 1EF0                         l2645 1E22                         l2389 19BC  
                       l2493 1BEC                         l2557 161C                         l2549 1562  
                       l2485 1B6E                         l2565 1F46                         l2709 10D4  
                       l2661 0E8E                         l2653 0E4E                         l2397 1F86  
                       l2637 18AA                         l2629 1892                         l2581 1F0C  
                       l2573 1EF4                         l2741 1424                         l2647 1E32  
                       l2495 1C28                         l2559 1624                         l2487 1BAA  
                       l2671 0EDA                         l2663 0E92                         l2655 0E4E  
                       l2399 1F8A                         l2591 1DFE                         l2639 18B4  
                       l2583 1F0E                         l2575 1EFE                         l2751 1438  
                       l2743 1428                         l2649 1E3C                         l2497 1C30  
                       l2489 1BB2                         l2681 0F7A                         l2673 0EFE  
                       l2657 0E4E                         l2569 1F14                         l2593 1E08  
                       l2585 1DE0                         l2577 1F00                         l2761 1450  
                       l2753 143C                         l2745 142C                         l2499 1D38  
                       l2691 100E                         l2683 0F92                         l2675 0F16  
                       l2667 0E9E                         l2659 0E76                         l2595 1E12  
                       l2587 1DE4                         l2579 1F0A                         l2771 1470  
                       l2763 1454                         l2755 143C                         l2747 1430  
                       l2693 1034                         l2685 0FB8                         l2677 0F3C  
                       l2669 0EC2                         l2597 1E14                         l2589 1DEE  
                       l2781 1490                         l2773 1474                         l2765 145C  
                       l2757 1448                         l2749 1434                         l2687 0FD0  
                       l2679 0F54                         l2695 104C                         l2599 1E16  
                       l2791 14BC                         l2783 1492                         l2775 1478  
                       l2767 1464                         l2759 144C                         l2697 1050  
                       l2689 0FF6                         l2793 14CE                         l2785 14A4  
                       l2777 1480                         l2769 146C                         l2699 105C  
                       l2795 14CE                         l2787 14A4                         l2779 1488  
                       l2789 14AA                         STR_1 0E01                         STR_3 0E48  
                       STR_4 0E3D                         STR_5 0E1C                         STR_6 0E36  
                       STR_7 0E43                         STR_8 0E2F                         STR_9 0E11  
                       u1200 16EC                         u1201 16E8                         u1130 1C74  
                       u1210 1704                         u1131 1C70                         u1211 1700  
                       u1140 1C92                         u1220 1832                         u1300 1B6E  
                       u1141 1C8E                         u1221 182E                         u1301 1B6A  
                       u1150 1CAE                         u1310 1BEC                         u1230 1E8E  
                       u1151 1CAA                         u1311 1BE8                         u1231 1E8A  
                       u1160 10FC                         u1320 1D48                         u1400 0EFE  
                       u1240 1EA4                         u1161 10F8                         u1321 1D44  
                       u1401 0EFA                         u1241 1EA0                         u1170 11C6  
                       u1250 179C                         u1330 125C                         u1410 0F3C  
                       u1171 11C2                         u1251 1798                         u2107 137C  
                       u1331 1258                         u1411 0F38                         u1260 1B5C  
                       u1180 1680                         u1340 134A                         u1420 0F7A  
                       u1261 1B58                         u1181 167C                         u2117 1400  
                       u1341 1346                         u1421 0F76                         u1190 16A2  
                       u1350 1512                         u1270 1ADC                         u1430 0FB8  
                       u1191 169E                         u2207 180C                         u1351 150E  
                       u1271 1AD8                         u2127 1AB8                         u1431 0FB4  
                       u1360 15CC                         u1440 0FF6                 _BAUD4CONbits 000EE9  
                       u2217 19F6                         u2137 18E4                         u1361 15C8  
                       u1441 0FF2                         u2057 1DF4                         u1370 1E32  
                       u1450 1034                         u1371 1E2E                         u2227 1A22  
                       u2147 1910                         u1451 1030                         u2067 0E80  
                       u1380 1E4C                         u1460 10A8                         u1381 1E48  
                       u2237 1A4E                         u2157 193C                         u2077 10C6  
                       u1461 10A4                         u1390 0EC2                         u1470 14A4  
                       u2247 16CA                         u2167 1776                         u2087 128E  
                       u1391 0EBE                         u1471 14A0                         u2257 1B38  
                       u2177 196E                         u2097 1326                         u1481 14B4  
                       _T2PR 000FBC                         u2187 199A                         u1491 14C6  
                       u2197 19C6          reverseHalfSquare@mL 001B          reverseHalfSquare@mR 001D  
                       _main 1424                         fsr2h 000FDA                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 005F  
                       _stop 1662                   _ClickLEDOn 1E20                         prodh 000FF4  
                       prodl 000FF3                         start 0028      __end_of_Yellow_rev1_R90 133A  
            __end_of_HighISR 0028                 ___param_bank 000000              __end_of_Red_R90 1BDC  
            __end_of_Right45 194E             __end_of_LED_init 1F6E                        ?_main 0001  
                      STR_10 0E26               _LightBlue_L135 15BC                        ?_stop 0014  
            __end_of___lwdiv 1CCE                        i2l626 0024                        _TMR0H 000FD4  
                      _TMR0L 000FD3   __end_of_I2C_2_Master_Start 1F9A                        _White 0E4E  
 __end_of_I2C_2_Master_Write 1F7A            fullSpeedReverse@i 0019                        tablat 000FF5  
                      plusw1 000FE3                        plusw2 000FDB                        ttemp5 0060  
                      ttemp6 0063                        ttemp7 0067                        status 000FD8  
                      wtemp8 0060              __initialization 1CCE                 __end_of_main 1502  
               __end_of_stop 1708              ??_rotate180left 0024       __end_of_LightBlue_L135 1662  
                     ??_main 0038                       ??_stop 0018                __activetblptr 000001  
              ??_Orange_R135 0025                       ?_White 0028                 ?_setMotorPWM 000E  
                     _CCPR1H 000FAA                       _CCPR2H 000FA6                       _CCPR3H 000F25  
                     _CCPR4H 000F21                       _RC0PPS 000E62                       _RC4REG 000EE3  
                     _RE2PPS 000E74                       _RD5PPS 000E6F                       _RC7PPS 000E69  
                     _RE4PPS 000E76                       _RD6PPS 000E70                       i2l2021 0022  
                     i2l2017 000A                       i2l2019 001A                       _RG6PPS 000E88  
                  ??_HighISR 0001     __end_of_color_click_init 1E20                       _RX4PPS 000E15  
                     _TX4REG 000EE4                  ?_ClickLEDOn 0001                    ??_Red_R90 0025  
                     _Left45 194E                    ??_Right45 001E             _fullSpeedReverse 1ADE  
           ?_Yellow_rev1_R90 0021                ??_Timer0_init 0001                 _CCPTMRS0bits 000FAD  
                     White@i 0036                       ___wmul 1EA6                Orange_R135@mL 0021  
              Orange_R135@mR 0023                    ??___lwdiv 000B                   _TimerReset 1F9A  
                     _colorf 0060              ?_LightBlue_L135 0021                       clear_0 1D14  
                     clear_1 1D20           fullSpeedReverse@mL 0014           fullSpeedReverse@mR 0016  
                     _motorL 0051                       _motorR 0048                       isa$std 000001  
               __pdataCOMRAM 005A                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                       stop@mL 0014  
                     stop@mR 0016            ??_initDCmotorsPWM 0003             __end_of_turnLeft 1834  
        __end_of_Orange_R135 15BC                   __accesstop 0060      __end_of__initialization 1D26  
            fullSpeedAhead@i 0019            __end_of_Blue_T180 1D8E                ___rparam_used 000001  
                  ?_LED_init 0001              _Interrupts_init 1F7A               __pcstackCOMRAM 0001  
              __end_of_White 10E0                 __pidataBANK0 1F50            __end_of_Green_L90 1C5A  
        __end_of_Timer0_init 1EF0                  _ForwardFlag 005E                      ??_White 0032  
                 __pbssBANK0 0060                   ??_LED_init 0001                      ?_Left45 001A  
          _color_writetoaddr 1F12                 _T2CLKCONbits 000FBF           ?_color_writetoaddr 0003  
                    ?___wmul 0001                  ?_TimerReset 0001          ??_color_writetoaddr 0004  
      __end_of_getTimerValue 1F50                      _SP4BRGH 000EE6                      _SP4BRGL 000EE5  
                _Orange_R135 1502                      i2u76_40 001A                      i2u76_41 0016  
                    _SSP2ADD 000ED6                      _SSP2BUF 000ED5      __end_of_Interrupts_init 1F86  
     color_writetoaddr@value 0003                      _HighISR 0008    __end_of_color_writetoaddr 1F32  
                    _Red_R90 1B5E           _I2C_2_Master_Start 1F90                   _initUSART4 1EF0  
         _I2C_2_Master_Write 1F6E                      _Right45 18C4                      __Hparam 0000  
                    __Lparam 0000                  _Timer0_init 1ECC                      White@mL 0028  
                    White@mR 002A          ?_I2C_2_Master_Start 0001                      ___lwdiv 1C5A  
        ?_I2C_2_Master_Write 0001                 __psmallconst 0E00                      __pcinit 1CCE  
                    __ramtop 0E00                    ?_turnLeft 0014                      __ptext0 1424  
                    __ptext1 1EF0                      __ptext2 1834                      __ptext3 1DE0  
                    __ptext4 1F12                      __ptext5 1F6E                      __ptext6 1F86  
                    __ptext7 1F90                      __ptext8 1E7E                      __ptext9 1E54  
                    _maxTime 0046                    _T2CONbits 000FBD     __end_of_fullSpeedReverse 1B5E  
                  _T2HLTbits 000FBE         ??_I2C_2_Master_Start 0002         ??_I2C_2_Master_Write 0002  
       end_of_initialization 1D26                _Pink_rev1_L90 133A                 ??_ClickLEDOn 0001  
          ?_color_click_init 0001               __45drightdelay 005A           ??_color_click_init 0005  
           ??_LightBlue_L135 0025            _reverseHalfSquare 19D8                      postdec1 000FE5  
                    postdec2 000FDD                      postinc0 000FEE                      postinc2 000FDE  
                 main@F14657 00CC                   main@F14659 00C6           ?_reverseHalfSquare 001B  
      __end_of_rotate180left 1DE0              _initDCmotorsPWM 1834                   ??_turnLeft 0018  
           White@timerMemory 0030                    _PORTFbits 000F8E           setMotorPWM@negDuty 0013  
          __end_of_turnRight 179E          ??_reverseHalfSquare 001F           __end_of_ClickLEDOn 1E54  
                  _TRISAbits 000F81           setMotorPWM@posDuty 0012                    _TRISCbits 000F83  
                  _TRISDbits 000F84                    _TRISEbits 000F85                    _TRISFbits 000F86  
                  _TRISGbits 000F87                    _TRISHbits 000F88             fullSpeedAhead@mL 0014  
           fullSpeedAhead@mR 0016     color_writetoaddr@address 0004                    Red_R90@mL 0021  
                  Red_R90@mR 0023               _movementMemory 009E               ?_Pink_rev1_L90 0021  
           ?_Interrupts_init 0001                  _CCP1CONbits 000FAB                  _CCP2CONbits 000FA7  
                _CCP3CONbits 000F26                  ?_initUSART4 0001                  _CCP4CONbits 000F22  
  __end_of_reverseHalfSquare 1A5E                    _Blue_T180 1D38               __end_of_Left45 19D8  
             _fullSpeedAhead 1A5E               __end_of___wmul 1ECC                __pidataCOMRAM 1FA4  
                  _Green_L90 1BDC                    Right45@mL 001A                    Right45@mR 001C  
        start_initialization 1CCE                  __halfsquare 00D2                     ??_Left45 001E  
                 ?_Blue_T180 0024      __end_of_initDCmotorsPWM 18C4       __end_of_fullSpeedAhead 1ADE  
                   ??___wmul 0005                 ??_TimerReset 0001                  __pdataBANK0 00C6  
            ClickLEDOn@power 0001                   ?_Green_L90 0021                  __pbssCOMRAM 0044  
               ?_Orange_R135 0021              ??_Pink_rev1_L90 0025                     ?_HighISR 0001  
         __end_of_TimerReset 1FA4                     ?_Red_R90 0021                     ?_Right45 001A  
           ___lwdiv@dividend 0007                 ?_Timer0_init 0001              ?_fullSpeedAhead 0014  
                  __pintcode 0008                     ?___lwdiv 0007              Pink_rev1_L90@mL 0021  
            Pink_rev1_L90@mR 0023                  __smallconst 0E00            _I2C_2_Master_Idle 1E7E  
          _I2C_2_Master_Init 1E54                __45dleftdelay 005C            _I2C_2_Master_Stop 1F86  
          ?_fullSpeedReverse 0014            ??_Yellow_rev1_R90 0025           ?_I2C_2_Master_Idle 0001  
            rotate180left@mL 0020              rotate180left@mR 0022           ?_I2C_2_Master_Init 0001  
              ??_setMotorPWM 0010           ?_I2C_2_Master_Stop 0001             ___lwdiv@quotient 000B  
        White@movementMemory 002E     initDCmotorsPWM@PWMperiod 0001           ??_fullSpeedReverse 0018  
        ??_I2C_2_Master_Idle 0001          ??_I2C_2_Master_Init 0001               ___wmul@product 0005  
                   _LATAbits 000F79          ??_I2C_2_Master_Stop 0002                     _LATCbits 000F7B  
                   _LATDbits 000F7C                     _LATEbits 000F7D                     _LATFbits 000F7E  
                   _LATGbits 000F7F                     _LATHbits 000F80                     _PIE0bits 000E29  
                   _LED_init 1F60                     _PIE4bits 000E2D                  turnRight@mL 0014  
                turnRight@mR 0016                     _PIR0bits 000E33                  ??_Blue_T180 0028  
                   _PIR4bits 000E37             ?_initDCmotorsPWM 0001                     Left45@mL 001A  
                   Left45@mR 001C                     _SSP2CON2 000EDA                     _SSP2STAT 000ED8  
  __end_of_I2C_2_Master_Idle 1EA6    __end_of_I2C_2_Master_Init 1E7E            ___wmul@multiplier 0001  
  __end_of_I2C_2_Master_Stop 1F90                _movementCount 0044                  ??_Green_L90 0025  
               setMotorPWM@m 000E  I2C_2_Master_Write@data_byte 0002                    _turnRight 1708  
                   __1square 00D4                    copy_data0 1CE2                    copy_data1 1D02  
        __end_of_setMotorPWM 124C                 ??_initUSART4 0001                     __Hrparam 0000  
                   __Lrparam 0000                 __Lsmallconst 0E00                   _ANSELDbits 000EA7  
                 _ANSELFbits 000EB4                _getTimerValue 1F32                  Blue_T180@mL 0024  
                Blue_T180@mR 0026                   _T0CON0bits 000FD5                   _T0CON1bits 000FD6  
            ___lwdiv@divisor 0009           __end_of_initUSART4 1F12              ___lwdiv@counter 000D  
                 ?_turnRight 0014                     __ptext10 0E4E                     __ptext11 1F32  
                   __ptext20 1708                     __ptext12 124C                     __ptext21 1D38  
                   __ptext13 1B5E                     __ptext30 1C5A                     __ptext22 1D8E  
                   __ptext14 133A                     __ptext31 1F9A                     __ptext23 194E  
                   __ptext15 1A5E                     __ptext32 1ECC                     __ptext24 179E  
                   __ptext16 1502                     __ptext33 1F60                     __ptext25 19D8  
                   __ptext17 15BC                     __ptext34 1F7A                     __ptext26 1662  
                   __ptext18 1BDC                     __ptext35 1E20                     __ptext27 1ADE  
                   __ptext19 18C4                     __ptext28 10E0                     __ptext29 1EA6  
               _SSP2CON1bits 000ED9                 _SSP2CON2bits 000EDA           White@movementCount 002C  
                 turnLeft@mL 0014                   turnLeft@mR 0016               White@tempTimer 0034  
                 turnRight@i 0018             LightBlue_L135@mL 0021             LightBlue_L135@mR 0023  
                   isa$xinst 000000                   _RC4STAbits 000EE7                     int$flags 005F  
          Yellow_rev1_R90@mL 0021            Yellow_rev1_R90@mR 0023                     _turnLeft 179E  
             ?_getTimerValue 0001              main@timerMemory 0038                   _INTCONbits 000FF2  
                _setMotorPWM 10E0                     intlevel2 0000             ??_fullSpeedAhead 0018  
                  turnLeft@i 0018      getTimerValue@timerCount 0005              _Yellow_rev1_R90 124C  
           _color_click_init 1DE0                _rotate180left 1D8E                   _SSP2DATPPS 000E1D  
                 _SSP2CLKPPS 000E1C                  _timerMemory 0076                  ??_turnRight 0018  
         main@movementMemory 003E                   _TX4STAbits 000EE8        __end_of_Pink_rev1_L90 1424  
