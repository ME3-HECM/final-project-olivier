

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Mar 14 15:53:39 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18LF67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    54                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    55                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    56   000000                     
    57                           ; Generated 06/04/2022 GMT
    58                           ; 
    59                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution. Publication is not required when
    73                           ;        this file is used in an embedded application.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18LF67K40 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91   000000                     
    92                           	psect	idataCOMRAM
    93   001F7A                     __pidataCOMRAM:
    94                           	callstack 0
    95                           
    96                           ;initializer for __halfsquare
    97   001F7A  015E               	dw	350
    98                           
    99                           ;initializer for __1square
   100   001F7C  02BC               	dw	700
   101                           
   102                           ;initializer for __45drightdelay
   103   001F7E  00AA               	dw	170
   104                           
   105                           ;initializer for __45dleftdelay
   106   001F80  00AA               	dw	170
   107                           
   108                           ;initializer for _movementCount
   109   001F82  0003               	dw	3
   110                           
   111                           ;initializer for _ForwardFlag
   112   001F84  01                 	db	1
   113                           
   114                           ;initializer for _movementMemory
   115   001F85  0000               	dw	0
   116   001F87  0001               	dw	1
   117   001F89  0004               	dw	4
   118                           
   119                           	psect	idataBANK0
   120   001FD0                     __pidataBANK0:
   121                           	callstack 0
   122                           
   123                           ;initializer for _timerMemory
   124   001FD0  03E8               	dw	1000
   125   001FD2  03E8               	dw	1000
   126   001FD4  03E8               	dw	1000
   127   000000                     _TX4REG	set	3812
   128   000000                     _RC4STAbits	set	3815
   129   000000                     _SP4BRGH	set	3814
   130   000000                     _LATFbits	set	3966
   131   000000                     _LATDbits	set	3964
   132   000000                     _LATGbits	set	3967
   133   000000                     _TRISEbits	set	3973
   134   000000                     _TRISFbits	set	3974
   135   000000                     _CCPR2H	set	4006
   136   000000                     _CCPR1H	set	4010
   137   000000                     _SSP2CON2bits	set	3802
   138   000000                     _RX4PPS	set	3605
   139   000000                     _SSP2CLKPPS	set	3612
   140   000000                     _SSP2DATPPS	set	3613
   141   000000                     _ANSELDbits	set	3751
   142   000000                     _SSP2ADD	set	3798
   143   000000                     _SSP2CON1bits	set	3801
   144   000000                     _RC4REG	set	3811
   145   000000                     _SP4BRGL	set	3813
   146   000000                     _TX4STAbits	set	3816
   147   000000                     _BAUD4CONbits	set	3817
   148   000000                     _SSP2CON2	set	3802
   149   000000                     _TRISDbits	set	3972
   150   000000                     _CCPR4H	set	3873
   151   000000                     _CCPR3H	set	3877
   152   000000                     _SSP2STAT	set	3800
   153   000000                     _ANSELFbits	set	3764
   154   000000                     _SSP2BUF	set	3797
   155   000000                     _PIE0bits	set	3625
   156   000000                     _PIR4bits	set	3639
   157   000000                     _RC0PPS	set	3682
   158   000000                     _RC7PPS	set	3689
   159   000000                     _RD5PPS	set	3695
   160   000000                     _RE2PPS	set	3700
   161   000000                     _RD6PPS	set	3696
   162   000000                     _CCP1CONbits	set	4011
   163   000000                     _CCPTMRS0bits	set	4013
   164   000000                     _T2PR	set	4028
   165   000000                     _T2CONbits	set	4029
   166   000000                     _CCP2CONbits	set	4007
   167   000000                     _LATAbits	set	3961
   168   000000                     _CCP3CONbits	set	3878
   169   000000                     _LATCbits	set	3963
   170   000000                     _LATEbits	set	3965
   171   000000                     _TRISCbits	set	3971
   172   000000                     _CCP4CONbits	set	3874
   173   000000                     _TRISHbits	set	3976
   174   000000                     _TRISGbits	set	3975
   175   000000                     _PORTFbits	set	3982
   176   000000                     _TRISAbits	set	3969
   177   000000                     _LATHbits	set	3968
   178   000000                     _RE4PPS	set	3702
   179   000000                     _RG6PPS	set	3720
   180   000000                     _TMR0L	set	4051
   181   000000                     _TMR0H	set	4052
   182   000000                     _T0CON0bits	set	4053
   183   000000                     _T0CON1bits	set	4054
   184   000000                     _T2CLKCONbits	set	4031
   185   000000                     _T2HLTbits	set	4030
   186   000000                     _INTCONbits	set	4082
   187   000000                     _PIE4bits	set	3629
   188   000000                     _PIR0bits	set	3635
   189                           
   190                           	psect	smallconst
   191   000E00                     __psmallconst:
   192                           	callstack 0
   193   000E00  00                 	db	0
   194   000E01                     STR_1:
   195                           
   196                           ; BSR set to: 14
   197   000E01  43                 	db	67	;'C'
   198   000E02  6F                 	db	111	;'o'
   199   000E03  6C                 	db	108	;'l'
   200   000E04  6F                 	db	111	;'o'
   201   000E05  75                 	db	117	;'u'
   202   000E06  72                 	db	114	;'r'
   203   000E07  20                 	db	32
   204   000E08  69                 	db	105	;'i'
   205   000E09  73                 	db	115	;'s'
   206   000E0A  20                 	db	32
   207   000E0B  25                 	db	37
   208   000E0C  73                 	db	115	;'s'
   209   000E0D  20                 	db	32
   210   000E0E  20                 	db	32
   211   000E0F  0D                 	db	13
   212   000E10  00                 	db	0
   213   000E11                     
   214                           ; BSR set to: 14
   215   000E11  4C                 	db	76	;'L'
   216   000E12  69                 	db	105	;'i'
   217   000E13  67                 	db	103	;'g'
   218   000E14  68                 	db	104	;'h'
   219   000E15  74                 	db	116	;'t'
   220   000E16  20                 	db	32
   221   000E17  42                 	db	66	;'B'
   222   000E18  6C                 	db	108	;'l'
   223   000E19  75                 	db	117	;'u'
   224   000E1A  65                 	db	101	;'e'
   225   000E1B  00                 	db	0
   226   000E1C                     
   227                           ; BSR set to: 14
   228   000E1C  44                 	db	68	;'D'
   229   000E1D  61                 	db	97	;'a'
   230   000E1E  72                 	db	114	;'r'
   231   000E1F  6B                 	db	107	;'k'
   232   000E20  20                 	db	32
   233   000E21  42                 	db	66	;'B'
   234   000E22  6C                 	db	108	;'l'
   235   000E23  75                 	db	117	;'u'
   236   000E24  65                 	db	101	;'e'
   237   000E25  00                 	db	0
   238   000E26                     
   239                           ; BSR set to: 14
   240   000E26  45                 	db	69	;'E'
   241   000E27  67                 	db	103	;'g'
   242   000E28  67                 	db	103	;'g'
   243   000E29  73                 	db	115	;'s'
   244   000E2A  68                 	db	104	;'h'
   245   000E2B  65                 	db	101	;'e'
   246   000E2C  6C                 	db	108	;'l'
   247   000E2D  6C                 	db	108	;'l'
   248   000E2E  00                 	db	0
   249   000E2F                     
   250                           ; BSR set to: 14
   251   000E2F  4F                 	db	79	;'O'
   252   000E30  72                 	db	114	;'r'
   253   000E31  61                 	db	97	;'a'
   254   000E32  6E                 	db	110	;'n'
   255   000E33  67                 	db	103	;'g'
   256   000E34  65                 	db	101	;'e'
   257   000E35  00                 	db	0
   258   000E36                     
   259                           ; BSR set to: 14
   260   000E36  59                 	db	89	;'Y'
   261   000E37  65                 	db	101	;'e'
   262   000E38  6C                 	db	108	;'l'
   263   000E39  6C                 	db	108	;'l'
   264   000E3A  6F                 	db	111	;'o'
   265   000E3B  77                 	db	119	;'w'
   266   000E3C  00                 	db	0
   267   000E3D                     
   268                           ; BSR set to: 14
   269   000E3D  47                 	db	71	;'G'
   270   000E3E  72                 	db	114	;'r'
   271   000E3F  65                 	db	101	;'e'
   272   000E40  65                 	db	101	;'e'
   273   000E41  6E                 	db	110	;'n'
   274   000E42  00                 	db	0
   275   000E43                     
   276                           ; BSR set to: 14
   277   000E43  50                 	db	80	;'P'
   278   000E44  69                 	db	105	;'i'
   279   000E45  6E                 	db	110	;'n'
   280   000E46  6B                 	db	107	;'k'
   281   000E47  00                 	db	0
   282   000E48                     
   283                           ; BSR set to: 14
   284   000E48  52                 	db	82	;'R'
   285   000E49  65                 	db	101	;'e'
   286   000E4A  64                 	db	100	;'d'
   287   000E4B  00                 	db	0
   288   000E4C  00                 	db	0	; dummy byte at the end
   289   000000                     
   290                           ; #config settings
   291                           
   292                           	psect	cinit
   293   001CF8                     __pcinit:
   294                           	callstack 0
   295   001CF8                     start_initialization:
   296                           	callstack 0
   297   001CF8                     __initialization:
   298                           	callstack 0
   299                           
   300                           ; Initialize objects allocated to BANK0 (6 bytes)
   301                           ; load TBLPTR registers with __pidataBANK0
   302   001CF8  0ED0               	movlw	low __pidataBANK0
   303   001CFA  6EF6               	movwf	tblptrl,c
   304   001CFC  0E1F               	movlw	high __pidataBANK0
   305   001CFE  6EF7               	movwf	tblptrh,c
   306   001D00  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   307   001D02  6EF8               	movwf	tblptru,c
   308   001D04  EE00  F076         	lfsr	0,__pdataBANK0
   309   001D08  EE10 F006          	lfsr	1,6
   310   001D0C                     copy_data0:
   311   001D0C  0009               	tblrd		*+
   312   001D0E  CFF5 FFEE          	movff	tablat,postinc0
   313   001D12  50E5               	movf	postdec1,w,c
   314   001D14  50E1               	movf	fsr1l,w,c
   315   001D16  E1FA               	bnz	copy_data0
   316                           
   317                           ; Initialize objects allocated to COMRAM (17 bytes)
   318                           ; load TBLPTR registers with __pidataCOMRAM
   319   001D18  0E7A               	movlw	low __pidataCOMRAM
   320   001D1A  6EF6               	movwf	tblptrl,c
   321   001D1C  0E1F               	movlw	high __pidataCOMRAM
   322   001D1E  6EF7               	movwf	tblptrh,c
   323   001D20  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   324   001D22  6EF8               	movwf	tblptru,c
   325   001D24  EE00  F04E         	lfsr	0,__pdataCOMRAM
   326   001D28  EE10 F011          	lfsr	1,17
   327   001D2C                     copy_data1:
   328   001D2C  0009               	tblrd		*+
   329   001D2E  CFF5 FFEE          	movff	tablat,postinc0
   330   001D32  50E5               	movf	postdec1,w,c
   331   001D34  50E1               	movf	fsr1l,w,c
   332   001D36  E1FA               	bnz	copy_data1
   333                           
   334                           ; Clear objects allocated to BANK0 (22 bytes)
   335   001D38  EE00  F060         	lfsr	0,__pbssBANK0
   336   001D3C  0E16               	movlw	22
   337   001D3E                     clear_0:
   338   001D3E  6AEE               	clrf	postinc0,c
   339   001D40  06E8               	decf	wreg,f,c
   340   001D42  E1FD               	bnz	clear_0
   341                           
   342                           ; Clear objects allocated to COMRAM (20 bytes)
   343   001D44  EE00  F03A         	lfsr	0,__pbssCOMRAM
   344   001D48  0E14               	movlw	20
   345   001D4A                     clear_1:
   346   001D4A  6AEE               	clrf	postinc0,c
   347   001D4C  06E8               	decf	wreg,f,c
   348   001D4E  E1FD               	bnz	clear_1
   349   001D50                     end_of_initialization:
   350                           	callstack 0
   351   001D50                     __end_of__initialization:
   352                           	callstack 0
   353   001D50  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   354   001D52  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   355   001D54  0E00               	movlw	low (__Lsmallconst shr (0+16))
   356   001D56  6EF8               	movwf	tblptru,c
   357   001D58  0E0E               	movlw	high __Lsmallconst
   358   001D5A  6EF7               	movwf	tblptrh,c
   359   001D5C  0100               	movlb	0
   360   001D5E  EF43  F00A         	goto	_main	;jump to C main() function
   361                           
   362                           	psect	bssCOMRAM
   363   00003A                     __pbssCOMRAM:
   364                           	callstack 0
   365   00003A                     _maxTime:
   366                           	callstack 0
   367   00003A                     	ds	2
   368   00003C                     _motorR:
   369                           	callstack 0
   370   00003C                     	ds	9
   371   000045                     _motorL:
   372                           	callstack 0
   373   000045                     	ds	9
   374                           
   375                           	psect	dataCOMRAM
   376   00004E                     __pdataCOMRAM:
   377                           	callstack 0
   378   00004E                     __halfsquare:
   379                           	callstack 0
   380   00004E                     	ds	2
   381   000050                     __1square:
   382                           	callstack 0
   383   000050                     	ds	2
   384   000052                     __45drightdelay:
   385                           	callstack 0
   386   000052                     	ds	2
   387   000054                     __45dleftdelay:
   388                           	callstack 0
   389   000054                     	ds	2
   390   000056                     _movementCount:
   391                           	callstack 0
   392   000056                     	ds	2
   393   000058                     _ForwardFlag:
   394                           	callstack 0
   395   000058                     	ds	1
   396   000059                     _movementMemory:
   397                           	callstack 0
   398   000059                     	ds	6
   399                           
   400                           	psect	bssBANK0
   401   000060                     __pbssBANK0:
   402                           	callstack 0
   403   000060                     _colorf:
   404                           	callstack 0
   405   000060                     	ds	22
   406                           
   407                           	psect	dataBANK0
   408   000076                     __pdataBANK0:
   409                           	callstack 0
   410   000076                     _timerMemory:
   411                           	callstack 0
   412   000076                     	ds	6
   413                           
   414                           	psect	cstackCOMRAM
   415   000001                     __pcstackCOMRAM:
   416                           	callstack 0
   417   000001                     ??_I2C_2_Master_Idle:
   418   000001                     ?_getTimerValue:
   419                           	callstack 0
   420   000001                     ?___wmul:
   421                           	callstack 0
   422   000001                     ClickLEDOn@power:
   423                           	callstack 0
   424   000001                     initDCmotorsPWM@PWMperiod:
   425                           	callstack 0
   426   000001                     ___wmul@multiplier:
   427                           	callstack 0
   428                           
   429                           ; 2 bytes @ 0x0
   430   000001                     	ds	1
   431   000002                     I2C_2_Master_Write@data_byte:
   432                           	callstack 0
   433                           
   434                           ; 1 bytes @ 0x1
   435   000002                     	ds	1
   436   000003                     ??_getTimerValue:
   437   000003                     color_writetoaddr@value:
   438                           	callstack 0
   439   000003                     ___wmul@multiplicand:
   440                           	callstack 0
   441                           
   442                           ; 2 bytes @ 0x2
   443   000003                     	ds	1
   444   000004                     color_writetoaddr@address:
   445                           	callstack 0
   446                           
   447                           ; 1 bytes @ 0x3
   448   000004                     	ds	1
   449   000005                     ??_color_click_init:
   450   000005                     getTimerValue@timerCount:
   451                           	callstack 0
   452   000005                     ___wmul@product:
   453                           	callstack 0
   454                           
   455                           ; 2 bytes @ 0x4
   456   000005                     	ds	2
   457   000007                     ?___lwdiv:
   458                           	callstack 0
   459   000007                     ___lwdiv@dividend:
   460                           	callstack 0
   461                           
   462                           ; 2 bytes @ 0x6
   463   000007                     	ds	2
   464   000009                     ___lwdiv@divisor:
   465                           	callstack 0
   466                           
   467                           ; 2 bytes @ 0x8
   468   000009                     	ds	2
   469   00000B                     ___lwdiv@quotient:
   470                           	callstack 0
   471                           
   472                           ; 2 bytes @ 0xA
   473   00000B                     	ds	2
   474   00000D                     ___lwdiv@counter:
   475                           	callstack 0
   476                           
   477                           ; 1 bytes @ 0xC
   478   00000D                     	ds	1
   479   00000E                     setMotorPWM@m:
   480                           	callstack 0
   481                           
   482                           ; 2 bytes @ 0xD
   483   00000E                     	ds	2
   484   000010                     ??_setMotorPWM:
   485                           
   486                           ; 1 bytes @ 0xF
   487   000010                     	ds	2
   488   000012                     setMotorPWM@posDuty:
   489                           	callstack 0
   490                           
   491                           ; 1 bytes @ 0x11
   492   000012                     	ds	1
   493   000013                     setMotorPWM@negDuty:
   494                           	callstack 0
   495                           
   496                           ; 1 bytes @ 0x12
   497   000013                     	ds	1
   498   000014                     stop@mL:
   499                           	callstack 0
   500   000014                     turnLeft@mL:
   501                           	callstack 0
   502   000014                     turnRight@mL:
   503                           	callstack 0
   504   000014                     fullSpeedAhead@mL:
   505                           	callstack 0
   506   000014                     fullSpeedReverse@mL:
   507                           	callstack 0
   508                           
   509                           ; 2 bytes @ 0x13
   510   000014                     	ds	2
   511   000016                     stop@mR:
   512                           	callstack 0
   513   000016                     turnLeft@mR:
   514                           	callstack 0
   515   000016                     turnRight@mR:
   516                           	callstack 0
   517   000016                     fullSpeedAhead@mR:
   518                           	callstack 0
   519   000016                     fullSpeedReverse@mR:
   520                           	callstack 0
   521                           
   522                           ; 2 bytes @ 0x15
   523   000016                     	ds	2
   524   000018                     ??_stop:
   525   000018                     ??_fullSpeedAhead:
   526   000018                     ??_fullSpeedReverse:
   527   000018                     turnLeft@i:
   528                           	callstack 0
   529   000018                     turnRight@i:
   530                           	callstack 0
   531                           
   532                           ; 2 bytes @ 0x17
   533   000018                     	ds	1
   534   000019                     fullSpeedAhead@i:
   535                           	callstack 0
   536   000019                     fullSpeedReverse@i:
   537                           	callstack 0
   538                           
   539                           ; 2 bytes @ 0x18
   540   000019                     	ds	1
   541   00001A                     Left45@mL:
   542                           	callstack 0
   543   00001A                     Right45@mL:
   544                           	callstack 0
   545                           
   546                           ; 2 bytes @ 0x19
   547   00001A                     	ds	1
   548   00001B                     reverseHalfSquare@mL:
   549                           	callstack 0
   550                           
   551                           ; 2 bytes @ 0x1A
   552   00001B                     	ds	1
   553   00001C                     Left45@mR:
   554                           	callstack 0
   555   00001C                     Right45@mR:
   556                           	callstack 0
   557                           
   558                           ; 2 bytes @ 0x1B
   559   00001C                     	ds	1
   560   00001D                     reverseHalfSquare@mR:
   561                           	callstack 0
   562                           
   563                           ; 2 bytes @ 0x1C
   564   00001D                     	ds	1
   565   00001E                     ??_Left45:
   566   00001E                     ??_Right45:
   567                           
   568                           ; 1 bytes @ 0x1D
   569   00001E                     	ds	1
   570   00001F                     ??_reverseHalfSquare:
   571                           
   572                           ; 1 bytes @ 0x1E
   573   00001F                     	ds	1
   574   000020                     rotate180left@mL:
   575                           	callstack 0
   576                           
   577                           ; 2 bytes @ 0x1F
   578   000020                     	ds	1
   579   000021                     Red_R90@mL:
   580                           	callstack 0
   581   000021                     Green_L90@mL:
   582                           	callstack 0
   583   000021                     Yellow_rev1_R90@mL:
   584                           	callstack 0
   585   000021                     Pink_rev1_L90@mL:
   586                           	callstack 0
   587   000021                     Orange_R135@mL:
   588                           	callstack 0
   589   000021                     LightBlue_L135@mL:
   590                           	callstack 0
   591                           
   592                           ; 2 bytes @ 0x20
   593   000021                     	ds	1
   594   000022                     rotate180left@mR:
   595                           	callstack 0
   596                           
   597                           ; 2 bytes @ 0x21
   598   000022                     	ds	1
   599   000023                     Red_R90@mR:
   600                           	callstack 0
   601   000023                     Green_L90@mR:
   602                           	callstack 0
   603   000023                     Yellow_rev1_R90@mR:
   604                           	callstack 0
   605   000023                     Pink_rev1_L90@mR:
   606                           	callstack 0
   607   000023                     Orange_R135@mR:
   608                           	callstack 0
   609   000023                     LightBlue_L135@mR:
   610                           	callstack 0
   611                           
   612                           ; 2 bytes @ 0x22
   613   000023                     	ds	1
   614   000024                     Blue_T180@mL:
   615                           	callstack 0
   616                           
   617                           ; 2 bytes @ 0x23
   618   000024                     	ds	1
   619   000025                     ??_Yellow_rev1_R90:
   620   000025                     ??_Pink_rev1_L90:
   621   000025                     
   622                           ; 1 bytes @ 0x24
   623   000025                     	ds	1
   624   000026                     Blue_T180@mR:
   625                           	callstack 0
   626                           
   627                           ; 2 bytes @ 0x25
   628   000026                     	ds	2
   629   000028                     White@mL:
   630                           	callstack 0
   631                           
   632                           ; 2 bytes @ 0x27
   633   000028                     	ds	2
   634   00002A                     White@mR:
   635                           	callstack 0
   636                           
   637                           ; 2 bytes @ 0x29
   638   00002A                     	ds	2
   639   00002C                     White@movementCount:
   640                           	callstack 0
   641                           
   642                           ; 2 bytes @ 0x2B
   643   00002C                     	ds	2
   644   00002E                     White@movementMemory:
   645                           	callstack 0
   646                           
   647                           ; 2 bytes @ 0x2D
   648   00002E                     	ds	2
   649   000030                     White@timerMemory:
   650                           	callstack 0
   651                           
   652                           ; 2 bytes @ 0x2F
   653   000030                     	ds	2
   654   000032                     ??_White:
   655                           
   656                           ; 1 bytes @ 0x31
   657   000032                     	ds	2
   658   000034                     White@retracingDone:
   659                           	callstack 0
   660                           
   661                           ; 2 bytes @ 0x33
   662   000034                     	ds	2
   663   000036                     White@tempTimer:
   664                           	callstack 0
   665                           
   666                           ; 2 bytes @ 0x35
   667   000036                     	ds	2
   668   000038                     White@i:
   669                           	callstack 0
   670                           
   671                           ; 2 bytes @ 0x37
   672   000038                     	ds	2
   673   00003A                     
   674                           ; 1 bytes @ 0x39
   675 ;;
   676 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   677 ;;
   678 ;; *************** function _main *****************
   679 ;; Defined at:
   680 ;;		line 19 in file "main.c"
   681 ;; Parameters:    Size  Location     Type
   682 ;;		None
   683 ;; Auto vars:     Size  Location     Type
   684 ;;  data          100    0        unsigned char [100]
   685 ;;  PWMcycle        2    0        unsigned int 
   686 ;;  wall            1    0        unsigned char 
   687 ;; Return value:  Size  Location     Type
   688 ;;                  1    wreg      void 
   689 ;; Registers used:
   690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   691 ;; Tracked objects:
   692 ;;		On entry : 0/0
   693 ;;		On exit  : 0/0
   694 ;;		Unchanged: 0/0
   695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   700 ;;Total ram usage:        0 bytes
   701 ;; Hardware stack levels required when called: 8
   702 ;; This function calls:
   703 ;;		_ClickLEDOn
   704 ;;		_I2C_2_Master_Init
   705 ;;		_Interrupts_init
   706 ;;		_LED_init
   707 ;;		_Timer0_init
   708 ;;		_White
   709 ;;		_color_click_init
   710 ;;		_initDCmotorsPWM
   711 ;;		_initUSART4
   712 ;; This function is called by:
   713 ;;		Startup code after reset
   714 ;; This function uses a non-reentrant model
   715 ;;
   716                           
   717                           	psect	text0
   718   001486                     __ptext0:
   719                           	callstack 0
   720   001486                     _main:
   721                           	callstack 23
   722   001486                     
   723                           ;main.c: 20:     char data[100];;main.c: 22:     initUSART4();
   724   001486  EC8D  F00F         	call	_initUSART4	;wreg free
   725   00148A                     
   726                           ;main.c: 23:     color_click_init();
   727   00148A  EC05  F00F         	call	_color_click_init	;wreg free
   728   00148E                     
   729                           ;main.c: 24:     I2C_2_Master_Init();
   730   00148E  EC3F  F00F         	call	_I2C_2_Master_Init	;wreg free
   731   001492                     
   732                           ;main.c: 25:     LED_init();
   733   001492  ECC6  F00F         	call	_LED_init	;wreg free
   734   001496                     
   735                           ;main.c: 26:     Interrupts_init();
   736   001496  ECD3  F00F         	call	_Interrupts_init	;wreg free
   737   00149A                     
   738                           ;main.c: 27:     Timer0_init();
   739   00149A  EC7B  F00F         	call	_Timer0_init	;wreg free
   740   00149E                     
   741                           ;main.c: 29:     initDCmotorsPWM(PWMcycle);
   742   00149E  0E00               	movlw	0
   743   0014A0  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   744   0014A2  0E63               	movlw	99
   745   0014A4  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   746   0014A6  EC2F  F00C         	call	_initDCmotorsPWM	;wreg free
   747   0014AA                     
   748                           ;main.c: 31:     motorL.power=0;
   749   0014AA  0E00               	movlw	0
   750   0014AC  6E45               	movwf	_motorL^0,c
   751   0014AE                     
   752                           ;main.c: 32:     motorL.direction=1;
   753   0014AE  0E01               	movlw	1
   754   0014B0  6E46               	movwf	(_motorL+1)^0,c
   755   0014B2                     
   756                           ;main.c: 33:     motorL.brakemode=1;
   757   0014B2  0E01               	movlw	1
   758   0014B4  6E47               	movwf	(_motorL+2)^0,c
   759   0014B6                     
   760                           ;main.c: 34:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   761   0014B6  0EAA               	movlw	170
   762   0014B8  6E4A               	movwf	(_motorL+5)^0,c
   763   0014BA  0E0F               	movlw	15
   764   0014BC  6E4B               	movwf	(_motorL+6)^0,c
   765   0014BE                     
   766                           ;main.c: 35:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   767   0014BE  0EA6               	movlw	166
   768   0014C0  6E4C               	movwf	(_motorL+7)^0,c
   769   0014C2  0E0F               	movlw	15
   770   0014C4  6E4D               	movwf	(_motorL+8)^0,c
   771   0014C6                     
   772                           ;main.c: 36:     motorL.PWMperiod=PWMcycle;
   773   0014C6  0E00               	movlw	0
   774   0014C8  6E49               	movwf	(_motorL+4)^0,c
   775   0014CA  0E63               	movlw	99
   776   0014CC  6E48               	movwf	(_motorL+3)^0,c
   777   0014CE                     
   778                           ;main.c: 38:     motorR.power=0;
   779   0014CE  0E00               	movlw	0
   780   0014D0  6E3C               	movwf	_motorR^0,c
   781   0014D2                     
   782                           ;main.c: 39:     motorR.direction=1;
   783   0014D2  0E01               	movlw	1
   784   0014D4  6E3D               	movwf	(_motorR+1)^0,c
   785   0014D6                     
   786                           ;main.c: 40:     motorR.brakemode=1;
   787   0014D6  0E01               	movlw	1
   788   0014D8  6E3E               	movwf	(_motorR+2)^0,c
   789   0014DA                     
   790                           ;main.c: 41:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   791   0014DA  0E25               	movlw	37
   792   0014DC  6E41               	movwf	(_motorR+5)^0,c
   793   0014DE  0E0F               	movlw	15
   794   0014E0  6E42               	movwf	(_motorR+6)^0,c
   795   0014E2                     
   796                           ;main.c: 42:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   797   0014E2  0E21               	movlw	33
   798   0014E4  6E43               	movwf	(_motorR+7)^0,c
   799   0014E6  0E0F               	movlw	15
   800   0014E8  6E44               	movwf	(_motorR+8)^0,c
   801   0014EA                     
   802                           ;main.c: 43:     motorR.PWMperiod=PWMcycle;
   803   0014EA  0E00               	movlw	0
   804   0014EC  6E40               	movwf	(_motorR+4)^0,c
   805   0014EE  0E63               	movlw	99
   806   0014F0  6E3F               	movwf	(_motorR+3)^0,c
   807   0014F2                     
   808                           ;main.c: 45:     TRISFbits.TRISF2=1;
   809   0014F2  8486               	bsf	134,2,c	;volatile
   810   0014F4                     
   811                           ;main.c: 46:     ANSELFbits.ANSELF2=0;
   812   0014F4  010E               	movlb	14	; () banked
   813   0014F6  95B4               	bcf	180,2,b	;volatile
   814   0014F8                     l109:
   815                           
   816                           ;main.c: 47:     while(PORTFbits.RF2){
   817   0014F8  B48E               	btfsc	142,2,c	;volatile
   818   0014FA  EF81  F00A         	goto	u1491
   819   0014FE  EF83  F00A         	goto	u1490
   820   001502                     u1491:
   821   001502  EF7C  F00A         	goto	l109
   822   001506                     u1490:
   823   001506                     
   824                           ;main.c: 51:     ClickLEDOn(0);
   825   001506  0E00               	movlw	0
   826   001508  EC25  F00F         	call	_ClickLEDOn
   827   00150C                     
   828                           ;main.c: 56:     White(&motorL,&motorR,movementCount, movementMemory, timerMemory);
   829   00150C  0E45               	movlw	low _motorL
   830   00150E  6E28               	movwf	White@mL^0,c
   831   001510  0E00               	movlw	high _motorL
   832   001512  6E29               	movwf	(White@mL+1)^0,c
   833   001514  0E3C               	movlw	low _motorR
   834   001516  6E2A               	movwf	White@mR^0,c
   835   001518  0E00               	movlw	high _motorR
   836   00151A  6E2B               	movwf	(White@mR+1)^0,c
   837   00151C  C056  F02C         	movff	_movementCount,White@movementCount	;volatile
   838   001520  C057  F02D         	movff	_movementCount+1,White@movementCount+1	;volatile
   839   001524  0E59               	movlw	low _movementMemory
   840   001526  6E2E               	movwf	White@movementMemory^0,c
   841   001528  0E00               	movlw	high _movementMemory
   842   00152A  6E2F               	movwf	(White@movementMemory+1)^0,c
   843   00152C  0E76               	movlw	low _timerMemory
   844   00152E  6E30               	movwf	White@timerMemory^0,c
   845   001530  0E00               	movlw	high _timerMemory
   846   001532  6E31               	movwf	(White@timerMemory+1)^0,c
   847   001534  EC27  F007         	call	_White	;wreg free
   848   001538                     l112:
   849   001538  EF9C  F00A         	goto	l112
   850   00153C  EF14  F000         	goto	start
   851   001540                     __end_of_main:
   852                           	callstack 0
   853                           
   854 ;; *************** function _initUSART4 *****************
   855 ;; Defined at:
   856 ;;		line 7 in file "serial.c"
   857 ;; Parameters:    Size  Location     Type
   858 ;;		None
   859 ;; Auto vars:     Size  Location     Type
   860 ;;		None
   861 ;; Return value:  Size  Location     Type
   862 ;;                  1    wreg      void 
   863 ;; Registers used:
   864 ;;		wreg, status,2
   865 ;; Tracked objects:
   866 ;;		On entry : 0/0
   867 ;;		On exit  : 0/0
   868 ;;		Unchanged: 0/0
   869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   874 ;;Total ram usage:        0 bytes
   875 ;; Hardware stack levels used: 1
   876 ;; Hardware stack levels required when called: 1
   877 ;; This function calls:
   878 ;;		Nothing
   879 ;; This function is called by:
   880 ;;		_main
   881 ;; This function uses a non-reentrant model
   882 ;;
   883                           
   884                           	psect	text1
   885   001F1A                     __ptext1:
   886                           	callstack 0
   887   001F1A                     _initUSART4:
   888                           	callstack 29
   889   001F1A                     
   890                           ;serial.c: 8:     TRISCbits.TRISC4=1;
   891   001F1A  8883               	bsf	131,4,c	;volatile
   892                           
   893                           ;serial.c: 9:     TRISCbits.TRISC1=1;
   894   001F1C  8283               	bsf	131,1,c	;volatile
   895   001F1E                     
   896                           ;serial.c: 10:     RC0PPS = 0x12;
   897   001F1E  0E12               	movlw	18
   898   001F20  010E               	movlb	14	; () banked
   899   001F22  6F62               	movwf	98,b	;volatile
   900                           
   901                           ;serial.c: 11:     RX4PPS = 0x11;
   902   001F24  0E11               	movlw	17
   903   001F26  6F15               	movwf	21,b	;volatile
   904   001F28                     
   905                           ; BSR set to: 14
   906                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
   907   001F28  97E9               	bcf	233,3,b	;volatile
   908   001F2A                     
   909                           ; BSR set to: 14
   910                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
   911   001F2A  95E8               	bcf	232,2,b	;volatile
   912                           
   913                           ;serial.c: 15:     SP4BRGL = 51;
   914   001F2C  0E33               	movlw	51
   915   001F2E  6FE5               	movwf	229,b	;volatile
   916                           
   917                           ;serial.c: 16:     SP4BRGH = 0;
   918   001F30  0E00               	movlw	0
   919   001F32  6FE6               	movwf	230,b	;volatile
   920   001F34                     
   921                           ; BSR set to: 14
   922                           ;serial.c: 18:     RC4STAbits.CREN = 1;
   923   001F34  89E7               	bsf	231,4,b	;volatile
   924   001F36                     
   925                           ; BSR set to: 14
   926                           ;serial.c: 19:     TX4STAbits.TXEN = 1;
   927   001F36  8BE8               	bsf	232,5,b	;volatile
   928   001F38                     
   929                           ; BSR set to: 14
   930                           ;serial.c: 20:     RC4STAbits.SPEN = 1;
   931   001F38  8FE7               	bsf	231,7,b	;volatile
   932   001F3A                     
   933                           ; BSR set to: 14
   934   001F3A  0012               	return		;funcret
   935   001F3C                     __end_of_initUSART4:
   936                           	callstack 0
   937                           
   938 ;; *************** function _initDCmotorsPWM *****************
   939 ;; Defined at:
   940 ;;		line 11 in file "dc_motor.c"
   941 ;; Parameters:    Size  Location     Type
   942 ;;  PWMperiod       2    0[COMRAM] unsigned int 
   943 ;; Auto vars:     Size  Location     Type
   944 ;;		None
   945 ;; Return value:  Size  Location     Type
   946 ;;                  1    wreg      void 
   947 ;; Registers used:
   948 ;;		wreg, status,2
   949 ;; Tracked objects:
   950 ;;		On entry : 0/0
   951 ;;		On exit  : 0/0
   952 ;;		Unchanged: 0/0
   953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   954 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   957 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   958 ;;Total ram usage:        2 bytes
   959 ;; Hardware stack levels used: 1
   960 ;; Hardware stack levels required when called: 1
   961 ;; This function calls:
   962 ;;		Nothing
   963 ;; This function is called by:
   964 ;;		_main
   965 ;; This function uses a non-reentrant model
   966 ;;
   967                           
   968                           	psect	text2
   969   00185E                     __ptext2:
   970                           	callstack 0
   971   00185E                     _initDCmotorsPWM:
   972                           	callstack 29
   973   00185E                     
   974                           ;dc_motor.c: 13:     TRISEbits.TRISE2=0;
   975   00185E  9485               	bcf	133,2,c	;volatile
   976                           
   977                           ;dc_motor.c: 14:     TRISCbits.TRISC7=0;
   978   001860  9E83               	bcf	131,7,c	;volatile
   979                           
   980                           ;dc_motor.c: 15:     TRISEbits.TRISE4=0;
   981   001862  9885               	bcf	133,4,c	;volatile
   982                           
   983                           ;dc_motor.c: 16:     TRISGbits.TRISG6=0;
   984   001864  9C87               	bcf	135,6,c	;volatile
   985                           
   986                           ;dc_motor.c: 18:     LATEbits.LATE2=0;
   987   001866  947D               	bcf	125,2,c	;volatile
   988                           
   989                           ;dc_motor.c: 19:     LATCbits.LATC7=0;
   990   001868  9E7B               	bcf	123,7,c	;volatile
   991                           
   992                           ;dc_motor.c: 20:     LATEbits.LATE4=0;
   993   00186A  987D               	bcf	125,4,c	;volatile
   994                           
   995                           ;dc_motor.c: 21:     LATGbits.LATG6=0;
   996   00186C  9C7F               	bcf	127,6,c	;volatile
   997   00186E                     
   998                           ;dc_motor.c: 24:     RE2PPS=0x05;
   999   00186E  0E05               	movlw	5
  1000   001870  010E               	movlb	14	; () banked
  1001   001872  6F74               	movwf	116,b	;volatile
  1002                           
  1003                           ;dc_motor.c: 25:     RE4PPS=0x06;
  1004   001874  0E06               	movlw	6
  1005   001876  6F76               	movwf	118,b	;volatile
  1006                           
  1007                           ;dc_motor.c: 26:     RC7PPS=0x07;
  1008   001878  0E07               	movlw	7
  1009   00187A  6F69               	movwf	105,b	;volatile
  1010                           
  1011                           ;dc_motor.c: 27:     RG6PPS=0x08;
  1012   00187C  0E08               	movlw	8
  1013   00187E  6F88               	movwf	136,b	;volatile
  1014                           
  1015                           ;dc_motor.c: 30:     T2CONbits.CKPS=0b100;
  1016   001880  50BD               	movf	189,w,c	;volatile
  1017   001882  0B8F               	andlw	-113
  1018   001884  0940               	iorlw	64
  1019   001886  6EBD               	movwf	189,c	;volatile
  1020                           
  1021                           ;dc_motor.c: 31:     T2HLTbits.MODE=0b00000;
  1022   001888  0EE0               	movlw	-32
  1023   00188A  16BE               	andwf	190,f,c	;volatile
  1024                           
  1025                           ;dc_motor.c: 32:     T2CLKCONbits.CS=0b0001;
  1026   00188C  50BF               	movf	191,w,c	;volatile
  1027   00188E  0BF0               	andlw	-16
  1028   001890  0901               	iorlw	1
  1029   001892  6EBF               	movwf	191,c	;volatile
  1030   001894                     
  1031                           ; BSR set to: 14
  1032                           ;dc_motor.c: 35:     T2PR=PWMperiod;
  1033   001894  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1034   001898                     
  1035                           ; BSR set to: 14
  1036                           ;dc_motor.c: 36:     T2CONbits.ON=1;
  1037   001898  8EBD               	bsf	189,7,c	;volatile
  1038                           
  1039                           ;dc_motor.c: 40:     CCPR1H=0;
  1040   00189A  0E00               	movlw	0
  1041   00189C  6EAA               	movwf	170,c	;volatile
  1042                           
  1043                           ;dc_motor.c: 41:     CCPR2H=0;
  1044   00189E  0E00               	movlw	0
  1045   0018A0  6EA6               	movwf	166,c	;volatile
  1046                           
  1047                           ;dc_motor.c: 42:     CCPR3H=0;
  1048   0018A2  0E00               	movlw	0
  1049   0018A4  010F               	movlb	15	; () banked
  1050   0018A6  6F25               	movwf	37,b	;volatile
  1051                           
  1052                           ;dc_motor.c: 43:     CCPR4H=0;
  1053   0018A8  0E00               	movlw	0
  1054   0018AA  6F21               	movwf	33,b	;volatile
  1055                           
  1056                           ;dc_motor.c: 46:     CCPTMRS0bits.C1TSEL=0;
  1057   0018AC  0EFC               	movlw	-4
  1058   0018AE  16AD               	andwf	173,f,c	;volatile
  1059                           
  1060                           ;dc_motor.c: 47:     CCPTMRS0bits.C2TSEL=0;
  1061   0018B0  0EF3               	movlw	-13
  1062   0018B2  16AD               	andwf	173,f,c	;volatile
  1063                           
  1064                           ;dc_motor.c: 48:     CCPTMRS0bits.C3TSEL=0;
  1065   0018B4  0ECF               	movlw	-49
  1066   0018B6  16AD               	andwf	173,f,c	;volatile
  1067                           
  1068                           ;dc_motor.c: 49:     CCPTMRS0bits.C4TSEL=0;
  1069   0018B8  0E3F               	movlw	-193
  1070   0018BA  16AD               	andwf	173,f,c	;volatile
  1071   0018BC                     
  1072                           ; BSR set to: 15
  1073                           ;dc_motor.c: 52:     CCP1CONbits.FMT=1;
  1074   0018BC  88AB               	bsf	171,4,c	;volatile
  1075                           
  1076                           ;dc_motor.c: 53:     CCP1CONbits.CCP1MODE=0b1100;
  1077   0018BE  50AB               	movf	171,w,c	;volatile
  1078   0018C0  0BF0               	andlw	-16
  1079   0018C2  090C               	iorlw	12
  1080   0018C4  6EAB               	movwf	171,c	;volatile
  1081   0018C6                     
  1082                           ; BSR set to: 15
  1083                           ;dc_motor.c: 54:     CCP1CONbits.EN=1;
  1084   0018C6  8EAB               	bsf	171,7,c	;volatile
  1085   0018C8                     
  1086                           ; BSR set to: 15
  1087                           ;dc_motor.c: 56:     CCP2CONbits.FMT=1;
  1088   0018C8  88A7               	bsf	167,4,c	;volatile
  1089                           
  1090                           ;dc_motor.c: 57:     CCP2CONbits.CCP2MODE=0b1100;
  1091   0018CA  50A7               	movf	167,w,c	;volatile
  1092   0018CC  0BF0               	andlw	-16
  1093   0018CE  090C               	iorlw	12
  1094   0018D0  6EA7               	movwf	167,c	;volatile
  1095   0018D2                     
  1096                           ; BSR set to: 15
  1097                           ;dc_motor.c: 58:     CCP2CONbits.EN=1;
  1098   0018D2  8EA7               	bsf	167,7,c	;volatile
  1099   0018D4                     
  1100                           ; BSR set to: 15
  1101                           ;dc_motor.c: 60:     CCP3CONbits.FMT=1;
  1102   0018D4  8926               	bsf	38,4,b	;volatile
  1103                           
  1104                           ;dc_motor.c: 61:     CCP3CONbits.CCP3MODE=0b1100;
  1105   0018D6  5126               	movf	38,w,b	;volatile
  1106   0018D8  0BF0               	andlw	-16
  1107   0018DA  090C               	iorlw	12
  1108   0018DC  6F26               	movwf	38,b	;volatile
  1109   0018DE                     
  1110                           ; BSR set to: 15
  1111                           ;dc_motor.c: 62:     CCP3CONbits.EN=1;
  1112   0018DE  8F26               	bsf	38,7,b	;volatile
  1113   0018E0                     
  1114                           ; BSR set to: 15
  1115                           ;dc_motor.c: 64:     CCP4CONbits.FMT=1;
  1116   0018E0  8922               	bsf	34,4,b	;volatile
  1117                           
  1118                           ;dc_motor.c: 65:     CCP4CONbits.CCP4MODE=0b1100;
  1119   0018E2  5122               	movf	34,w,b	;volatile
  1120   0018E4  0BF0               	andlw	-16
  1121   0018E6  090C               	iorlw	12
  1122   0018E8  6F22               	movwf	34,b	;volatile
  1123   0018EA                     
  1124                           ; BSR set to: 15
  1125                           ;dc_motor.c: 66:     CCP4CONbits.EN=1;
  1126   0018EA  8F22               	bsf	34,7,b	;volatile
  1127   0018EC                     
  1128                           ; BSR set to: 15
  1129   0018EC  0012               	return		;funcret
  1130   0018EE                     __end_of_initDCmotorsPWM:
  1131                           	callstack 0
  1132                           
  1133 ;; *************** function _color_click_init *****************
  1134 ;; Defined at:
  1135 ;;		line 6 in file "colorclick.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;		None
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;		None
  1140 ;; Return value:  Size  Location     Type
  1141 ;;                  1    wreg      void 
  1142 ;; Registers used:
  1143 ;;		wreg, status,2, status,0, cstack
  1144 ;; Tracked objects:
  1145 ;;		On entry : 0/0
  1146 ;;		On exit  : 0/0
  1147 ;;		Unchanged: 0/0
  1148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1151 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1152 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1153 ;;Total ram usage:        1 bytes
  1154 ;; Hardware stack levels used: 1
  1155 ;; Hardware stack levels required when called: 4
  1156 ;; This function calls:
  1157 ;;		_I2C_2_Master_Init
  1158 ;;		_color_writetoaddr
  1159 ;; This function is called by:
  1160 ;;		_main
  1161 ;; This function uses a non-reentrant model
  1162 ;;
  1163                           
  1164                           	psect	text3
  1165   001E0A                     __ptext3:
  1166                           	callstack 0
  1167   001E0A                     _color_click_init:
  1168                           	callstack 26
  1169   001E0A                     
  1170                           ;colorclick.c: 9:     I2C_2_Master_Init();
  1171   001E0A  EC3F  F00F         	call	_I2C_2_Master_Init	;wreg free
  1172   001E0E                     
  1173                           ;colorclick.c: 12:   color_writetoaddr(0x00, 0x01);
  1174   001E0E  0E01               	movlw	1
  1175   001E10  6E03               	movwf	color_writetoaddr@value^0,c
  1176   001E12  0E00               	movlw	0
  1177   001E14  EC9E  F00F         	call	_color_writetoaddr
  1178   001E18                     
  1179                           ;colorclick.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1180   001E18  0E3F               	movlw	63
  1181   001E1A  6E05               	movwf	??_color_click_init^0,c
  1182   001E1C  0E55               	movlw	85
  1183   001E1E                     u2057:
  1184   001E1E  2EE8               	decfsz	wreg,f,c
  1185   001E20  D7FE               	bra	u2057
  1186   001E22  2E05               	decfsz	??_color_click_init^0,f,c
  1187   001E24  D7FC               	bra	u2057
  1188   001E26  F000               	nop	
  1189   001E28                     
  1190                           ;colorclick.c: 16:  color_writetoaddr(0x00, 0x03);
  1191   001E28  0E03               	movlw	3
  1192   001E2A  6E03               	movwf	color_writetoaddr@value^0,c
  1193   001E2C  0E00               	movlw	0
  1194   001E2E  EC9E  F00F         	call	_color_writetoaddr
  1195   001E32                     
  1196                           ;colorclick.c: 19:  color_writetoaddr(0x01, 0xD6);
  1197   001E32  0ED6               	movlw	214
  1198   001E34  6E03               	movwf	color_writetoaddr@value^0,c
  1199   001E36  0E01               	movlw	1
  1200   001E38  EC9E  F00F         	call	_color_writetoaddr
  1201   001E3C                     
  1202                           ;colorclick.c: 22:     LATGbits.LATG1=0;
  1203   001E3C  927F               	bcf	127,1,c	;volatile
  1204   001E3E                     
  1205                           ;colorclick.c: 23:     TRISGbits.TRISG1=0;
  1206   001E3E  9287               	bcf	135,1,c	;volatile
  1207   001E40                     
  1208                           ;colorclick.c: 24:     LATAbits.LATA4=0;
  1209   001E40  9879               	bcf	121,4,c	;volatile
  1210   001E42                     
  1211                           ;colorclick.c: 25:     TRISAbits.TRISA4=0;
  1212   001E42  9881               	bcf	129,4,c	;volatile
  1213   001E44                     
  1214                           ;colorclick.c: 26:     LATFbits.LATF7=0;
  1215   001E44  9E7E               	bcf	126,7,c	;volatile
  1216   001E46                     
  1217                           ;colorclick.c: 27:     TRISFbits.TRISF7=0;
  1218   001E46  9E86               	bcf	134,7,c	;volatile
  1219   001E48  0012               	return		;funcret
  1220   001E4A                     __end_of_color_click_init:
  1221                           	callstack 0
  1222                           
  1223 ;; *************** function _color_writetoaddr *****************
  1224 ;; Defined at:
  1225 ;;		line 30 in file "colorclick.c"
  1226 ;; Parameters:    Size  Location     Type
  1227 ;;  address         1    wreg     unsigned char 
  1228 ;;  value           1    2[COMRAM] unsigned char 
  1229 ;; Auto vars:     Size  Location     Type
  1230 ;;  address         1    3[COMRAM] unsigned char 
  1231 ;; Return value:  Size  Location     Type
  1232 ;;                  1    wreg      void 
  1233 ;; Registers used:
  1234 ;;		wreg, status,2, status,0, cstack
  1235 ;; Tracked objects:
  1236 ;;		On entry : 0/0
  1237 ;;		On exit  : 0/0
  1238 ;;		Unchanged: 0/0
  1239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1240 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1241 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1243 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1244 ;;Total ram usage:        2 bytes
  1245 ;; Hardware stack levels used: 1
  1246 ;; Hardware stack levels required when called: 3
  1247 ;; This function calls:
  1248 ;;		_I2C_2_Master_Start
  1249 ;;		_I2C_2_Master_Stop
  1250 ;;		_I2C_2_Master_Write
  1251 ;; This function is called by:
  1252 ;;		_color_click_init
  1253 ;; This function uses a non-reentrant model
  1254 ;;
  1255                           
  1256                           	psect	text4
  1257   001F3C                     __ptext4:
  1258                           	callstack 0
  1259   001F3C                     _color_writetoaddr:
  1260                           	callstack 26
  1261                           
  1262                           ;incstack = 0
  1263                           ;color_writetoaddr@address stored from wreg
  1264   001F3C  6E04               	movwf	color_writetoaddr@address^0,c
  1265   001F3E                     
  1266                           ;colorclick.c: 31:     I2C_2_Master_Start();
  1267   001F3E  ECDE  F00F         	call	_I2C_2_Master_Start	;wreg free
  1268                           
  1269                           ;colorclick.c: 32:     I2C_2_Master_Write(0x52 | 0x00);
  1270   001F42  0E52               	movlw	82
  1271   001F44  ECCD  F00F         	call	_I2C_2_Master_Write
  1272                           
  1273                           ;colorclick.c: 33:     I2C_2_Master_Write(0x80 | address);
  1274   001F48  5004               	movf	color_writetoaddr@address^0,w,c
  1275   001F4A  0980               	iorlw	128
  1276   001F4C  ECCD  F00F         	call	_I2C_2_Master_Write
  1277                           
  1278                           ;colorclick.c: 34:     I2C_2_Master_Write(value);
  1279   001F50  5003               	movf	color_writetoaddr@value^0,w,c
  1280   001F52  ECCD  F00F         	call	_I2C_2_Master_Write
  1281                           
  1282                           ;colorclick.c: 35:     I2C_2_Master_Stop();
  1283   001F56  ECD9  F00F         	call	_I2C_2_Master_Stop	;wreg free
  1284   001F5A  0012               	return		;funcret
  1285   001F5C                     __end_of_color_writetoaddr:
  1286                           	callstack 0
  1287                           
  1288 ;; *************** function _I2C_2_Master_Write *****************
  1289 ;; Defined at:
  1290 ;;		line 45 in file "i2c.c"
  1291 ;; Parameters:    Size  Location     Type
  1292 ;;  data_byte       1    wreg     unsigned char 
  1293 ;; Auto vars:     Size  Location     Type
  1294 ;;  data_byte       1    1[COMRAM] unsigned char 
  1295 ;; Return value:  Size  Location     Type
  1296 ;;                  1    wreg      void 
  1297 ;; Registers used:
  1298 ;;		wreg, status,2, status,0, cstack
  1299 ;; Tracked objects:
  1300 ;;		On entry : 0/0
  1301 ;;		On exit  : 0/0
  1302 ;;		Unchanged: 0/0
  1303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1305 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1307 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1308 ;;Total ram usage:        1 bytes
  1309 ;; Hardware stack levels used: 1
  1310 ;; Hardware stack levels required when called: 2
  1311 ;; This function calls:
  1312 ;;		_I2C_2_Master_Idle
  1313 ;; This function is called by:
  1314 ;;		_color_writetoaddr
  1315 ;;		_color_read_Red
  1316 ;;		_color_read_Green
  1317 ;;		_color_read_Blue
  1318 ;;		_color_read_Clear
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322                           	psect	text5
  1323   001F9A                     __ptext5:
  1324                           	callstack 0
  1325   001F9A                     _I2C_2_Master_Write:
  1326                           	callstack 26
  1327                           
  1328                           ;incstack = 0
  1329                           ;I2C_2_Master_Write@data_byte stored from wreg
  1330   001F9A  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  1331   001F9C                     
  1332                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  1333   001F9C  EC54  F00F         	call	_I2C_2_Master_Idle	;wreg free
  1334   001FA0                     
  1335                           ;i2c.c: 48:   SSP2BUF = data_byte;
  1336   001FA0  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  1337   001FA4  0012               	return		;funcret
  1338   001FA6                     __end_of_I2C_2_Master_Write:
  1339                           	callstack 0
  1340                           
  1341 ;; *************** function _I2C_2_Master_Stop *****************
  1342 ;; Defined at:
  1343 ;;		line 39 in file "i2c.c"
  1344 ;; Parameters:    Size  Location     Type
  1345 ;;		None
  1346 ;; Auto vars:     Size  Location     Type
  1347 ;;		None
  1348 ;; Return value:  Size  Location     Type
  1349 ;;                  1    wreg      void 
  1350 ;; Registers used:
  1351 ;;		wreg, status,2, status,0, cstack
  1352 ;; Tracked objects:
  1353 ;;		On entry : 0/0
  1354 ;;		On exit  : 0/0
  1355 ;;		Unchanged: 0/0
  1356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1361 ;;Total ram usage:        0 bytes
  1362 ;; Hardware stack levels used: 1
  1363 ;; Hardware stack levels required when called: 2
  1364 ;; This function calls:
  1365 ;;		_I2C_2_Master_Idle
  1366 ;; This function is called by:
  1367 ;;		_color_writetoaddr
  1368 ;;		_color_read_Red
  1369 ;;		_color_read_Green
  1370 ;;		_color_read_Blue
  1371 ;;		_color_read_Clear
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           	psect	text6
  1376   001FB2                     __ptext6:
  1377                           	callstack 0
  1378   001FB2                     _I2C_2_Master_Stop:
  1379                           	callstack 26
  1380   001FB2                     
  1381                           ;i2c.c: 41:   I2C_2_Master_Idle();
  1382   001FB2  EC54  F00F         	call	_I2C_2_Master_Idle	;wreg free
  1383   001FB6                     
  1384                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  1385   001FB6  010E               	movlb	14	; () banked
  1386   001FB8  85DA               	bsf	218,2,b	;volatile
  1387   001FBA                     
  1388                           ; BSR set to: 14
  1389   001FBA  0012               	return		;funcret
  1390   001FBC                     __end_of_I2C_2_Master_Stop:
  1391                           	callstack 0
  1392                           
  1393 ;; *************** function _I2C_2_Master_Start *****************
  1394 ;; Defined at:
  1395 ;;		line 27 in file "i2c.c"
  1396 ;; Parameters:    Size  Location     Type
  1397 ;;		None
  1398 ;; Auto vars:     Size  Location     Type
  1399 ;;		None
  1400 ;; Return value:  Size  Location     Type
  1401 ;;                  1    wreg      void 
  1402 ;; Registers used:
  1403 ;;		wreg, status,2, status,0, cstack
  1404 ;; Tracked objects:
  1405 ;;		On entry : 0/0
  1406 ;;		On exit  : 0/0
  1407 ;;		Unchanged: 0/0
  1408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1413 ;;Total ram usage:        0 bytes
  1414 ;; Hardware stack levels used: 1
  1415 ;; Hardware stack levels required when called: 2
  1416 ;; This function calls:
  1417 ;;		_I2C_2_Master_Idle
  1418 ;; This function is called by:
  1419 ;;		_color_writetoaddr
  1420 ;;		_color_read_Red
  1421 ;;		_color_read_Green
  1422 ;;		_color_read_Blue
  1423 ;;		_color_read_Clear
  1424 ;; This function uses a non-reentrant model
  1425 ;;
  1426                           
  1427                           	psect	text7
  1428   001FBC                     __ptext7:
  1429                           	callstack 0
  1430   001FBC                     _I2C_2_Master_Start:
  1431                           	callstack 26
  1432   001FBC                     
  1433                           ;i2c.c: 29:   I2C_2_Master_Idle();
  1434   001FBC  EC54  F00F         	call	_I2C_2_Master_Idle	;wreg free
  1435   001FC0                     
  1436                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  1437   001FC0  010E               	movlb	14	; () banked
  1438   001FC2  81DA               	bsf	218,0,b	;volatile
  1439   001FC4                     
  1440                           ; BSR set to: 14
  1441   001FC4  0012               	return		;funcret
  1442   001FC6                     __end_of_I2C_2_Master_Start:
  1443                           	callstack 0
  1444                           
  1445 ;; *************** function _I2C_2_Master_Idle *****************
  1446 ;; Defined at:
  1447 ;;		line 22 in file "i2c.c"
  1448 ;; Parameters:    Size  Location     Type
  1449 ;;		None
  1450 ;; Auto vars:     Size  Location     Type
  1451 ;;		None
  1452 ;; Return value:  Size  Location     Type
  1453 ;;                  1    wreg      void 
  1454 ;; Registers used:
  1455 ;;		wreg, status,2, status,0
  1456 ;; Tracked objects:
  1457 ;;		On entry : 0/0
  1458 ;;		On exit  : 0/0
  1459 ;;		Unchanged: 0/0
  1460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1463 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1464 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1465 ;;Total ram usage:        1 bytes
  1466 ;; Hardware stack levels used: 1
  1467 ;; Hardware stack levels required when called: 1
  1468 ;; This function calls:
  1469 ;;		Nothing
  1470 ;; This function is called by:
  1471 ;;		_I2C_2_Master_Start
  1472 ;;		_I2C_2_Master_Stop
  1473 ;;		_I2C_2_Master_Write
  1474 ;;		_I2C_2_Master_RepStart
  1475 ;;		_I2C_2_Master_Read
  1476 ;; This function uses a non-reentrant model
  1477 ;;
  1478                           
  1479                           	psect	text8
  1480   001EA8                     __ptext8:
  1481                           	callstack 0
  1482   001EA8                     _I2C_2_Master_Idle:
  1483                           	callstack 26
  1484   001EA8                     l30:
  1485   001EA8  010E               	movlb	14	; () banked
  1486   001EAA  B5D8               	btfsc	216,2,b	;volatile
  1487   001EAC  EF5A  F00F         	goto	u1231
  1488   001EB0  EF5C  F00F         	goto	u1230
  1489   001EB4                     u1231:
  1490   001EB4  EF54  F00F         	goto	l30
  1491   001EB8                     u1230:
  1492   001EB8                     
  1493                           ; BSR set to: 14
  1494   001EB8  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  1495   001EBC  0E1F               	movlw	31
  1496   001EBE  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  1497   001EC0  A4D8               	btfss	status,2,c
  1498   001EC2  EF65  F00F         	goto	u1241
  1499   001EC6  EF67  F00F         	goto	u1240
  1500   001ECA                     u1241:
  1501   001ECA  EF54  F00F         	goto	l30
  1502   001ECE                     u1240:
  1503   001ECE                     
  1504                           ; BSR set to: 14
  1505   001ECE  0012               	return		;funcret
  1506   001ED0                     __end_of_I2C_2_Master_Idle:
  1507                           	callstack 0
  1508                           
  1509 ;; *************** function _I2C_2_Master_Init *****************
  1510 ;; Defined at:
  1511 ;;		line 4 in file "i2c.c"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;		None
  1514 ;; Auto vars:     Size  Location     Type
  1515 ;;		None
  1516 ;; Return value:  Size  Location     Type
  1517 ;;                  1    wreg      void 
  1518 ;; Registers used:
  1519 ;;		wreg, status,2
  1520 ;; Tracked objects:
  1521 ;;		On entry : 0/0
  1522 ;;		On exit  : 0/0
  1523 ;;		Unchanged: 0/0
  1524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1529 ;;Total ram usage:        0 bytes
  1530 ;; Hardware stack levels used: 1
  1531 ;; Hardware stack levels required when called: 1
  1532 ;; This function calls:
  1533 ;;		Nothing
  1534 ;; This function is called by:
  1535 ;;		_main
  1536 ;;		_color_click_init
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540                           	psect	text9
  1541   001E7E                     __ptext9:
  1542                           	callstack 0
  1543   001E7E                     _I2C_2_Master_Init:
  1544                           	callstack 28
  1545   001E7E                     
  1546                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1547   001E7E  010E               	movlb	14	; () banked
  1548   001E80  51D9               	movf	217,w,b	;volatile
  1549   001E82  0BF0               	andlw	-16
  1550   001E84  0908               	iorlw	8
  1551   001E86  6FD9               	movwf	217,b	;volatile
  1552   001E88                     
  1553                           ; BSR set to: 14
  1554                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1555   001E88  8BD9               	bsf	217,5,b	;volatile
  1556                           
  1557                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1558   001E8A  0E9F               	movlw	159
  1559   001E8C  6FD6               	movwf	214,b	;volatile
  1560   001E8E                     
  1561                           ; BSR set to: 14
  1562                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1563   001E8E  8A84               	bsf	132,5,c	;volatile
  1564   001E90                     
  1565                           ; BSR set to: 14
  1566                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1567   001E90  8C84               	bsf	132,6,c	;volatile
  1568   001E92                     
  1569                           ; BSR set to: 14
  1570                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1571   001E92  9BA7               	bcf	167,5,b	;volatile
  1572   001E94                     
  1573                           ; BSR set to: 14
  1574                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1575   001E94  9DA7               	bcf	167,6,b	;volatile
  1576                           
  1577                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1578   001E96  0E1D               	movlw	29
  1579   001E98  6F1D               	movwf	29,b	;volatile
  1580                           
  1581                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1582   001E9A  0E1E               	movlw	30
  1583   001E9C  6F1C               	movwf	28,b	;volatile
  1584                           
  1585                           ;i2c.c: 18:   RD5PPS=0x1C;
  1586   001E9E  0E1C               	movlw	28
  1587   001EA0  6F6F               	movwf	111,b	;volatile
  1588                           
  1589                           ;i2c.c: 19:   RD6PPS=0x1B;
  1590   001EA2  0E1B               	movlw	27
  1591   001EA4  6F70               	movwf	112,b	;volatile
  1592   001EA6                     
  1593                           ; BSR set to: 14
  1594   001EA6  0012               	return		;funcret
  1595   001EA8                     __end_of_I2C_2_Master_Init:
  1596                           	callstack 0
  1597                           
  1598 ;; *************** function _White *****************
  1599 ;; Defined at:
  1600 ;;		line 347 in file "dc_motor.c"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  1603 ;;		 -> motorL(9), 
  1604 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  1605 ;;		 -> motorR(9), 
  1606 ;;  movementCoun    2   43[COMRAM] unsigned int 
  1607 ;;  movementMemo    2   45[COMRAM] PTR unsigned int 
  1608 ;;		 -> movementMemory(6), 
  1609 ;;  timerMemory     2   47[COMRAM] PTR unsigned int 
  1610 ;;		 -> timerMemory(6), 
  1611 ;; Auto vars:     Size  Location     Type
  1612 ;;  tempTimer       2   53[COMRAM] unsigned int 
  1613 ;;  i               2   55[COMRAM] int 
  1614 ;;  retracingDon    2   51[COMRAM] unsigned int 
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  1    wreg      void 
  1617 ;; Registers used:
  1618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1624 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1625 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1626 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1627 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1628 ;;Total ram usage:       18 bytes
  1629 ;; Hardware stack levels used: 1
  1630 ;; Hardware stack levels required when called: 7
  1631 ;; This function calls:
  1632 ;;		_Blue_T180
  1633 ;;		_Green_L90
  1634 ;;		_LightBlue_L135
  1635 ;;		_Orange_R135
  1636 ;;		_Pink_rev1_L90
  1637 ;;		_Red_R90
  1638 ;;		_TimerReset
  1639 ;;		_Yellow_rev1_R90
  1640 ;;		_fullSpeedAhead
  1641 ;;		_getTimerValue
  1642 ;;		_reverseHalfSquare
  1643 ;;		_rotate180left
  1644 ;;		_stop
  1645 ;; This function is called by:
  1646 ;;		_main
  1647 ;;		_Colour2Action
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651                           	psect	text10
  1652   000E4E                     __ptext10:
  1653                           	callstack 0
  1654   000E4E                     _White:
  1655                           	callstack 23
  1656   000E4E                     
  1657                           ;dc_motor.c: 347: void White(struct DC_motor *mL, struct DC_motor *mR,unsigned int movem
      +                          entCount, unsigned int *movementMemory, unsigned int *timerMemory);dc_motor.c: 348: {;dc
      +                          _motor.c: 349:     unsigned int retracingDone = 0;
  1658   000E4E  0E00               	movlw	0
  1659   000E50  6E35               	movwf	(White@retracingDone+1)^0,c
  1660   000E52  0E00               	movlw	0
  1661   000E54  6E34               	movwf	White@retracingDone^0,c
  1662                           
  1663                           ;dc_motor.c: 350:     while (!retracingDone){
  1664   000E56  EF81  F008         	goto	l2715
  1665   000E5A                     l2653:
  1666                           
  1667                           ;dc_motor.c: 351:         reverseHalfSquare(mL,mR);
  1668   000E5A  C028  F01B         	movff	White@mL,reverseHalfSquare@mL
  1669   000E5E  C029  F01C         	movff	White@mL+1,reverseHalfSquare@mL+1
  1670   000E62  C02A  F01D         	movff	White@mR,reverseHalfSquare@mR
  1671   000E66  C02B  F01E         	movff	White@mR+1,reverseHalfSquare@mR+1
  1672   000E6A  EC01  F00D         	call	_reverseHalfSquare	;wreg free
  1673                           
  1674                           ;dc_motor.c: 352:         rotate180left(mL,mR);
  1675   000E6E  C028  F020         	movff	White@mL,rotate180left@mL
  1676   000E72  C029  F021         	movff	White@mL+1,rotate180left@mL+1
  1677   000E76  C02A  F022         	movff	White@mR,rotate180left@mR
  1678   000E7A  C02B  F023         	movff	White@mR+1,rotate180left@mR+1
  1679   000E7E  ECDC  F00E         	call	_rotate180left	;wreg free
  1680   000E82                     
  1681                           ;dc_motor.c: 353:         _delay((unsigned long)((500)*(64000000/4000.0)));
  1682   000E82  0E29               	movlw	41
  1683   000E84  6E33               	movwf	(??_White+1)^0,c
  1684   000E86  0E96               	movlw	150
  1685   000E88  6E32               	movwf	??_White^0,c
  1686   000E8A  0E7F               	movlw	127
  1687   000E8C                     u2067:
  1688   000E8C  2EE8               	decfsz	wreg,f,c
  1689   000E8E  D7FE               	bra	u2067
  1690   000E90  2E32               	decfsz	??_White^0,f,c
  1691   000E92  D7FC               	bra	u2067
  1692   000E94  2E33               	decfsz	(??_White+1)^0,f,c
  1693   000E96  D7FA               	bra	u2067
  1694   000E98  F000               	nop	
  1695   000E9A                     
  1696                           ;dc_motor.c: 354:         ForwardFlag = 0;
  1697   000E9A  0E00               	movlw	0
  1698   000E9C  6E58               	movwf	_ForwardFlag^0,c	;volatile
  1699   000E9E                     
  1700                           ;dc_motor.c: 355:         retracingDone = 1;
  1701   000E9E  0E00               	movlw	0
  1702   000EA0  6E35               	movwf	(White@retracingDone+1)^0,c
  1703   000EA2  0E01               	movlw	1
  1704   000EA4  6E34               	movwf	White@retracingDone^0,c
  1705   000EA6                     
  1706                           ;dc_motor.c: 357:         for (int i=movementCount-1; i>=0;i--){
  1707   000EA6  0EFF               	movlw	255
  1708   000EA8  242C               	addwf	White@movementCount^0,w,c
  1709   000EAA  6E38               	movwf	White@i^0,c
  1710   000EAC  0EFF               	movlw	255
  1711   000EAE  202D               	addwfc	(White@movementCount+1)^0,w,c
  1712   000EB0  6E39               	movwf	(White@i+1)^0,c
  1713   000EB2                     l2663:
  1714   000EB2  BE39               	btfsc	(White@i+1)^0,7,c
  1715   000EB4  EF60  F007         	goto	u1390
  1716   000EB8  EF5E  F007         	goto	u1391
  1717   000EBC                     u1391:
  1718   000EBC  EF62  F007         	goto	l2667
  1719   000EC0                     u1390:
  1720   000EC0  EF81  F008         	goto	l2715
  1721   000EC4                     l2667:
  1722                           
  1723                           ;dc_motor.c: 358:             if (movementMemory[i]==0){
  1724   000EC4  90D8               	bcf	status,0,c
  1725   000EC6  3438               	rlcf	White@i^0,w,c
  1726   000EC8  6ED9               	movwf	fsr2l,c
  1727   000ECA  3439               	rlcf	(White@i+1)^0,w,c
  1728   000ECC  6EDA               	movwf	fsr2h,c
  1729   000ECE  502E               	movf	White@movementMemory^0,w,c
  1730   000ED0  26D9               	addwf	fsr2l,f,c
  1731   000ED2  502F               	movf	(White@movementMemory+1)^0,w,c
  1732   000ED4  22DA               	addwfc	fsr2h,f,c
  1733   000ED6  50DE               	movf	postinc2,w,c
  1734   000ED8  10DE               	iorwf	postinc2,w,c
  1735   000EDA  A4D8               	btfss	status,2,c
  1736   000EDC  EF72  F007         	goto	u1401
  1737   000EE0  EF74  F007         	goto	u1400
  1738   000EE4                     u1401:
  1739   000EE4  EF80  F007         	goto	l2671
  1740   000EE8                     u1400:
  1741   000EE8                     
  1742                           ;dc_motor.c: 359:                 Red_R90(mL,mR);}
  1743   000EE8  C028  F021         	movff	White@mL,Red_R90@mL
  1744   000EEC  C029  F022         	movff	White@mL+1,Red_R90@mL+1
  1745   000EF0  C02A  F023         	movff	White@mR,Red_R90@mR
  1746   000EF4  C02B  F024         	movff	White@mR+1,Red_R90@mR+1
  1747   000EF8  ECC4  F00D         	call	_Red_R90	;wreg free
  1748   000EFC  EF39  F008         	goto	l2695
  1749   000F00                     l2671:
  1750   000F00  90D8               	bcf	status,0,c
  1751   000F02  3438               	rlcf	White@i^0,w,c
  1752   000F04  6ED9               	movwf	fsr2l,c
  1753   000F06  3439               	rlcf	(White@i+1)^0,w,c
  1754   000F08  6EDA               	movwf	fsr2h,c
  1755   000F0A  502E               	movf	White@movementMemory^0,w,c
  1756   000F0C  26D9               	addwf	fsr2l,f,c
  1757   000F0E  502F               	movf	(White@movementMemory+1)^0,w,c
  1758   000F10  22DA               	addwfc	fsr2h,f,c
  1759   000F12  04DE               	decf	postinc2,w,c
  1760   000F14  10DE               	iorwf	postinc2,w,c
  1761   000F16  A4D8               	btfss	status,2,c
  1762   000F18  EF90  F007         	goto	u1411
  1763   000F1C  EF92  F007         	goto	u1410
  1764   000F20                     u1411:
  1765   000F20  EF9E  F007         	goto	l2675
  1766   000F24                     u1410:
  1767   000F24                     
  1768                           ;dc_motor.c: 361:                 Green_L90(mL,mR);}
  1769   000F24  C028  F021         	movff	White@mL,Green_L90@mL
  1770   000F28  C029  F022         	movff	White@mL+1,Green_L90@mL+1
  1771   000F2C  C02A  F023         	movff	White@mR,Green_L90@mR
  1772   000F30  C02B  F024         	movff	White@mR+1,Green_L90@mR+1
  1773   000F34  EC03  F00E         	call	_Green_L90	;wreg free
  1774   000F38  EF39  F008         	goto	l2695
  1775   000F3C                     l2675:
  1776   000F3C  90D8               	bcf	status,0,c
  1777   000F3E  3438               	rlcf	White@i^0,w,c
  1778   000F40  6ED9               	movwf	fsr2l,c
  1779   000F42  3439               	rlcf	(White@i+1)^0,w,c
  1780   000F44  6EDA               	movwf	fsr2h,c
  1781   000F46  502E               	movf	White@movementMemory^0,w,c
  1782   000F48  26D9               	addwf	fsr2l,f,c
  1783   000F4A  502F               	movf	(White@movementMemory+1)^0,w,c
  1784   000F4C  22DA               	addwfc	fsr2h,f,c
  1785   000F4E  0E02               	movlw	2
  1786   000F50  18DE               	xorwf	postinc2,w,c
  1787   000F52  10DE               	iorwf	postinc2,w,c
  1788   000F54  A4D8               	btfss	status,2,c
  1789   000F56  EFAF  F007         	goto	u1421
  1790   000F5A  EFB1  F007         	goto	u1420
  1791   000F5E                     u1421:
  1792   000F5E  EFBD  F007         	goto	l2679
  1793   000F62                     u1420:
  1794   000F62                     
  1795                           ;dc_motor.c: 363:                 Blue_T180(mL,mR);}
  1796   000F62  C028  F024         	movff	White@mL,Blue_T180@mL
  1797   000F66  C029  F025         	movff	White@mL+1,Blue_T180@mL+1
  1798   000F6A  C02A  F026         	movff	White@mR,Blue_T180@mR
  1799   000F6E  C02B  F027         	movff	White@mR+1,Blue_T180@mR+1
  1800   000F72  ECB1  F00E         	call	_Blue_T180	;wreg free
  1801   000F76  EF39  F008         	goto	l2695
  1802   000F7A                     l2679:
  1803   000F7A  90D8               	bcf	status,0,c
  1804   000F7C  3438               	rlcf	White@i^0,w,c
  1805   000F7E  6ED9               	movwf	fsr2l,c
  1806   000F80  3439               	rlcf	(White@i+1)^0,w,c
  1807   000F82  6EDA               	movwf	fsr2h,c
  1808   000F84  502E               	movf	White@movementMemory^0,w,c
  1809   000F86  26D9               	addwf	fsr2l,f,c
  1810   000F88  502F               	movf	(White@movementMemory+1)^0,w,c
  1811   000F8A  22DA               	addwfc	fsr2h,f,c
  1812   000F8C  0E03               	movlw	3
  1813   000F8E  18DE               	xorwf	postinc2,w,c
  1814   000F90  10DE               	iorwf	postinc2,w,c
  1815   000F92  A4D8               	btfss	status,2,c
  1816   000F94  EFCE  F007         	goto	u1431
  1817   000F98  EFD0  F007         	goto	u1430
  1818   000F9C                     u1431:
  1819   000F9C  EFDC  F007         	goto	l2683
  1820   000FA0                     u1430:
  1821   000FA0                     
  1822                           ;dc_motor.c: 365:                 Yellow_rev1_R90(mL,mR);}
  1823   000FA0  C028  F021         	movff	White@mL,Yellow_rev1_R90@mL
  1824   000FA4  C029  F022         	movff	White@mL+1,Yellow_rev1_R90@mL+1
  1825   000FA8  C02A  F023         	movff	White@mR,Yellow_rev1_R90@mR
  1826   000FAC  C02B  F024         	movff	White@mR+1,Yellow_rev1_R90@mR+1
  1827   000FB0  EC57  F009         	call	_Yellow_rev1_R90	;wreg free
  1828   000FB4  EF39  F008         	goto	l2695
  1829   000FB8                     l2683:
  1830   000FB8  90D8               	bcf	status,0,c
  1831   000FBA  3438               	rlcf	White@i^0,w,c
  1832   000FBC  6ED9               	movwf	fsr2l,c
  1833   000FBE  3439               	rlcf	(White@i+1)^0,w,c
  1834   000FC0  6EDA               	movwf	fsr2h,c
  1835   000FC2  502E               	movf	White@movementMemory^0,w,c
  1836   000FC4  26D9               	addwf	fsr2l,f,c
  1837   000FC6  502F               	movf	(White@movementMemory+1)^0,w,c
  1838   000FC8  22DA               	addwfc	fsr2h,f,c
  1839   000FCA  0E04               	movlw	4
  1840   000FCC  18DE               	xorwf	postinc2,w,c
  1841   000FCE  10DE               	iorwf	postinc2,w,c
  1842   000FD0  A4D8               	btfss	status,2,c
  1843   000FD2  EFED  F007         	goto	u1441
  1844   000FD6  EFEF  F007         	goto	u1440
  1845   000FDA                     u1441:
  1846   000FDA  EFFB  F007         	goto	l2687
  1847   000FDE                     u1440:
  1848   000FDE                     
  1849                           ;dc_motor.c: 367:                 Pink_rev1_L90(mL,mR);}
  1850   000FDE  C028  F021         	movff	White@mL,Pink_rev1_L90@mL
  1851   000FE2  C029  F022         	movff	White@mL+1,Pink_rev1_L90@mL+1
  1852   000FE6  C02A  F023         	movff	White@mR,Pink_rev1_L90@mR
  1853   000FEA  C02B  F024         	movff	White@mR+1,Pink_rev1_L90@mR+1
  1854   000FEE  ECCE  F009         	call	_Pink_rev1_L90	;wreg free
  1855   000FF2  EF39  F008         	goto	l2695
  1856   000FF6                     l2687:
  1857   000FF6  90D8               	bcf	status,0,c
  1858   000FF8  3438               	rlcf	White@i^0,w,c
  1859   000FFA  6ED9               	movwf	fsr2l,c
  1860   000FFC  3439               	rlcf	(White@i+1)^0,w,c
  1861   000FFE  6EDA               	movwf	fsr2h,c
  1862   001000  502E               	movf	White@movementMemory^0,w,c
  1863   001002  26D9               	addwf	fsr2l,f,c
  1864   001004  502F               	movf	(White@movementMemory+1)^0,w,c
  1865   001006  22DA               	addwfc	fsr2h,f,c
  1866   001008  0E05               	movlw	5
  1867   00100A  18DE               	xorwf	postinc2,w,c
  1868   00100C  10DE               	iorwf	postinc2,w,c
  1869   00100E  A4D8               	btfss	status,2,c
  1870   001010  EF0C  F008         	goto	u1451
  1871   001014  EF0E  F008         	goto	u1450
  1872   001018                     u1451:
  1873   001018  EF1A  F008         	goto	l2691
  1874   00101C                     u1450:
  1875   00101C                     
  1876                           ;dc_motor.c: 369:                 Orange_R135(mL,mR);}
  1877   00101C  C028  F021         	movff	White@mL,Orange_R135@mL
  1878   001020  C029  F022         	movff	White@mL+1,Orange_R135@mL+1
  1879   001024  C02A  F023         	movff	White@mR,Orange_R135@mR
  1880   001028  C02B  F024         	movff	White@mR+1,Orange_R135@mR+1
  1881   00102C  ECA0  F00A         	call	_Orange_R135	;wreg free
  1882   001030  EF39  F008         	goto	l2695
  1883   001034                     l2691:
  1884   001034  90D8               	bcf	status,0,c
  1885   001036  3438               	rlcf	White@i^0,w,c
  1886   001038  6ED9               	movwf	fsr2l,c
  1887   00103A  3439               	rlcf	(White@i+1)^0,w,c
  1888   00103C  6EDA               	movwf	fsr2h,c
  1889   00103E  502E               	movf	White@movementMemory^0,w,c
  1890   001040  26D9               	addwf	fsr2l,f,c
  1891   001042  502F               	movf	(White@movementMemory+1)^0,w,c
  1892   001044  22DA               	addwfc	fsr2h,f,c
  1893   001046  0E06               	movlw	6
  1894   001048  18DE               	xorwf	postinc2,w,c
  1895   00104A  10DE               	iorwf	postinc2,w,c
  1896   00104C  A4D8               	btfss	status,2,c
  1897   00104E  EF2B  F008         	goto	u1461
  1898   001052  EF2D  F008         	goto	u1460
  1899   001056                     u1461:
  1900   001056  EF39  F008         	goto	l298
  1901   00105A                     u1460:
  1902   00105A                     
  1903                           ;dc_motor.c: 371:                 LightBlue_L135(mL,mR);}
  1904   00105A  C028  F021         	movff	White@mL,LightBlue_L135@mL
  1905   00105E  C029  F022         	movff	White@mL+1,LightBlue_L135@mL+1
  1906   001062  C02A  F023         	movff	White@mR,LightBlue_L135@mR
  1907   001066  C02B  F024         	movff	White@mR+1,LightBlue_L135@mR+1
  1908   00106A  ECF3  F00A         	call	_LightBlue_L135	;wreg free
  1909   00106E  EF39  F008         	goto	l2695
  1910   001072                     l298:
  1911   001072                     l2695:
  1912                           
  1913                           ;dc_motor.c: 373:             unsigned int tempTimer = 0;
  1914   001072  0E00               	movlw	0
  1915   001074  6E37               	movwf	(White@tempTimer+1)^0,c
  1916   001076  0E00               	movlw	0
  1917   001078  6E36               	movwf	White@tempTimer^0,c
  1918   00107A                     
  1919                           ;dc_motor.c: 374:             TimerReset();
  1920   00107A  ECE3  F00F         	call	_TimerReset	;wreg free
  1921   00107E                     
  1922                           ;dc_motor.c: 375:             fullSpeedAhead(mL,mR);
  1923   00107E  C028  F014         	movff	White@mL,fullSpeedAhead@mL
  1924   001082  C029  F015         	movff	White@mL+1,fullSpeedAhead@mL+1
  1925   001086  C02A  F016         	movff	White@mR,fullSpeedAhead@mR
  1926   00108A  C02B  F017         	movff	White@mR+1,fullSpeedAhead@mR+1
  1927   00108E  EC44  F00D         	call	_fullSpeedAhead	;wreg free
  1928                           
  1929                           ;dc_motor.c: 376:             while(tempTimer<timerMemory[i])
  1930   001092  EF52  F008         	goto	l2705
  1931   001096                     l2701:
  1932                           
  1933                           ;dc_motor.c: 377:             {;dc_motor.c: 378:                 tempTimer = getTimerVal
      +                          ue();
  1934   001096  ECAE  F00F         	call	_getTimerValue	;wreg free
  1935   00109A  C001  F036         	movff	?_getTimerValue,White@tempTimer
  1936   00109E  C002  F037         	movff	?_getTimerValue+1,White@tempTimer+1
  1937   0010A2                     
  1938                           ;dc_motor.c: 379:                 LATDbits.LATD4 = 1;;
  1939   0010A2  887C               	bsf	124,4,c	;volatile
  1940   0010A4                     l2705:
  1941                           
  1942                           ;dc_motor.c: 376:             while(tempTimer<timerMemory[i])
  1943   0010A4  90D8               	bcf	status,0,c
  1944   0010A6  3438               	rlcf	White@i^0,w,c
  1945   0010A8  6ED9               	movwf	fsr2l,c
  1946   0010AA  3439               	rlcf	(White@i+1)^0,w,c
  1947   0010AC  6EDA               	movwf	fsr2h,c
  1948   0010AE  5030               	movf	White@timerMemory^0,w,c
  1949   0010B0  26D9               	addwf	fsr2l,f,c
  1950   0010B2  5031               	movf	(White@timerMemory+1)^0,w,c
  1951   0010B4  22DA               	addwfc	fsr2h,f,c
  1952   0010B6  50DE               	movf	postinc2,w,c
  1953   0010B8  5C36               	subwf	White@tempTimer^0,w,c
  1954   0010BA  50DE               	movf	postinc2,w,c
  1955   0010BC  5837               	subwfb	(White@tempTimer+1)^0,w,c
  1956   0010BE  A0D8               	btfss	status,0,c
  1957   0010C0  EF64  F008         	goto	u1471
  1958   0010C4  EF66  F008         	goto	u1470
  1959   0010C8                     u1471:
  1960   0010C8  EF4B  F008         	goto	l2701
  1961   0010CC                     u1470:
  1962   0010CC                     
  1963                           ;dc_motor.c: 381:             stop(mL,mR);
  1964   0010CC  C028  F014         	movff	White@mL,stop@mL
  1965   0010D0  C029  F015         	movff	White@mL+1,stop@mL+1
  1966   0010D4  C02A  F016         	movff	White@mR,stop@mR
  1967   0010D8  C02B  F017         	movff	White@mR+1,stop@mR+1
  1968   0010DC  EC46  F00B         	call	_stop	;wreg free
  1969   0010E0                     
  1970                           ;dc_motor.c: 382:             _delay((unsigned long)((1000)*(64000000/4000.0)));
  1971   0010E0  0E52               	movlw	82
  1972   0010E2  6E33               	movwf	(??_White+1)^0,c
  1973   0010E4  0E2B               	movlw	43
  1974   0010E6  6E32               	movwf	??_White^0,c
  1975   0010E8  0E00               	movlw	0
  1976   0010EA                     u2077:
  1977   0010EA  2EE8               	decfsz	wreg,f,c
  1978   0010EC  D7FE               	bra	u2077
  1979   0010EE  2E32               	decfsz	??_White^0,f,c
  1980   0010F0  D7FC               	bra	u2077
  1981   0010F2  2E33               	decfsz	(??_White+1)^0,f,c
  1982   0010F4  D7FA               	bra	u2077
  1983   0010F6  D000               	nop2	
  1984   0010F8                     
  1985                           ;dc_motor.c: 383:         }
  1986   0010F8  0638               	decf	White@i^0,f,c
  1987   0010FA  A0D8               	btfss	status,0,c
  1988   0010FC  0639               	decf	(White@i+1)^0,f,c
  1989   0010FE  EF59  F007         	goto	l2663
  1990   001102                     l2715:
  1991                           
  1992                           ;dc_motor.c: 350:     while (!retracingDone){
  1993   001102  5034               	movf	White@retracingDone^0,w,c
  1994   001104  1035               	iorwf	(White@retracingDone+1)^0,w,c
  1995   001106  B4D8               	btfsc	status,2,c
  1996   001108  EF88  F008         	goto	u1481
  1997   00110C  EF8A  F008         	goto	u1480
  1998   001110                     u1481:
  1999   001110  EF2D  F007         	goto	l2653
  2000   001114                     u1480:
  2001   001114                     
  2002                           ;dc_motor.c: 386:     stop(mL,mR);
  2003   001114  C028  F014         	movff	White@mL,stop@mL
  2004   001118  C029  F015         	movff	White@mL+1,stop@mL+1
  2005   00111C  C02A  F016         	movff	White@mR,stop@mR
  2006   001120  C02B  F017         	movff	White@mR+1,stop@mR+1
  2007   001124  EC46  F00B         	call	_stop	;wreg free
  2008   001128                     
  2009                           ;dc_motor.c: 387:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  2010   001128  0E52               	movlw	82
  2011   00112A  6E33               	movwf	(??_White+1)^0,c
  2012   00112C  0E2B               	movlw	43
  2013   00112E  6E32               	movwf	??_White^0,c
  2014   001130  0E00               	movlw	0
  2015   001132                     u2087:
  2016   001132  2EE8               	decfsz	wreg,f,c
  2017   001134  D7FE               	bra	u2087
  2018   001136  2E32               	decfsz	??_White^0,f,c
  2019   001138  D7FC               	bra	u2087
  2020   00113A  2E33               	decfsz	(??_White+1)^0,f,c
  2021   00113C  D7FA               	bra	u2087
  2022   00113E  D000               	nop2	
  2023   001140  0012               	return		;funcret
  2024   001142                     __end_of_White:
  2025                           	callstack 0
  2026                           
  2027 ;; *************** function _getTimerValue *****************
  2028 ;; Defined at:
  2029 ;;		line 28 in file "timer.c"
  2030 ;; Parameters:    Size  Location     Type
  2031 ;;		None
  2032 ;; Auto vars:     Size  Location     Type
  2033 ;;  timerCount      2    4[COMRAM] unsigned int 
  2034 ;; Return value:  Size  Location     Type
  2035 ;;                  2    0[COMRAM] unsigned int 
  2036 ;; Registers used:
  2037 ;;		wreg, status,2, status,0
  2038 ;; Tracked objects:
  2039 ;;		On entry : 0/0
  2040 ;;		On exit  : 0/0
  2041 ;;		Unchanged: 0/0
  2042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2043 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2044 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2045 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2046 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2047 ;;Total ram usage:        6 bytes
  2048 ;; Hardware stack levels used: 1
  2049 ;; Hardware stack levels required when called: 1
  2050 ;; This function calls:
  2051 ;;		Nothing
  2052 ;; This function is called by:
  2053 ;;		_White
  2054 ;;		_memoryUpdate
  2055 ;; This function uses a non-reentrant model
  2056 ;;
  2057                           
  2058                           	psect	text11
  2059   001F5C                     __ptext11:
  2060                           	callstack 0
  2061   001F5C                     _getTimerValue:
  2062                           	callstack 28
  2063   001F5C                     
  2064                           ;timer.c: 30:     unsigned int timerCount;;timer.c: 32:     timerCount = TMR0L;
  2065   001F5C  CFD3 F005          	movff	4051,getTimerValue@timerCount	;volatile
  2066   001F60  6A06               	clrf	(getTimerValue@timerCount+1)^0,c
  2067   001F62                     
  2068                           ;timer.c: 34:     timerCount |= (unsigned int)(TMR0H << 8);
  2069   001F62  50D4               	movf	212,w,c	;volatile
  2070   001F64  6E04               	movwf	(??_getTimerValue+1)^0,c
  2071   001F66  6A03               	clrf	??_getTimerValue^0,c
  2072   001F68  5003               	movf	??_getTimerValue^0,w,c
  2073   001F6A  1205               	iorwf	getTimerValue@timerCount^0,f,c
  2074   001F6C  5004               	movf	(??_getTimerValue+1)^0,w,c
  2075   001F6E  1206               	iorwf	(getTimerValue@timerCount+1)^0,f,c
  2076   001F70                     
  2077                           ;timer.c: 35:     return timerCount;
  2078   001F70  C005  F001         	movff	getTimerValue@timerCount,?_getTimerValue
  2079   001F74  C006  F002         	movff	getTimerValue@timerCount+1,?_getTimerValue+1
  2080   001F78  0012               	return		;funcret
  2081   001F7A                     __end_of_getTimerValue:
  2082                           	callstack 0
  2083                           
  2084 ;; *************** function _Yellow_rev1_R90 *****************
  2085 ;; Defined at:
  2086 ;;		line 269 in file "dc_motor.c"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  2089 ;;		 -> motorL(9), 
  2090 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  2091 ;;		 -> motorR(9), 
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;		None
  2094 ;; Return value:  Size  Location     Type
  2095 ;;                  1    wreg      void 
  2096 ;; Registers used:
  2097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2098 ;; Tracked objects:
  2099 ;;		On entry : 0/0
  2100 ;;		On exit  : 0/0
  2101 ;;		Unchanged: 0/0
  2102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2103 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2105 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2106 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2107 ;;Total ram usage:        6 bytes
  2108 ;; Hardware stack levels used: 1
  2109 ;; Hardware stack levels required when called: 5
  2110 ;; This function calls:
  2111 ;;		_Left45
  2112 ;;		_Right45
  2113 ;;		_TimerReset
  2114 ;;		_fullSpeedAhead
  2115 ;;		_fullSpeedReverse
  2116 ;;		_reverseHalfSquare
  2117 ;;		_stop
  2118 ;; This function is called by:
  2119 ;;		_White
  2120 ;;		_Colour2Action
  2121 ;; This function uses a non-reentrant model
  2122 ;;
  2123                           
  2124                           	psect	text12
  2125   0012AE                     __ptext12:
  2126                           	callstack 0
  2127   0012AE                     _Yellow_rev1_R90:
  2128                           	callstack 24
  2129   0012AE                     
  2130                           ;dc_motor.c: 269: void Yellow_rev1_R90(struct DC_motor *mL, struct DC_motor *mR);dc_moto
      +                          r.c: 270: {;dc_motor.c: 271:     if (ForwardFlag){
  2131   0012AE  5058               	movf	_ForwardFlag^0,w,c	;volatile
  2132   0012B0  B4D8               	btfsc	status,2,c
  2133   0012B2  EF5D  F009         	goto	u1331
  2134   0012B6  EF5F  F009         	goto	u1330
  2135   0012BA                     u1331:
  2136   0012BA  EFA1  F009         	goto	l2519
  2137   0012BE                     u1330:
  2138   0012BE                     
  2139                           ;dc_motor.c: 272:         reverseHalfSquare(mL,mR);
  2140   0012BE  C021  F01B         	movff	Yellow_rev1_R90@mL,reverseHalfSquare@mL
  2141   0012C2  C022  F01C         	movff	Yellow_rev1_R90@mL+1,reverseHalfSquare@mL+1
  2142   0012C6  C023  F01D         	movff	Yellow_rev1_R90@mR,reverseHalfSquare@mR
  2143   0012CA  C024  F01E         	movff	Yellow_rev1_R90@mR+1,reverseHalfSquare@mR+1
  2144   0012CE  EC01  F00D         	call	_reverseHalfSquare	;wreg free
  2145                           
  2146                           ;dc_motor.c: 274:         fullSpeedReverse(mL,mR);
  2147   0012D2  C021  F014         	movff	Yellow_rev1_R90@mL,fullSpeedReverse@mL
  2148   0012D6  C022  F015         	movff	Yellow_rev1_R90@mL+1,fullSpeedReverse@mL+1
  2149   0012DA  C023  F016         	movff	Yellow_rev1_R90@mR,fullSpeedReverse@mR
  2150   0012DE  C024  F017         	movff	Yellow_rev1_R90@mR+1,fullSpeedReverse@mR+1
  2151   0012E2  EC84  F00D         	call	_fullSpeedReverse	;wreg free
  2152   0012E6                     
  2153                           ;dc_motor.c: 275:         _delay((unsigned long)((_1square)*(64000000/4000.0)));
  2154   0012E6  0E39               	movlw	57
  2155   0012E8  6E26               	movwf	(??_Yellow_rev1_R90+1)^0,c
  2156   0012EA  0ED2               	movlw	210
  2157   0012EC  6E25               	movwf	??_Yellow_rev1_R90^0,c
  2158   0012EE  0E4C               	movlw	76
  2159   0012F0                     u2097:
  2160   0012F0  2EE8               	decfsz	wreg,f,c
  2161   0012F2  D7FE               	bra	u2097
  2162   0012F4  2E25               	decfsz	??_Yellow_rev1_R90^0,f,c
  2163   0012F6  D7FC               	bra	u2097
  2164   0012F8  2E26               	decfsz	(??_Yellow_rev1_R90+1)^0,f,c
  2165   0012FA  D7FA               	bra	u2097
  2166   0012FC  D000               	nop2	
  2167   0012FE                     
  2168                           ;dc_motor.c: 277:         Right45(mL,mR);
  2169   0012FE  C021  F01A         	movff	Yellow_rev1_R90@mL,Right45@mL
  2170   001302  C022  F01B         	movff	Yellow_rev1_R90@mL+1,Right45@mL+1
  2171   001306  C023  F01C         	movff	Yellow_rev1_R90@mR,Right45@mR
  2172   00130A  C024  F01D         	movff	Yellow_rev1_R90@mR+1,Right45@mR+1
  2173   00130E  EC77  F00C         	call	_Right45	;wreg free
  2174   001312                     
  2175                           ;dc_motor.c: 278:         Right45(mL,mR);
  2176   001312  C021  F01A         	movff	Yellow_rev1_R90@mL,Right45@mL
  2177   001316  C022  F01B         	movff	Yellow_rev1_R90@mL+1,Right45@mL+1
  2178   00131A  C023  F01C         	movff	Yellow_rev1_R90@mR,Right45@mR
  2179   00131E  C024  F01D         	movff	Yellow_rev1_R90@mR+1,Right45@mR+1
  2180   001322  EC77  F00C         	call	_Right45	;wreg free
  2181   001326                     
  2182                           ;dc_motor.c: 279:         TimerReset();
  2183   001326  ECE3  F00F         	call	_TimerReset	;wreg free
  2184   00132A                     l2517:
  2185                           
  2186                           ;dc_motor.c: 280:         stop(mL,mR);
  2187   00132A  C021  F014         	movff	Yellow_rev1_R90@mL,stop@mL
  2188   00132E  C022  F015         	movff	Yellow_rev1_R90@mL+1,stop@mL+1
  2189   001332  C023  F016         	movff	Yellow_rev1_R90@mR,stop@mR
  2190   001336  C024  F017         	movff	Yellow_rev1_R90@mR+1,stop@mR+1
  2191   00133A  EC46  F00B         	call	_stop	;wreg free
  2192                           
  2193                           ;dc_motor.c: 281:     }
  2194   00133E  EFCD  F009         	goto	l269
  2195   001342                     l2519:
  2196                           
  2197                           ;dc_motor.c: 284:         Left45(mL,mR);
  2198   001342  C021  F01A         	movff	Yellow_rev1_R90@mL,Left45@mL
  2199   001346  C022  F01B         	movff	Yellow_rev1_R90@mL+1,Left45@mL+1
  2200   00134A  C023  F01C         	movff	Yellow_rev1_R90@mR,Left45@mR
  2201   00134E  C024  F01D         	movff	Yellow_rev1_R90@mR+1,Left45@mR+1
  2202   001352  ECBC  F00C         	call	_Left45	;wreg free
  2203                           
  2204                           ;dc_motor.c: 285:         Left45(mL,mR);
  2205   001356  C021  F01A         	movff	Yellow_rev1_R90@mL,Left45@mL
  2206   00135A  C022  F01B         	movff	Yellow_rev1_R90@mL+1,Left45@mL+1
  2207   00135E  C023  F01C         	movff	Yellow_rev1_R90@mR,Left45@mR
  2208   001362  C024  F01D         	movff	Yellow_rev1_R90@mR+1,Left45@mR+1
  2209   001366  ECBC  F00C         	call	_Left45	;wreg free
  2210                           
  2211                           ;dc_motor.c: 286:         fullSpeedAhead(mL,mR);
  2212   00136A  C021  F014         	movff	Yellow_rev1_R90@mL,fullSpeedAhead@mL
  2213   00136E  C022  F015         	movff	Yellow_rev1_R90@mL+1,fullSpeedAhead@mL+1
  2214   001372  C023  F016         	movff	Yellow_rev1_R90@mR,fullSpeedAhead@mR
  2215   001376  C024  F017         	movff	Yellow_rev1_R90@mR+1,fullSpeedAhead@mR+1
  2216   00137A  EC44  F00D         	call	_fullSpeedAhead	;wreg free
  2217   00137E                     
  2218                           ;dc_motor.c: 287:         _delay((unsigned long)((_1square)*(64000000/4000.0)));
  2219   00137E  0E39               	movlw	57
  2220   001380  6E26               	movwf	(??_Yellow_rev1_R90+1)^0,c
  2221   001382  0ED2               	movlw	210
  2222   001384  6E25               	movwf	??_Yellow_rev1_R90^0,c
  2223   001386  0E4C               	movlw	76
  2224   001388                     u2107:
  2225   001388  2EE8               	decfsz	wreg,f,c
  2226   00138A  D7FE               	bra	u2107
  2227   00138C  2E25               	decfsz	??_Yellow_rev1_R90^0,f,c
  2228   00138E  D7FC               	bra	u2107
  2229   001390  2E26               	decfsz	(??_Yellow_rev1_R90+1)^0,f,c
  2230   001392  D7FA               	bra	u2107
  2231   001394  D000               	nop2	
  2232   001396  EF95  F009         	goto	l2517
  2233   00139A                     l269:
  2234   00139A  0012               	return		;funcret
  2235   00139C                     __end_of_Yellow_rev1_R90:
  2236                           	callstack 0
  2237                           
  2238 ;; *************** function _Red_R90 *****************
  2239 ;; Defined at:
  2240 ;;		line 226 in file "dc_motor.c"
  2241 ;; Parameters:    Size  Location     Type
  2242 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  2243 ;;		 -> motorL(9), 
  2244 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  2245 ;;		 -> motorR(9), 
  2246 ;; Auto vars:     Size  Location     Type
  2247 ;;		None
  2248 ;; Return value:  Size  Location     Type
  2249 ;;                  1    wreg      void 
  2250 ;; Registers used:
  2251 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2252 ;; Tracked objects:
  2253 ;;		On entry : 0/0
  2254 ;;		On exit  : 0/0
  2255 ;;		Unchanged: 0/0
  2256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2257 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2260 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2261 ;;Total ram usage:        4 bytes
  2262 ;; Hardware stack levels used: 1
  2263 ;; Hardware stack levels required when called: 5
  2264 ;; This function calls:
  2265 ;;		_Left45
  2266 ;;		_Right45
  2267 ;;		_TimerReset
  2268 ;;		_reverseHalfSquare
  2269 ;; This function is called by:
  2270 ;;		_White
  2271 ;;		_Colour2Action
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275                           	psect	text13
  2276   001B88                     __ptext13:
  2277                           	callstack 0
  2278   001B88                     _Red_R90:
  2279                           	callstack 24
  2280   001B88                     
  2281                           ;dc_motor.c: 226: void Red_R90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 227
      +                          : {;dc_motor.c: 228:     if (ForwardFlag){
  2282   001B88  5058               	movf	_ForwardFlag^0,w,c	;volatile
  2283   001B8A  B4D8               	btfsc	status,2,c
  2284   001B8C  EFCA  F00D         	goto	u1301
  2285   001B90  EFCC  F00D         	goto	u1300
  2286   001B94                     u1301:
  2287   001B94  EFEE  F00D         	goto	l2487
  2288   001B98                     u1300:
  2289   001B98                     
  2290                           ;dc_motor.c: 229:         reverseHalfSquare(mL,mR);
  2291   001B98  C021  F01B         	movff	Red_R90@mL,reverseHalfSquare@mL
  2292   001B9C  C022  F01C         	movff	Red_R90@mL+1,reverseHalfSquare@mL+1
  2293   001BA0  C023  F01D         	movff	Red_R90@mR,reverseHalfSquare@mR
  2294   001BA4  C024  F01E         	movff	Red_R90@mR+1,reverseHalfSquare@mR+1
  2295   001BA8  EC01  F00D         	call	_reverseHalfSquare	;wreg free
  2296                           
  2297                           ;dc_motor.c: 230:         Right45(mL,mR);
  2298   001BAC  C021  F01A         	movff	Red_R90@mL,Right45@mL
  2299   001BB0  C022  F01B         	movff	Red_R90@mL+1,Right45@mL+1
  2300   001BB4  C023  F01C         	movff	Red_R90@mR,Right45@mR
  2301   001BB8  C024  F01D         	movff	Red_R90@mR+1,Right45@mR+1
  2302   001BBC  EC77  F00C         	call	_Right45	;wreg free
  2303                           
  2304                           ;dc_motor.c: 231:         Right45(mL,mR);
  2305   001BC0  C021  F01A         	movff	Red_R90@mL,Right45@mL
  2306   001BC4  C022  F01B         	movff	Red_R90@mL+1,Right45@mL+1
  2307   001BC8  C023  F01C         	movff	Red_R90@mR,Right45@mR
  2308   001BCC  C024  F01D         	movff	Red_R90@mR+1,Right45@mR+1
  2309   001BD0  EC77  F00C         	call	_Right45	;wreg free
  2310   001BD4                     
  2311                           ;dc_motor.c: 232:         TimerReset();
  2312   001BD4  ECE3  F00F         	call	_TimerReset	;wreg free
  2313                           
  2314                           ;dc_motor.c: 233:     }
  2315   001BD8  EF02  F00E         	goto	l254
  2316   001BDC                     l2487:
  2317                           
  2318                           ;dc_motor.c: 236:         Left45(mL,mR);
  2319   001BDC  C021  F01A         	movff	Red_R90@mL,Left45@mL
  2320   001BE0  C022  F01B         	movff	Red_R90@mL+1,Left45@mL+1
  2321   001BE4  C023  F01C         	movff	Red_R90@mR,Left45@mR
  2322   001BE8  C024  F01D         	movff	Red_R90@mR+1,Left45@mR+1
  2323   001BEC  ECBC  F00C         	call	_Left45	;wreg free
  2324                           
  2325                           ;dc_motor.c: 237:         Left45(mL,mR);
  2326   001BF0  C021  F01A         	movff	Red_R90@mL,Left45@mL
  2327   001BF4  C022  F01B         	movff	Red_R90@mL+1,Left45@mL+1
  2328   001BF8  C023  F01C         	movff	Red_R90@mR,Left45@mR
  2329   001BFC  C024  F01D         	movff	Red_R90@mR+1,Left45@mR+1
  2330   001C00  ECBC  F00C         	call	_Left45	;wreg free
  2331   001C04                     l254:
  2332   001C04  0012               	return		;funcret
  2333   001C06                     __end_of_Red_R90:
  2334                           	callstack 0
  2335                           
  2336 ;; *************** function _Pink_rev1_L90 *****************
  2337 ;; Defined at:
  2338 ;;		line 291 in file "dc_motor.c"
  2339 ;; Parameters:    Size  Location     Type
  2340 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  2341 ;;		 -> motorL(9), 
  2342 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  2343 ;;		 -> motorR(9), 
  2344 ;; Auto vars:     Size  Location     Type
  2345 ;;		None
  2346 ;; Return value:  Size  Location     Type
  2347 ;;                  1    wreg      void 
  2348 ;; Registers used:
  2349 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2350 ;; Tracked objects:
  2351 ;;		On entry : 0/0
  2352 ;;		On exit  : 0/0
  2353 ;;		Unchanged: 0/0
  2354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2355 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2357 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2358 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2359 ;;Total ram usage:        6 bytes
  2360 ;; Hardware stack levels used: 1
  2361 ;; Hardware stack levels required when called: 5
  2362 ;; This function calls:
  2363 ;;		_Left45
  2364 ;;		_Right45
  2365 ;;		_TimerReset
  2366 ;;		_fullSpeedAhead
  2367 ;;		_fullSpeedReverse
  2368 ;;		_reverseHalfSquare
  2369 ;;		_stop
  2370 ;; This function is called by:
  2371 ;;		_White
  2372 ;;		_Colour2Action
  2373 ;; This function uses a non-reentrant model
  2374 ;;
  2375                           
  2376                           	psect	text14
  2377   00139C                     __ptext14:
  2378                           	callstack 0
  2379   00139C                     _Pink_rev1_L90:
  2380                           	callstack 24
  2381   00139C                     
  2382                           ;dc_motor.c: 291: void Pink_rev1_L90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 292: {;dc_motor.c: 293:     if (ForwardFlag){
  2383   00139C  5058               	movf	_ForwardFlag^0,w,c	;volatile
  2384   00139E  B4D8               	btfsc	status,2,c
  2385   0013A0  EFD4  F009         	goto	u1341
  2386   0013A4  EFD6  F009         	goto	u1340
  2387   0013A8                     u1341:
  2388   0013A8  EF0E  F00A         	goto	l2537
  2389   0013AC                     u1340:
  2390   0013AC                     
  2391                           ;dc_motor.c: 294:         reverseHalfSquare(mL,mR);
  2392   0013AC  C021  F01B         	movff	Pink_rev1_L90@mL,reverseHalfSquare@mL
  2393   0013B0  C022  F01C         	movff	Pink_rev1_L90@mL+1,reverseHalfSquare@mL+1
  2394   0013B4  C023  F01D         	movff	Pink_rev1_L90@mR,reverseHalfSquare@mR
  2395   0013B8  C024  F01E         	movff	Pink_rev1_L90@mR+1,reverseHalfSquare@mR+1
  2396   0013BC  EC01  F00D         	call	_reverseHalfSquare	;wreg free
  2397                           
  2398                           ;dc_motor.c: 296:         fullSpeedReverse(mL,mR);
  2399   0013C0  C021  F014         	movff	Pink_rev1_L90@mL,fullSpeedReverse@mL
  2400   0013C4  C022  F015         	movff	Pink_rev1_L90@mL+1,fullSpeedReverse@mL+1
  2401   0013C8  C023  F016         	movff	Pink_rev1_L90@mR,fullSpeedReverse@mR
  2402   0013CC  C024  F017         	movff	Pink_rev1_L90@mR+1,fullSpeedReverse@mR+1
  2403   0013D0  EC84  F00D         	call	_fullSpeedReverse	;wreg free
  2404   0013D4                     
  2405                           ;dc_motor.c: 297:         _delay((unsigned long)((_1square)*(64000000/4000.0)));
  2406   0013D4  0E39               	movlw	57
  2407   0013D6  6E26               	movwf	(??_Pink_rev1_L90+1)^0,c
  2408   0013D8  0ED2               	movlw	210
  2409   0013DA  6E25               	movwf	??_Pink_rev1_L90^0,c
  2410   0013DC  0E4C               	movlw	76
  2411   0013DE                     u2117:
  2412   0013DE  2EE8               	decfsz	wreg,f,c
  2413   0013E0  D7FE               	bra	u2117
  2414   0013E2  2E25               	decfsz	??_Pink_rev1_L90^0,f,c
  2415   0013E4  D7FC               	bra	u2117
  2416   0013E6  2E26               	decfsz	(??_Pink_rev1_L90+1)^0,f,c
  2417   0013E8  D7FA               	bra	u2117
  2418   0013EA  D000               	nop2	
  2419   0013EC                     
  2420                           ;dc_motor.c: 298:         Left45(mL,mR);
  2421   0013EC  C021  F01A         	movff	Pink_rev1_L90@mL,Left45@mL
  2422   0013F0  C022  F01B         	movff	Pink_rev1_L90@mL+1,Left45@mL+1
  2423   0013F4  C023  F01C         	movff	Pink_rev1_L90@mR,Left45@mR
  2424   0013F8  C024  F01D         	movff	Pink_rev1_L90@mR+1,Left45@mR+1
  2425   0013FC  ECBC  F00C         	call	_Left45	;wreg free
  2426   001400                     
  2427                           ;dc_motor.c: 299:         Left45(mL,mR);
  2428   001400  C021  F01A         	movff	Pink_rev1_L90@mL,Left45@mL
  2429   001404  C022  F01B         	movff	Pink_rev1_L90@mL+1,Left45@mL+1
  2430   001408  C023  F01C         	movff	Pink_rev1_L90@mR,Left45@mR
  2431   00140C  C024  F01D         	movff	Pink_rev1_L90@mR+1,Left45@mR+1
  2432   001410  ECBC  F00C         	call	_Left45	;wreg free
  2433   001414                     
  2434                           ;dc_motor.c: 300:         TimerReset();
  2435   001414  ECE3  F00F         	call	_TimerReset	;wreg free
  2436                           
  2437                           ;dc_motor.c: 301:     }
  2438   001418  EF42  F00A         	goto	l274
  2439   00141C                     l2537:
  2440                           
  2441                           ;dc_motor.c: 304:         Right45(mL,mR);
  2442   00141C  C021  F01A         	movff	Pink_rev1_L90@mL,Right45@mL
  2443   001420  C022  F01B         	movff	Pink_rev1_L90@mL+1,Right45@mL+1
  2444   001424  C023  F01C         	movff	Pink_rev1_L90@mR,Right45@mR
  2445   001428  C024  F01D         	movff	Pink_rev1_L90@mR+1,Right45@mR+1
  2446   00142C  EC77  F00C         	call	_Right45	;wreg free
  2447                           
  2448                           ;dc_motor.c: 305:         Right45(mL,mR);
  2449   001430  C021  F01A         	movff	Pink_rev1_L90@mL,Right45@mL
  2450   001434  C022  F01B         	movff	Pink_rev1_L90@mL+1,Right45@mL+1
  2451   001438  C023  F01C         	movff	Pink_rev1_L90@mR,Right45@mR
  2452   00143C  C024  F01D         	movff	Pink_rev1_L90@mR+1,Right45@mR+1
  2453   001440  EC77  F00C         	call	_Right45	;wreg free
  2454                           
  2455                           ;dc_motor.c: 306:         fullSpeedAhead(mL,mR);
  2456   001444  C021  F014         	movff	Pink_rev1_L90@mL,fullSpeedAhead@mL
  2457   001448  C022  F015         	movff	Pink_rev1_L90@mL+1,fullSpeedAhead@mL+1
  2458   00144C  C023  F016         	movff	Pink_rev1_L90@mR,fullSpeedAhead@mR
  2459   001450  C024  F017         	movff	Pink_rev1_L90@mR+1,fullSpeedAhead@mR+1
  2460   001454  EC44  F00D         	call	_fullSpeedAhead	;wreg free
  2461   001458                     
  2462                           ;dc_motor.c: 307:         _delay((unsigned long)((_1square)*(64000000/4000.0)));
  2463   001458  0E39               	movlw	57
  2464   00145A  6E26               	movwf	(??_Pink_rev1_L90+1)^0,c
  2465   00145C  0ED2               	movlw	210
  2466   00145E  6E25               	movwf	??_Pink_rev1_L90^0,c
  2467   001460  0E4C               	movlw	76
  2468   001462                     u2127:
  2469   001462  2EE8               	decfsz	wreg,f,c
  2470   001464  D7FE               	bra	u2127
  2471   001466  2E25               	decfsz	??_Pink_rev1_L90^0,f,c
  2472   001468  D7FC               	bra	u2127
  2473   00146A  2E26               	decfsz	(??_Pink_rev1_L90+1)^0,f,c
  2474   00146C  D7FA               	bra	u2127
  2475   00146E  D000               	nop2	
  2476   001470                     
  2477                           ;dc_motor.c: 308:         stop(mL,mR);
  2478   001470  C021  F014         	movff	Pink_rev1_L90@mL,stop@mL
  2479   001474  C022  F015         	movff	Pink_rev1_L90@mL+1,stop@mL+1
  2480   001478  C023  F016         	movff	Pink_rev1_L90@mR,stop@mR
  2481   00147C  C024  F017         	movff	Pink_rev1_L90@mR+1,stop@mR+1
  2482   001480  EC46  F00B         	call	_stop	;wreg free
  2483   001484                     l274:
  2484   001484  0012               	return		;funcret
  2485   001486                     __end_of_Pink_rev1_L90:
  2486                           	callstack 0
  2487                           
  2488 ;; *************** function _fullSpeedAhead *****************
  2489 ;; Defined at:
  2490 ;;		line 149 in file "dc_motor.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  2493 ;;		 -> motorL(9), 
  2494 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  2495 ;;		 -> motorR(9), 
  2496 ;; Auto vars:     Size  Location     Type
  2497 ;;  i               2   24[COMRAM] unsigned int 
  2498 ;; Return value:  Size  Location     Type
  2499 ;;                  1    wreg      void 
  2500 ;; Registers used:
  2501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2502 ;; Tracked objects:
  2503 ;;		On entry : 0/0
  2504 ;;		On exit  : 0/0
  2505 ;;		Unchanged: 0/0
  2506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2507 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2508 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2509 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2510 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2511 ;;Total ram usage:        7 bytes
  2512 ;; Hardware stack levels used: 1
  2513 ;; Hardware stack levels required when called: 3
  2514 ;; This function calls:
  2515 ;;		_setMotorPWM
  2516 ;; This function is called by:
  2517 ;;		_Yellow_rev1_R90
  2518 ;;		_Pink_rev1_L90
  2519 ;;		_White
  2520 ;; This function uses a non-reentrant model
  2521 ;;
  2522                           
  2523                           	psect	text15
  2524   001A88                     __ptext15:
  2525                           	callstack 0
  2526   001A88                     _fullSpeedAhead:
  2527                           	callstack 26
  2528   001A88                     
  2529                           ;dc_motor.c: 149: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 150: {;dc_motor.c: 151:  (mL->direction) = 1;
  2530   001A88  EE20 F001          	lfsr	2,1
  2531   001A8C  5014               	movf	fullSpeedAhead@mL^0,w,c
  2532   001A8E  26D9               	addwf	fsr2l,f,c
  2533   001A90  5015               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2534   001A92  22DA               	addwfc	fsr2h,f,c
  2535   001A94  0E01               	movlw	1
  2536   001A96  6EDF               	movwf	indf2,c
  2537                           
  2538                           ;dc_motor.c: 152:  (mR->direction) = 1;
  2539   001A98  EE20 F001          	lfsr	2,1
  2540   001A9C  5016               	movf	fullSpeedAhead@mR^0,w,c
  2541   001A9E  26D9               	addwf	fsr2l,f,c
  2542   001AA0  5017               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2543   001AA2  22DA               	addwfc	fsr2h,f,c
  2544   001AA4  0E01               	movlw	1
  2545   001AA6  6EDF               	movwf	indf2,c
  2546   001AA8                     
  2547                           ;dc_motor.c: 154:     for (unsigned int i = 0; i <50; i++)
  2548   001AA8  0E00               	movlw	0
  2549   001AAA  6E1A               	movwf	(fullSpeedAhead@i+1)^0,c
  2550   001AAC  0E00               	movlw	0
  2551   001AAE  6E19               	movwf	fullSpeedAhead@i^0,c
  2552   001AB0                     l2411:
  2553                           
  2554                           ;dc_motor.c: 155:     {;dc_motor.c: 156:         (mL->power)++;
  2555   001AB0  C014  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2556   001AB4  C015  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2557   001AB8  2ADF               	incf	indf2,f,c
  2558                           
  2559                           ;dc_motor.c: 157:         (mR->power)++;
  2560   001ABA  C016  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2561   001ABE  C017  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2562   001AC2  2ADF               	incf	indf2,f,c
  2563   001AC4                     
  2564                           ;dc_motor.c: 158:         setMotorPWM(mL);
  2565   001AC4  C014  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2566   001AC8  C015  F00F         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2567   001ACC  ECA1  F008         	call	_setMotorPWM	;wreg free
  2568   001AD0                     
  2569                           ;dc_motor.c: 159:         setMotorPWM(mR);
  2570   001AD0  C016  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2571   001AD4  C017  F00F         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2572   001AD8  ECA1  F008         	call	_setMotorPWM	;wreg free
  2573   001ADC                     
  2574                           ;dc_motor.c: 160:         _delay((unsigned long)((400)*(64000000/4000000.0)));
  2575   001ADC  0E09               	movlw	9
  2576   001ADE  6E18               	movwf	??_fullSpeedAhead^0,c
  2577   001AE0  0E4E               	movlw	78
  2578   001AE2                     u2137:
  2579   001AE2  2EE8               	decfsz	wreg,f,c
  2580   001AE4  D7FE               	bra	u2137
  2581   001AE6  2E18               	decfsz	??_fullSpeedAhead^0,f,c
  2582   001AE8  D7FC               	bra	u2137
  2583   001AEA  D000               	nop2	
  2584   001AEC                     
  2585                           ;dc_motor.c: 161:     }
  2586   001AEC  4A19               	infsnz	fullSpeedAhead@i^0,f,c
  2587   001AEE  2A1A               	incf	(fullSpeedAhead@i+1)^0,f,c
  2588   001AF0  501A               	movf	(fullSpeedAhead@i+1)^0,w,c
  2589   001AF2  E109               	bnz	u1270
  2590   001AF4  0E32               	movlw	50
  2591   001AF6  5C19               	subwf	fullSpeedAhead@i^0,w,c
  2592   001AF8  A0D8               	btfss	status,0,c
  2593   001AFA  EF81  F00D         	goto	u1271
  2594   001AFE  EF83  F00D         	goto	u1270
  2595   001B02                     u1271:
  2596   001B02  EF58  F00D         	goto	l2411
  2597   001B06                     u1270:
  2598   001B06  0012               	return		;funcret
  2599   001B08                     __end_of_fullSpeedAhead:
  2600                           	callstack 0
  2601                           
  2602 ;; *************** function _Orange_R135 *****************
  2603 ;; Defined at:
  2604 ;;		line 311 in file "dc_motor.c"
  2605 ;; Parameters:    Size  Location     Type
  2606 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  2607 ;;		 -> motorL(9), 
  2608 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  2609 ;;		 -> motorR(9), 
  2610 ;; Auto vars:     Size  Location     Type
  2611 ;;		None
  2612 ;; Return value:  Size  Location     Type
  2613 ;;                  1    wreg      void 
  2614 ;; Registers used:
  2615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2616 ;; Tracked objects:
  2617 ;;		On entry : 0/0
  2618 ;;		On exit  : 0/0
  2619 ;;		Unchanged: 0/0
  2620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2621 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2624 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2625 ;;Total ram usage:        4 bytes
  2626 ;; Hardware stack levels used: 1
  2627 ;; Hardware stack levels required when called: 5
  2628 ;; This function calls:
  2629 ;;		_Left45
  2630 ;;		_Right45
  2631 ;;		_TimerReset
  2632 ;;		_reverseHalfSquare
  2633 ;; This function is called by:
  2634 ;;		_White
  2635 ;;		_Colour2Action
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639                           	psect	text16
  2640   001540                     __ptext16:
  2641                           	callstack 0
  2642   001540                     _Orange_R135:
  2643                           	callstack 24
  2644   001540                     
  2645                           ;dc_motor.c: 311: void Orange_R135(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c:
      +                           312: {;dc_motor.c: 313:     if (ForwardFlag){
  2646   001540  5058               	movf	_ForwardFlag^0,w,c	;volatile
  2647   001542  B4D8               	btfsc	status,2,c
  2648   001544  EFA6  F00A         	goto	u1351
  2649   001548  EFA8  F00A         	goto	u1350
  2650   00154C                     u1351:
  2651   00154C  EFD4  F00A         	goto	l2549
  2652   001550                     u1350:
  2653   001550                     
  2654                           ;dc_motor.c: 314:         reverseHalfSquare(mL,mR);
  2655   001550  C021  F01B         	movff	Orange_R135@mL,reverseHalfSquare@mL
  2656   001554  C022  F01C         	movff	Orange_R135@mL+1,reverseHalfSquare@mL+1
  2657   001558  C023  F01D         	movff	Orange_R135@mR,reverseHalfSquare@mR
  2658   00155C  C024  F01E         	movff	Orange_R135@mR+1,reverseHalfSquare@mR+1
  2659   001560  EC01  F00D         	call	_reverseHalfSquare	;wreg free
  2660                           
  2661                           ;dc_motor.c: 316:         Right45(mL,mR);
  2662   001564  C021  F01A         	movff	Orange_R135@mL,Right45@mL
  2663   001568  C022  F01B         	movff	Orange_R135@mL+1,Right45@mL+1
  2664   00156C  C023  F01C         	movff	Orange_R135@mR,Right45@mR
  2665   001570  C024  F01D         	movff	Orange_R135@mR+1,Right45@mR+1
  2666   001574  EC77  F00C         	call	_Right45	;wreg free
  2667                           
  2668                           ;dc_motor.c: 317:         Right45(mL,mR);
  2669   001578  C021  F01A         	movff	Orange_R135@mL,Right45@mL
  2670   00157C  C022  F01B         	movff	Orange_R135@mL+1,Right45@mL+1
  2671   001580  C023  F01C         	movff	Orange_R135@mR,Right45@mR
  2672   001584  C024  F01D         	movff	Orange_R135@mR+1,Right45@mR+1
  2673   001588  EC77  F00C         	call	_Right45	;wreg free
  2674                           
  2675                           ;dc_motor.c: 318:         Right45(mL,mR);
  2676   00158C  C021  F01A         	movff	Orange_R135@mL,Right45@mL
  2677   001590  C022  F01B         	movff	Orange_R135@mL+1,Right45@mL+1
  2678   001594  C023  F01C         	movff	Orange_R135@mR,Right45@mR
  2679   001598  C024  F01D         	movff	Orange_R135@mR+1,Right45@mR+1
  2680   00159C  EC77  F00C         	call	_Right45	;wreg free
  2681   0015A0                     
  2682                           ;dc_motor.c: 319:         TimerReset();
  2683   0015A0  ECE3  F00F         	call	_TimerReset	;wreg free
  2684                           
  2685                           ;dc_motor.c: 321:     }
  2686   0015A4  EFF2  F00A         	goto	l279
  2687   0015A8                     l2549:
  2688                           
  2689                           ;dc_motor.c: 324:         Left45(mL,mR);
  2690   0015A8  C021  F01A         	movff	Orange_R135@mL,Left45@mL
  2691   0015AC  C022  F01B         	movff	Orange_R135@mL+1,Left45@mL+1
  2692   0015B0  C023  F01C         	movff	Orange_R135@mR,Left45@mR
  2693   0015B4  C024  F01D         	movff	Orange_R135@mR+1,Left45@mR+1
  2694   0015B8  ECBC  F00C         	call	_Left45	;wreg free
  2695                           
  2696                           ;dc_motor.c: 325:         Left45(mL,mR);
  2697   0015BC  C021  F01A         	movff	Orange_R135@mL,Left45@mL
  2698   0015C0  C022  F01B         	movff	Orange_R135@mL+1,Left45@mL+1
  2699   0015C4  C023  F01C         	movff	Orange_R135@mR,Left45@mR
  2700   0015C8  C024  F01D         	movff	Orange_R135@mR+1,Left45@mR+1
  2701   0015CC  ECBC  F00C         	call	_Left45	;wreg free
  2702                           
  2703                           ;dc_motor.c: 326:         Left45(mL,mR);
  2704   0015D0  C021  F01A         	movff	Orange_R135@mL,Left45@mL
  2705   0015D4  C022  F01B         	movff	Orange_R135@mL+1,Left45@mL+1
  2706   0015D8  C023  F01C         	movff	Orange_R135@mR,Left45@mR
  2707   0015DC  C024  F01D         	movff	Orange_R135@mR+1,Left45@mR+1
  2708   0015E0  ECBC  F00C         	call	_Left45	;wreg free
  2709   0015E4                     l279:
  2710   0015E4  0012               	return		;funcret
  2711   0015E6                     __end_of_Orange_R135:
  2712                           	callstack 0
  2713                           
  2714 ;; *************** function _LightBlue_L135 *****************
  2715 ;; Defined at:
  2716 ;;		line 329 in file "dc_motor.c"
  2717 ;; Parameters:    Size  Location     Type
  2718 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  2719 ;;		 -> motorL(9), 
  2720 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  2721 ;;		 -> motorR(9), 
  2722 ;; Auto vars:     Size  Location     Type
  2723 ;;		None
  2724 ;; Return value:  Size  Location     Type
  2725 ;;                  1    wreg      void 
  2726 ;; Registers used:
  2727 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2728 ;; Tracked objects:
  2729 ;;		On entry : 0/0
  2730 ;;		On exit  : 0/0
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2733 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2736 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2737 ;;Total ram usage:        4 bytes
  2738 ;; Hardware stack levels used: 1
  2739 ;; Hardware stack levels required when called: 5
  2740 ;; This function calls:
  2741 ;;		_Left45
  2742 ;;		_Right45
  2743 ;;		_TimerReset
  2744 ;;		_reverseHalfSquare
  2745 ;; This function is called by:
  2746 ;;		_White
  2747 ;;		_Colour2Action
  2748 ;; This function uses a non-reentrant model
  2749 ;;
  2750                           
  2751                           	psect	text17
  2752   0015E6                     __ptext17:
  2753                           	callstack 0
  2754   0015E6                     _LightBlue_L135:
  2755                           	callstack 24
  2756   0015E6                     
  2757                           ;dc_motor.c: 329: void LightBlue_L135(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 330: {;dc_motor.c: 332:      if (ForwardFlag){
  2758   0015E6  5058               	movf	_ForwardFlag^0,w,c	;volatile
  2759   0015E8  B4D8               	btfsc	status,2,c
  2760   0015EA  EFF9  F00A         	goto	u1361
  2761   0015EE  EFFB  F00A         	goto	u1360
  2762   0015F2                     u1361:
  2763   0015F2  EF27  F00B         	goto	l2557
  2764   0015F6                     u1360:
  2765   0015F6                     
  2766                           ;dc_motor.c: 333:         reverseHalfSquare(mL,mR);
  2767   0015F6  C021  F01B         	movff	LightBlue_L135@mL,reverseHalfSquare@mL
  2768   0015FA  C022  F01C         	movff	LightBlue_L135@mL+1,reverseHalfSquare@mL+1
  2769   0015FE  C023  F01D         	movff	LightBlue_L135@mR,reverseHalfSquare@mR
  2770   001602  C024  F01E         	movff	LightBlue_L135@mR+1,reverseHalfSquare@mR+1
  2771   001606  EC01  F00D         	call	_reverseHalfSquare	;wreg free
  2772                           
  2773                           ;dc_motor.c: 335:         Left45(mL,mR);
  2774   00160A  C021  F01A         	movff	LightBlue_L135@mL,Left45@mL
  2775   00160E  C022  F01B         	movff	LightBlue_L135@mL+1,Left45@mL+1
  2776   001612  C023  F01C         	movff	LightBlue_L135@mR,Left45@mR
  2777   001616  C024  F01D         	movff	LightBlue_L135@mR+1,Left45@mR+1
  2778   00161A  ECBC  F00C         	call	_Left45	;wreg free
  2779                           
  2780                           ;dc_motor.c: 336:         Left45(mL,mR);
  2781   00161E  C021  F01A         	movff	LightBlue_L135@mL,Left45@mL
  2782   001622  C022  F01B         	movff	LightBlue_L135@mL+1,Left45@mL+1
  2783   001626  C023  F01C         	movff	LightBlue_L135@mR,Left45@mR
  2784   00162A  C024  F01D         	movff	LightBlue_L135@mR+1,Left45@mR+1
  2785   00162E  ECBC  F00C         	call	_Left45	;wreg free
  2786                           
  2787                           ;dc_motor.c: 337:         Left45(mL,mR);
  2788   001632  C021  F01A         	movff	LightBlue_L135@mL,Left45@mL
  2789   001636  C022  F01B         	movff	LightBlue_L135@mL+1,Left45@mL+1
  2790   00163A  C023  F01C         	movff	LightBlue_L135@mR,Left45@mR
  2791   00163E  C024  F01D         	movff	LightBlue_L135@mR+1,Left45@mR+1
  2792   001642  ECBC  F00C         	call	_Left45	;wreg free
  2793   001646                     
  2794                           ;dc_motor.c: 338:         TimerReset();
  2795   001646  ECE3  F00F         	call	_TimerReset	;wreg free
  2796                           
  2797                           ;dc_motor.c: 339:     }
  2798   00164A  EF45  F00B         	goto	l284
  2799   00164E                     l2557:
  2800                           
  2801                           ;dc_motor.c: 342:         Right45(mL,mR);
  2802   00164E  C021  F01A         	movff	LightBlue_L135@mL,Right45@mL
  2803   001652  C022  F01B         	movff	LightBlue_L135@mL+1,Right45@mL+1
  2804   001656  C023  F01C         	movff	LightBlue_L135@mR,Right45@mR
  2805   00165A  C024  F01D         	movff	LightBlue_L135@mR+1,Right45@mR+1
  2806   00165E  EC77  F00C         	call	_Right45	;wreg free
  2807                           
  2808                           ;dc_motor.c: 343:         Right45(mL,mR);
  2809   001662  C021  F01A         	movff	LightBlue_L135@mL,Right45@mL
  2810   001666  C022  F01B         	movff	LightBlue_L135@mL+1,Right45@mL+1
  2811   00166A  C023  F01C         	movff	LightBlue_L135@mR,Right45@mR
  2812   00166E  C024  F01D         	movff	LightBlue_L135@mR+1,Right45@mR+1
  2813   001672  EC77  F00C         	call	_Right45	;wreg free
  2814                           
  2815                           ;dc_motor.c: 344:         Right45(mL,mR);
  2816   001676  C021  F01A         	movff	LightBlue_L135@mL,Right45@mL
  2817   00167A  C022  F01B         	movff	LightBlue_L135@mL+1,Right45@mL+1
  2818   00167E  C023  F01C         	movff	LightBlue_L135@mR,Right45@mR
  2819   001682  C024  F01D         	movff	LightBlue_L135@mR+1,Right45@mR+1
  2820   001686  EC77  F00C         	call	_Right45	;wreg free
  2821   00168A                     l284:
  2822   00168A  0012               	return		;funcret
  2823   00168C                     __end_of_LightBlue_L135:
  2824                           	callstack 0
  2825                           
  2826 ;; *************** function _Green_L90 *****************
  2827 ;; Defined at:
  2828 ;;		line 241 in file "dc_motor.c"
  2829 ;; Parameters:    Size  Location     Type
  2830 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  2831 ;;		 -> motorL(9), 
  2832 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  2833 ;;		 -> motorR(9), 
  2834 ;; Auto vars:     Size  Location     Type
  2835 ;;		None
  2836 ;; Return value:  Size  Location     Type
  2837 ;;                  1    wreg      void 
  2838 ;; Registers used:
  2839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2840 ;; Tracked objects:
  2841 ;;		On entry : 0/0
  2842 ;;		On exit  : 0/0
  2843 ;;		Unchanged: 0/0
  2844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2845 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2848 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2849 ;;Total ram usage:        4 bytes
  2850 ;; Hardware stack levels used: 1
  2851 ;; Hardware stack levels required when called: 5
  2852 ;; This function calls:
  2853 ;;		_Left45
  2854 ;;		_Right45
  2855 ;;		_TimerReset
  2856 ;;		_reverseHalfSquare
  2857 ;; This function is called by:
  2858 ;;		_White
  2859 ;;		_Colour2Action
  2860 ;; This function uses a non-reentrant model
  2861 ;;
  2862                           
  2863                           	psect	text18
  2864   001C06                     __ptext18:
  2865                           	callstack 0
  2866   001C06                     _Green_L90:
  2867                           	callstack 24
  2868   001C06                     
  2869                           ;dc_motor.c: 241: void Green_L90(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 2
      +                          42: {;dc_motor.c: 243:     if (ForwardFlag){
  2870   001C06  5058               	movf	_ForwardFlag^0,w,c	;volatile
  2871   001C08  B4D8               	btfsc	status,2,c
  2872   001C0A  EF09  F00E         	goto	u1311
  2873   001C0E  EF0B  F00E         	goto	u1310
  2874   001C12                     u1311:
  2875   001C12  EF2D  F00E         	goto	l2495
  2876   001C16                     u1310:
  2877   001C16                     
  2878                           ;dc_motor.c: 244:         reverseHalfSquare(mL,mR);
  2879   001C16  C021  F01B         	movff	Green_L90@mL,reverseHalfSquare@mL
  2880   001C1A  C022  F01C         	movff	Green_L90@mL+1,reverseHalfSquare@mL+1
  2881   001C1E  C023  F01D         	movff	Green_L90@mR,reverseHalfSquare@mR
  2882   001C22  C024  F01E         	movff	Green_L90@mR+1,reverseHalfSquare@mR+1
  2883   001C26  EC01  F00D         	call	_reverseHalfSquare	;wreg free
  2884                           
  2885                           ;dc_motor.c: 246:         Left45(mL,mR);
  2886   001C2A  C021  F01A         	movff	Green_L90@mL,Left45@mL
  2887   001C2E  C022  F01B         	movff	Green_L90@mL+1,Left45@mL+1
  2888   001C32  C023  F01C         	movff	Green_L90@mR,Left45@mR
  2889   001C36  C024  F01D         	movff	Green_L90@mR+1,Left45@mR+1
  2890   001C3A  ECBC  F00C         	call	_Left45	;wreg free
  2891                           
  2892                           ;dc_motor.c: 247:         Left45(mL,mR);
  2893   001C3E  C021  F01A         	movff	Green_L90@mL,Left45@mL
  2894   001C42  C022  F01B         	movff	Green_L90@mL+1,Left45@mL+1
  2895   001C46  C023  F01C         	movff	Green_L90@mR,Left45@mR
  2896   001C4A  C024  F01D         	movff	Green_L90@mR+1,Left45@mR+1
  2897   001C4E  ECBC  F00C         	call	_Left45	;wreg free
  2898   001C52                     
  2899                           ;dc_motor.c: 248:         TimerReset();
  2900   001C52  ECE3  F00F         	call	_TimerReset	;wreg free
  2901                           
  2902                           ;dc_motor.c: 249:     }
  2903   001C56  EF41  F00E         	goto	l259
  2904   001C5A                     l2495:
  2905                           
  2906                           ;dc_motor.c: 252:         Right45(mL,mR);
  2907   001C5A  C021  F01A         	movff	Green_L90@mL,Right45@mL
  2908   001C5E  C022  F01B         	movff	Green_L90@mL+1,Right45@mL+1
  2909   001C62  C023  F01C         	movff	Green_L90@mR,Right45@mR
  2910   001C66  C024  F01D         	movff	Green_L90@mR+1,Right45@mR+1
  2911   001C6A  EC77  F00C         	call	_Right45	;wreg free
  2912                           
  2913                           ;dc_motor.c: 253:         Right45(mL,mR);
  2914   001C6E  C021  F01A         	movff	Green_L90@mL,Right45@mL
  2915   001C72  C022  F01B         	movff	Green_L90@mL+1,Right45@mL+1
  2916   001C76  C023  F01C         	movff	Green_L90@mR,Right45@mR
  2917   001C7A  C024  F01D         	movff	Green_L90@mR+1,Right45@mR+1
  2918   001C7E  EC77  F00C         	call	_Right45	;wreg free
  2919   001C82                     l259:
  2920   001C82  0012               	return		;funcret
  2921   001C84                     __end_of_Green_L90:
  2922                           	callstack 0
  2923                           
  2924 ;; *************** function _Right45 *****************
  2925 ;; Defined at:
  2926 ;;		line 193 in file "dc_motor.c"
  2927 ;; Parameters:    Size  Location     Type
  2928 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  2929 ;;		 -> motorL(9), 
  2930 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  2931 ;;		 -> motorR(9), 
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;		None
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  1    wreg      void 
  2936 ;; Registers used:
  2937 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2943 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2945 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2946 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2947 ;;Total ram usage:        6 bytes
  2948 ;; Hardware stack levels used: 1
  2949 ;; Hardware stack levels required when called: 4
  2950 ;; This function calls:
  2951 ;;		_stop
  2952 ;;		_turnRight
  2953 ;; This function is called by:
  2954 ;;		_Red_R90
  2955 ;;		_Green_L90
  2956 ;;		_Yellow_rev1_R90
  2957 ;;		_Pink_rev1_L90
  2958 ;;		_Orange_R135
  2959 ;;		_LightBlue_L135
  2960 ;; This function uses a non-reentrant model
  2961 ;;
  2962                           
  2963                           	psect	text19
  2964   0018EE                     __ptext19:
  2965                           	callstack 0
  2966   0018EE                     _Right45:
  2967                           	callstack 24
  2968   0018EE                     
  2969                           ;dc_motor.c: 193: void Right45(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 194
      +                          : {;dc_motor.c: 195:     LATHbits.LATH0 = 1;;
  2970   0018EE  8080               	bsf	128,0,c	;volatile
  2971   0018F0                     
  2972                           ;dc_motor.c: 197:     stop(mL,mR);
  2973   0018F0  C01A  F014         	movff	Right45@mL,stop@mL
  2974   0018F4  C01B  F015         	movff	Right45@mL+1,stop@mL+1
  2975   0018F8  C01C  F016         	movff	Right45@mR,stop@mR
  2976   0018FC  C01D  F017         	movff	Right45@mR+1,stop@mR+1
  2977   001900  EC46  F00B         	call	_stop	;wreg free
  2978   001904                     
  2979                           ;dc_motor.c: 198:     _delay((unsigned long)((50)*(64000000/4000.0)));
  2980   001904  0E05               	movlw	5
  2981   001906  6E1F               	movwf	(??_Right45+1)^0,c
  2982   001908  0E0F               	movlw	15
  2983   00190A  6E1E               	movwf	??_Right45^0,c
  2984   00190C  0EF1               	movlw	241
  2985   00190E                     u2147:
  2986   00190E  2EE8               	decfsz	wreg,f,c
  2987   001910  D7FE               	bra	u2147
  2988   001912  2E1E               	decfsz	??_Right45^0,f,c
  2989   001914  D7FC               	bra	u2147
  2990   001916  2E1F               	decfsz	(??_Right45+1)^0,f,c
  2991   001918  D7FA               	bra	u2147
  2992   00191A  F000               	nop	
  2993   00191C                     
  2994                           ;dc_motor.c: 199:     turnRight(mL,mR);
  2995   00191C  C01A  F014         	movff	Right45@mL,turnRight@mL
  2996   001920  C01B  F015         	movff	Right45@mL+1,turnRight@mL+1
  2997   001924  C01C  F016         	movff	Right45@mR,turnRight@mR
  2998   001928  C01D  F017         	movff	Right45@mR+1,turnRight@mR+1
  2999   00192C  EC99  F00B         	call	_turnRight	;wreg free
  3000                           
  3001                           ;dc_motor.c: 200:     _delay((unsigned long)((_45drightdelay)*(64000000/4000.0)));
  3002   001930  0E0E               	movlw	14
  3003   001932  6E1F               	movwf	(??_Right45+1)^0,c
  3004   001934  0ECD               	movlw	205
  3005   001936  6E1E               	movwf	??_Right45^0,c
  3006   001938  0E6C               	movlw	108
  3007   00193A                     u2157:
  3008   00193A  2EE8               	decfsz	wreg,f,c
  3009   00193C  D7FE               	bra	u2157
  3010   00193E  2E1E               	decfsz	??_Right45^0,f,c
  3011   001940  D7FC               	bra	u2157
  3012   001942  2E1F               	decfsz	(??_Right45+1)^0,f,c
  3013   001944  D7FA               	bra	u2157
  3014   001946  D000               	nop2	
  3015   001948                     
  3016                           ;dc_motor.c: 201:     stop(mL,mR);
  3017   001948  C01A  F014         	movff	Right45@mL,stop@mL
  3018   00194C  C01B  F015         	movff	Right45@mL+1,stop@mL+1
  3019   001950  C01C  F016         	movff	Right45@mR,stop@mR
  3020   001954  C01D  F017         	movff	Right45@mR+1,stop@mR+1
  3021   001958  EC46  F00B         	call	_stop	;wreg free
  3022   00195C                     
  3023                           ;dc_motor.c: 202:     _delay((unsigned long)((50)*(64000000/4000.0)));
  3024   00195C  0E05               	movlw	5
  3025   00195E  6E1F               	movwf	(??_Right45+1)^0,c
  3026   001960  0E0F               	movlw	15
  3027   001962  6E1E               	movwf	??_Right45^0,c
  3028   001964  0EF1               	movlw	241
  3029   001966                     u2167:
  3030   001966  2EE8               	decfsz	wreg,f,c
  3031   001968  D7FE               	bra	u2167
  3032   00196A  2E1E               	decfsz	??_Right45^0,f,c
  3033   00196C  D7FC               	bra	u2167
  3034   00196E  2E1F               	decfsz	(??_Right45+1)^0,f,c
  3035   001970  D7FA               	bra	u2167
  3036   001972  F000               	nop	
  3037   001974                     
  3038                           ;dc_motor.c: 203:     LATHbits.LATH0 = 0;;
  3039   001974  9080               	bcf	128,0,c	;volatile
  3040   001976  0012               	return		;funcret
  3041   001978                     __end_of_Right45:
  3042                           	callstack 0
  3043                           
  3044 ;; *************** function _turnRight *****************
  3045 ;; Defined at:
  3046 ;;		line 132 in file "dc_motor.c"
  3047 ;; Parameters:    Size  Location     Type
  3048 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  3049 ;;		 -> motorL(9), 
  3050 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  3051 ;;		 -> motorR(9), 
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;  i               2   23[COMRAM] unsigned int 
  3054 ;; Return value:  Size  Location     Type
  3055 ;;                  1    wreg      void 
  3056 ;; Registers used:
  3057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3063 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3064 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3066 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3067 ;;Total ram usage:        6 bytes
  3068 ;; Hardware stack levels used: 1
  3069 ;; Hardware stack levels required when called: 3
  3070 ;; This function calls:
  3071 ;;		_setMotorPWM
  3072 ;; This function is called by:
  3073 ;;		_Right45
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           	psect	text20
  3078   001732                     __ptext20:
  3079                           	callstack 0
  3080   001732                     _turnRight:
  3081                           	callstack 24
  3082   001732                     
  3083                           ;dc_motor.c: 132: void turnRight(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 1
      +                          33: {;dc_motor.c: 134:     (mL->direction) = 0;
  3084   001732  EE20 F001          	lfsr	2,1
  3085   001736  5014               	movf	turnRight@mL^0,w,c
  3086   001738  26D9               	addwf	fsr2l,f,c
  3087   00173A  5015               	movf	(turnRight@mL+1)^0,w,c
  3088   00173C  22DA               	addwfc	fsr2h,f,c
  3089   00173E  0E00               	movlw	0
  3090   001740  6EDF               	movwf	indf2,c
  3091                           
  3092                           ;dc_motor.c: 135:     (mR->direction) = 1;
  3093   001742  EE20 F001          	lfsr	2,1
  3094   001746  5016               	movf	turnRight@mR^0,w,c
  3095   001748  26D9               	addwf	fsr2l,f,c
  3096   00174A  5017               	movf	(turnRight@mR+1)^0,w,c
  3097   00174C  22DA               	addwfc	fsr2h,f,c
  3098   00174E  0E01               	movlw	1
  3099   001750  6EDF               	movwf	indf2,c
  3100   001752                     
  3101                           ;dc_motor.c: 136:     setMotorPWM(mL);
  3102   001752  C014  F00E         	movff	turnRight@mL,setMotorPWM@m
  3103   001756  C015  F00F         	movff	turnRight@mL+1,setMotorPWM@m+1
  3104   00175A  ECA1  F008         	call	_setMotorPWM	;wreg free
  3105   00175E                     
  3106                           ;dc_motor.c: 137:     setMotorPWM(mR);
  3107   00175E  C016  F00E         	movff	turnRight@mR,setMotorPWM@m
  3108   001762  C017  F00F         	movff	turnRight@mR+1,setMotorPWM@m+1
  3109   001766  ECA1  F008         	call	_setMotorPWM	;wreg free
  3110   00176A                     
  3111                           ;dc_motor.c: 138:     for (unsigned int i = 0; i <50; i++)
  3112   00176A  0E00               	movlw	0
  3113   00176C  6E19               	movwf	(turnRight@i+1)^0,c
  3114   00176E  0E00               	movlw	0
  3115   001770  6E18               	movwf	turnRight@i^0,c
  3116   001772                     l2345:
  3117                           
  3118                           ;dc_motor.c: 139:     {;dc_motor.c: 140:         mL->power++;
  3119   001772  C014  FFD9         	movff	turnRight@mL,fsr2l
  3120   001776  C015  FFDA         	movff	turnRight@mL+1,fsr2h
  3121   00177A  2ADF               	incf	indf2,f,c
  3122                           
  3123                           ;dc_motor.c: 141:         mR->power++;
  3124   00177C  C016  FFD9         	movff	turnRight@mR,fsr2l
  3125   001780  C017  FFDA         	movff	turnRight@mR+1,fsr2h
  3126   001784  2ADF               	incf	indf2,f,c
  3127   001786                     
  3128                           ;dc_motor.c: 142:         setMotorPWM(mL);
  3129   001786  C014  F00E         	movff	turnRight@mL,setMotorPWM@m
  3130   00178A  C015  F00F         	movff	turnRight@mL+1,setMotorPWM@m+1
  3131   00178E  ECA1  F008         	call	_setMotorPWM	;wreg free
  3132   001792                     
  3133                           ;dc_motor.c: 143:         setMotorPWM(mR);
  3134   001792  C016  F00E         	movff	turnRight@mR,setMotorPWM@m
  3135   001796  C017  F00F         	movff	turnRight@mR+1,setMotorPWM@m+1
  3136   00179A  ECA1  F008         	call	_setMotorPWM	;wreg free
  3137   00179E                     
  3138                           ;dc_motor.c: 144:         _delay((unsigned long)((100)*(64000000/4000000.0)));
  3139   00179E  0EE4               	movlw	228
  3140   0017A0                     u2177:
  3141   0017A0  D000               	nop2	
  3142   0017A2  D000               	nop2	
  3143   0017A4  2EE8               	decfsz	wreg,f,c
  3144   0017A6  D7FC               	bra	u2177
  3145   0017A8  D000               	nop2	
  3146   0017AA  D000               	nop2	
  3147   0017AC                     
  3148                           ;dc_motor.c: 145:     }
  3149   0017AC  4A18               	infsnz	turnRight@i^0,f,c
  3150   0017AE  2A19               	incf	(turnRight@i+1)^0,f,c
  3151   0017B0  5019               	movf	(turnRight@i+1)^0,w,c
  3152   0017B2  E109               	bnz	u1250
  3153   0017B4  0E32               	movlw	50
  3154   0017B6  5C18               	subwf	turnRight@i^0,w,c
  3155   0017B8  A0D8               	btfss	status,0,c
  3156   0017BA  EFE1  F00B         	goto	u1251
  3157   0017BE  EFE3  F00B         	goto	u1250
  3158   0017C2                     u1251:
  3159   0017C2  EFB9  F00B         	goto	l2345
  3160   0017C6                     u1250:
  3161   0017C6  0012               	return		;funcret
  3162   0017C8                     __end_of_turnRight:
  3163                           	callstack 0
  3164                           
  3165 ;; *************** function _Blue_T180 *****************
  3166 ;; Defined at:
  3167 ;;		line 257 in file "dc_motor.c"
  3168 ;; Parameters:    Size  Location     Type
  3169 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  3170 ;;		 -> motorL(9), 
  3171 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  3172 ;;		 -> motorR(9), 
  3173 ;; Auto vars:     Size  Location     Type
  3174 ;;		None
  3175 ;; Return value:  Size  Location     Type
  3176 ;;                  1    wreg      void 
  3177 ;; Registers used:
  3178 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3179 ;; Tracked objects:
  3180 ;;		On entry : 0/0
  3181 ;;		On exit  : 0/0
  3182 ;;		Unchanged: 0/0
  3183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3184 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3187 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3188 ;;Total ram usage:        4 bytes
  3189 ;; Hardware stack levels used: 1
  3190 ;; Hardware stack levels required when called: 6
  3191 ;; This function calls:
  3192 ;;		_TimerReset
  3193 ;;		_reverseHalfSquare
  3194 ;;		_rotate180left
  3195 ;; This function is called by:
  3196 ;;		_White
  3197 ;;		_Colour2Action
  3198 ;; This function uses a non-reentrant model
  3199 ;;
  3200                           
  3201                           	psect	text21
  3202   001D62                     __ptext21:
  3203                           	callstack 0
  3204   001D62                     _Blue_T180:
  3205                           	callstack 23
  3206   001D62                     
  3207                           ;dc_motor.c: 257: void Blue_T180(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 2
      +                          58: {;dc_motor.c: 259:     if (ForwardFlag){
  3208   001D62  5058               	movf	_ForwardFlag^0,w,c	;volatile
  3209   001D64  B4D8               	btfsc	status,2,c
  3210   001D66  EFB7  F00E         	goto	u1321
  3211   001D6A  EFB9  F00E         	goto	u1320
  3212   001D6E                     u1321:
  3213   001D6E  EFD1  F00E         	goto	l2503
  3214   001D72                     u1320:
  3215   001D72                     
  3216                           ;dc_motor.c: 260:     reverseHalfSquare(mL,mR);
  3217   001D72  C024  F01B         	movff	Blue_T180@mL,reverseHalfSquare@mL
  3218   001D76  C025  F01C         	movff	Blue_T180@mL+1,reverseHalfSquare@mL+1
  3219   001D7A  C026  F01D         	movff	Blue_T180@mR,reverseHalfSquare@mR
  3220   001D7E  C027  F01E         	movff	Blue_T180@mR+1,reverseHalfSquare@mR+1
  3221   001D82  EC01  F00D         	call	_reverseHalfSquare	;wreg free
  3222                           
  3223                           ;dc_motor.c: 262:     rotate180left(mL,mR);
  3224   001D86  C024  F020         	movff	Blue_T180@mL,rotate180left@mL
  3225   001D8A  C025  F021         	movff	Blue_T180@mL+1,rotate180left@mL+1
  3226   001D8E  C026  F022         	movff	Blue_T180@mR,rotate180left@mR
  3227   001D92  C027  F023         	movff	Blue_T180@mR+1,rotate180left@mR+1
  3228   001D96  ECDC  F00E         	call	_rotate180left	;wreg free
  3229   001D9A                     
  3230                           ;dc_motor.c: 263:     TimerReset();
  3231   001D9A  ECE3  F00F         	call	_TimerReset	;wreg free
  3232                           
  3233                           ;dc_motor.c: 264:     }else{
  3234   001D9E  EFDB  F00E         	goto	l264
  3235   001DA2                     l2503:
  3236                           
  3237                           ;dc_motor.c: 265:     rotate180left(mL,mR);
  3238   001DA2  C024  F020         	movff	Blue_T180@mL,rotate180left@mL
  3239   001DA6  C025  F021         	movff	Blue_T180@mL+1,rotate180left@mL+1
  3240   001DAA  C026  F022         	movff	Blue_T180@mR,rotate180left@mR
  3241   001DAE  C027  F023         	movff	Blue_T180@mR+1,rotate180left@mR+1
  3242   001DB2  ECDC  F00E         	call	_rotate180left	;wreg free
  3243   001DB6                     l264:
  3244   001DB6  0012               	return		;funcret
  3245   001DB8                     __end_of_Blue_T180:
  3246                           	callstack 0
  3247                           
  3248 ;; *************** function _rotate180left *****************
  3249 ;; Defined at:
  3250 ;;		line 207 in file "dc_motor.c"
  3251 ;; Parameters:    Size  Location     Type
  3252 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  3253 ;;		 -> motorL(9), 
  3254 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  3255 ;;		 -> motorR(9), 
  3256 ;; Auto vars:     Size  Location     Type
  3257 ;;		None
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  1    wreg      void 
  3260 ;; Registers used:
  3261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3267 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3270 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3271 ;;Total ram usage:        4 bytes
  3272 ;; Hardware stack levels used: 1
  3273 ;; Hardware stack levels required when called: 5
  3274 ;; This function calls:
  3275 ;;		_Left45
  3276 ;; This function is called by:
  3277 ;;		_Blue_T180
  3278 ;;		_White
  3279 ;; This function uses a non-reentrant model
  3280 ;;
  3281                           
  3282                           	psect	text22
  3283   001DB8                     __ptext22:
  3284                           	callstack 0
  3285   001DB8                     _rotate180left:
  3286                           	callstack 24
  3287   001DB8                     
  3288                           ;dc_motor.c: 207: void rotate180left(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 208: {;dc_motor.c: 210:     Left45(mL,mR);
  3289   001DB8  C020  F01A         	movff	rotate180left@mL,Left45@mL
  3290   001DBC  C021  F01B         	movff	rotate180left@mL+1,Left45@mL+1
  3291   001DC0  C022  F01C         	movff	rotate180left@mR,Left45@mR
  3292   001DC4  C023  F01D         	movff	rotate180left@mR+1,Left45@mR+1
  3293   001DC8  ECBC  F00C         	call	_Left45	;wreg free
  3294                           
  3295                           ;dc_motor.c: 211:     Left45(mL,mR);
  3296   001DCC  C020  F01A         	movff	rotate180left@mL,Left45@mL
  3297   001DD0  C021  F01B         	movff	rotate180left@mL+1,Left45@mL+1
  3298   001DD4  C022  F01C         	movff	rotate180left@mR,Left45@mR
  3299   001DD8  C023  F01D         	movff	rotate180left@mR+1,Left45@mR+1
  3300   001DDC  ECBC  F00C         	call	_Left45	;wreg free
  3301                           
  3302                           ;dc_motor.c: 212:     Left45(mL,mR);
  3303   001DE0  C020  F01A         	movff	rotate180left@mL,Left45@mL
  3304   001DE4  C021  F01B         	movff	rotate180left@mL+1,Left45@mL+1
  3305   001DE8  C022  F01C         	movff	rotate180left@mR,Left45@mR
  3306   001DEC  C023  F01D         	movff	rotate180left@mR+1,Left45@mR+1
  3307   001DF0  ECBC  F00C         	call	_Left45	;wreg free
  3308                           
  3309                           ;dc_motor.c: 213:     Left45(mL,mR);
  3310   001DF4  C020  F01A         	movff	rotate180left@mL,Left45@mL
  3311   001DF8  C021  F01B         	movff	rotate180left@mL+1,Left45@mL+1
  3312   001DFC  C022  F01C         	movff	rotate180left@mR,Left45@mR
  3313   001E00  C023  F01D         	movff	rotate180left@mR+1,Left45@mR+1
  3314   001E04  ECBC  F00C         	call	_Left45	;wreg free
  3315   001E08  0012               	return		;funcret
  3316   001E0A                     __end_of_rotate180left:
  3317                           	callstack 0
  3318                           
  3319 ;; *************** function _Left45 *****************
  3320 ;; Defined at:
  3321 ;;		line 179 in file "dc_motor.c"
  3322 ;; Parameters:    Size  Location     Type
  3323 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3324 ;;		 -> motorL(9), 
  3325 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3326 ;;		 -> motorR(9), 
  3327 ;; Auto vars:     Size  Location     Type
  3328 ;;		None
  3329 ;; Return value:  Size  Location     Type
  3330 ;;                  1    wreg      void 
  3331 ;; Registers used:
  3332 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3333 ;; Tracked objects:
  3334 ;;		On entry : 0/0
  3335 ;;		On exit  : 0/0
  3336 ;;		Unchanged: 0/0
  3337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3338 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3340 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3341 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3342 ;;Total ram usage:        6 bytes
  3343 ;; Hardware stack levels used: 1
  3344 ;; Hardware stack levels required when called: 4
  3345 ;; This function calls:
  3346 ;;		_stop
  3347 ;;		_turnLeft
  3348 ;; This function is called by:
  3349 ;;		_rotate180left
  3350 ;;		_Red_R90
  3351 ;;		_Green_L90
  3352 ;;		_Yellow_rev1_R90
  3353 ;;		_Pink_rev1_L90
  3354 ;;		_Orange_R135
  3355 ;;		_LightBlue_L135
  3356 ;; This function uses a non-reentrant model
  3357 ;;
  3358                           
  3359                           	psect	text23
  3360   001978                     __ptext23:
  3361                           	callstack 0
  3362   001978                     _Left45:
  3363                           	callstack 24
  3364   001978                     
  3365                           ;dc_motor.c: 179: void Left45(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 180:
      +                           {;dc_motor.c: 181:     LATFbits.LATF0 = 1;;
  3366   001978  807E               	bsf	126,0,c	;volatile
  3367   00197A                     
  3368                           ;dc_motor.c: 183:     stop(mL,mR);
  3369   00197A  C01A  F014         	movff	Left45@mL,stop@mL
  3370   00197E  C01B  F015         	movff	Left45@mL+1,stop@mL+1
  3371   001982  C01C  F016         	movff	Left45@mR,stop@mR
  3372   001986  C01D  F017         	movff	Left45@mR+1,stop@mR+1
  3373   00198A  EC46  F00B         	call	_stop	;wreg free
  3374   00198E                     
  3375                           ;dc_motor.c: 184:     _delay((unsigned long)((50)*(64000000/4000.0)));
  3376   00198E  0E05               	movlw	5
  3377   001990  6E1F               	movwf	(??_Left45+1)^0,c
  3378   001992  0E0F               	movlw	15
  3379   001994  6E1E               	movwf	??_Left45^0,c
  3380   001996  0EF1               	movlw	241
  3381   001998                     u2187:
  3382   001998  2EE8               	decfsz	wreg,f,c
  3383   00199A  D7FE               	bra	u2187
  3384   00199C  2E1E               	decfsz	??_Left45^0,f,c
  3385   00199E  D7FC               	bra	u2187
  3386   0019A0  2E1F               	decfsz	(??_Left45+1)^0,f,c
  3387   0019A2  D7FA               	bra	u2187
  3388   0019A4  F000               	nop	
  3389   0019A6                     
  3390                           ;dc_motor.c: 185:     turnLeft(mL,mR);
  3391   0019A6  C01A  F014         	movff	Left45@mL,turnLeft@mL
  3392   0019AA  C01B  F015         	movff	Left45@mL+1,turnLeft@mL+1
  3393   0019AE  C01C  F016         	movff	Left45@mR,turnLeft@mR
  3394   0019B2  C01D  F017         	movff	Left45@mR+1,turnLeft@mR+1
  3395   0019B6  ECE4  F00B         	call	_turnLeft	;wreg free
  3396                           
  3397                           ;dc_motor.c: 186:     _delay((unsigned long)((_45dleftdelay)*(64000000/4000.0)));
  3398   0019BA  0E0E               	movlw	14
  3399   0019BC  6E1F               	movwf	(??_Left45+1)^0,c
  3400   0019BE  0ECD               	movlw	205
  3401   0019C0  6E1E               	movwf	??_Left45^0,c
  3402   0019C2  0E6C               	movlw	108
  3403   0019C4                     u2197:
  3404   0019C4  2EE8               	decfsz	wreg,f,c
  3405   0019C6  D7FE               	bra	u2197
  3406   0019C8  2E1E               	decfsz	??_Left45^0,f,c
  3407   0019CA  D7FC               	bra	u2197
  3408   0019CC  2E1F               	decfsz	(??_Left45+1)^0,f,c
  3409   0019CE  D7FA               	bra	u2197
  3410   0019D0  D000               	nop2	
  3411   0019D2                     
  3412                           ;dc_motor.c: 187:     stop(mL,mR);
  3413   0019D2  C01A  F014         	movff	Left45@mL,stop@mL
  3414   0019D6  C01B  F015         	movff	Left45@mL+1,stop@mL+1
  3415   0019DA  C01C  F016         	movff	Left45@mR,stop@mR
  3416   0019DE  C01D  F017         	movff	Left45@mR+1,stop@mR+1
  3417   0019E2  EC46  F00B         	call	_stop	;wreg free
  3418   0019E6                     
  3419                           ;dc_motor.c: 188:     _delay((unsigned long)((50)*(64000000/4000.0)));
  3420   0019E6  0E05               	movlw	5
  3421   0019E8  6E1F               	movwf	(??_Left45+1)^0,c
  3422   0019EA  0E0F               	movlw	15
  3423   0019EC  6E1E               	movwf	??_Left45^0,c
  3424   0019EE  0EF1               	movlw	241
  3425   0019F0                     u2207:
  3426   0019F0  2EE8               	decfsz	wreg,f,c
  3427   0019F2  D7FE               	bra	u2207
  3428   0019F4  2E1E               	decfsz	??_Left45^0,f,c
  3429   0019F6  D7FC               	bra	u2207
  3430   0019F8  2E1F               	decfsz	(??_Left45+1)^0,f,c
  3431   0019FA  D7FA               	bra	u2207
  3432   0019FC  F000               	nop	
  3433   0019FE                     
  3434                           ;dc_motor.c: 189:     LATFbits.LATF0 = 0;;
  3435   0019FE  907E               	bcf	126,0,c	;volatile
  3436   001A00  0012               	return		;funcret
  3437   001A02                     __end_of_Left45:
  3438                           	callstack 0
  3439                           
  3440 ;; *************** function _turnLeft *****************
  3441 ;; Defined at:
  3442 ;;		line 113 in file "dc_motor.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  3445 ;;		 -> motorL(9), 
  3446 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  3447 ;;		 -> motorR(9), 
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;  i               2   23[COMRAM] unsigned int 
  3450 ;; Return value:  Size  Location     Type
  3451 ;;                  1    wreg      void 
  3452 ;; Registers used:
  3453 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3454 ;; Tracked objects:
  3455 ;;		On entry : 0/0
  3456 ;;		On exit  : 0/0
  3457 ;;		Unchanged: 0/0
  3458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3459 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3460 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3462 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3463 ;;Total ram usage:        6 bytes
  3464 ;; Hardware stack levels used: 1
  3465 ;; Hardware stack levels required when called: 3
  3466 ;; This function calls:
  3467 ;;		_setMotorPWM
  3468 ;; This function is called by:
  3469 ;;		_Left45
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           	psect	text24
  3474   0017C8                     __ptext24:
  3475                           	callstack 0
  3476   0017C8                     _turnLeft:
  3477                           	callstack 24
  3478   0017C8                     
  3479                           ;dc_motor.c: 113: void turnLeft(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 11
      +                          4: {;dc_motor.c: 116:     (mL->direction) = 1;
  3480   0017C8  EE20 F001          	lfsr	2,1
  3481   0017CC  5014               	movf	turnLeft@mL^0,w,c
  3482   0017CE  26D9               	addwf	fsr2l,f,c
  3483   0017D0  5015               	movf	(turnLeft@mL+1)^0,w,c
  3484   0017D2  22DA               	addwfc	fsr2h,f,c
  3485   0017D4  0E01               	movlw	1
  3486   0017D6  6EDF               	movwf	indf2,c
  3487                           
  3488                           ;dc_motor.c: 117:     (mR->direction) = 0;
  3489   0017D8  EE20 F001          	lfsr	2,1
  3490   0017DC  5016               	movf	turnLeft@mR^0,w,c
  3491   0017DE  26D9               	addwf	fsr2l,f,c
  3492   0017E0  5017               	movf	(turnLeft@mR+1)^0,w,c
  3493   0017E2  22DA               	addwfc	fsr2h,f,c
  3494   0017E4  0E00               	movlw	0
  3495   0017E6  6EDF               	movwf	indf2,c
  3496   0017E8                     
  3497                           ;dc_motor.c: 118:     setMotorPWM(mL);
  3498   0017E8  C014  F00E         	movff	turnLeft@mL,setMotorPWM@m
  3499   0017EC  C015  F00F         	movff	turnLeft@mL+1,setMotorPWM@m+1
  3500   0017F0  ECA1  F008         	call	_setMotorPWM	;wreg free
  3501   0017F4                     
  3502                           ;dc_motor.c: 119:     setMotorPWM(mR);
  3503   0017F4  C016  F00E         	movff	turnLeft@mR,setMotorPWM@m
  3504   0017F8  C017  F00F         	movff	turnLeft@mR+1,setMotorPWM@m+1
  3505   0017FC  ECA1  F008         	call	_setMotorPWM	;wreg free
  3506   001800                     
  3507                           ;dc_motor.c: 120:     for (unsigned int i = 0; i <50; i++)
  3508   001800  0E00               	movlw	0
  3509   001802  6E19               	movwf	(turnLeft@i+1)^0,c
  3510   001804  0E00               	movlw	0
  3511   001806  6E18               	movwf	turnLeft@i^0,c
  3512   001808                     l2317:
  3513                           
  3514                           ;dc_motor.c: 121:     {;dc_motor.c: 122:         mL->power++;
  3515   001808  C014  FFD9         	movff	turnLeft@mL,fsr2l
  3516   00180C  C015  FFDA         	movff	turnLeft@mL+1,fsr2h
  3517   001810  2ADF               	incf	indf2,f,c
  3518                           
  3519                           ;dc_motor.c: 123:         mR->power++;
  3520   001812  C016  FFD9         	movff	turnLeft@mR,fsr2l
  3521   001816  C017  FFDA         	movff	turnLeft@mR+1,fsr2h
  3522   00181A  2ADF               	incf	indf2,f,c
  3523   00181C                     
  3524                           ;dc_motor.c: 124:         setMotorPWM(mL);
  3525   00181C  C014  F00E         	movff	turnLeft@mL,setMotorPWM@m
  3526   001820  C015  F00F         	movff	turnLeft@mL+1,setMotorPWM@m+1
  3527   001824  ECA1  F008         	call	_setMotorPWM	;wreg free
  3528   001828                     
  3529                           ;dc_motor.c: 125:         setMotorPWM(mR);
  3530   001828  C016  F00E         	movff	turnLeft@mR,setMotorPWM@m
  3531   00182C  C017  F00F         	movff	turnLeft@mR+1,setMotorPWM@m+1
  3532   001830  ECA1  F008         	call	_setMotorPWM	;wreg free
  3533   001834                     
  3534                           ;dc_motor.c: 126:         _delay((unsigned long)((100)*(64000000/4000000.0)));
  3535   001834  0EE4               	movlw	228
  3536   001836                     u2217:
  3537   001836  D000               	nop2	
  3538   001838  D000               	nop2	
  3539   00183A  2EE8               	decfsz	wreg,f,c
  3540   00183C  D7FC               	bra	u2217
  3541   00183E  D000               	nop2	
  3542   001840  D000               	nop2	
  3543   001842                     
  3544                           ;dc_motor.c: 127:     }
  3545   001842  4A18               	infsnz	turnLeft@i^0,f,c
  3546   001844  2A19               	incf	(turnLeft@i+1)^0,f,c
  3547   001846  5019               	movf	(turnLeft@i+1)^0,w,c
  3548   001848  E109               	bnz	u1220
  3549   00184A  0E32               	movlw	50
  3550   00184C  5C18               	subwf	turnLeft@i^0,w,c
  3551   00184E  A0D8               	btfss	status,0,c
  3552   001850  EF2C  F00C         	goto	u1221
  3553   001854  EF2E  F00C         	goto	u1220
  3554   001858                     u1221:
  3555   001858  EF04  F00C         	goto	l2317
  3556   00185C                     u1220:
  3557   00185C  0012               	return		;funcret
  3558   00185E                     __end_of_turnLeft:
  3559                           	callstack 0
  3560                           
  3561 ;; *************** function _reverseHalfSquare *****************
  3562 ;; Defined at:
  3563 ;;		line 216 in file "dc_motor.c"
  3564 ;; Parameters:    Size  Location     Type
  3565 ;;  mL              2   26[COMRAM] PTR struct DC_motor
  3566 ;;		 -> motorL(9), 
  3567 ;;  mR              2   28[COMRAM] PTR struct DC_motor
  3568 ;;		 -> motorR(9), 
  3569 ;; Auto vars:     Size  Location     Type
  3570 ;;		None
  3571 ;; Return value:  Size  Location     Type
  3572 ;;                  1    wreg      void 
  3573 ;; Registers used:
  3574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3575 ;; Tracked objects:
  3576 ;;		On entry : 0/0
  3577 ;;		On exit  : 0/0
  3578 ;;		Unchanged: 0/0
  3579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3580 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3582 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3583 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3584 ;;Total ram usage:        6 bytes
  3585 ;; Hardware stack levels used: 1
  3586 ;; Hardware stack levels required when called: 4
  3587 ;; This function calls:
  3588 ;;		_fullSpeedReverse
  3589 ;;		_stop
  3590 ;; This function is called by:
  3591 ;;		_Red_R90
  3592 ;;		_Green_L90
  3593 ;;		_Blue_T180
  3594 ;;		_Yellow_rev1_R90
  3595 ;;		_Pink_rev1_L90
  3596 ;;		_Orange_R135
  3597 ;;		_LightBlue_L135
  3598 ;;		_White
  3599 ;; This function uses a non-reentrant model
  3600 ;;
  3601                           
  3602                           	psect	text25
  3603   001A02                     __ptext25:
  3604                           	callstack 0
  3605   001A02                     _reverseHalfSquare:
  3606                           	callstack 25
  3607   001A02                     
  3608                           ;dc_motor.c: 216: void reverseHalfSquare(struct DC_motor *mL, struct DC_motor *mR);dc_mo
      +                          tor.c: 217: {;dc_motor.c: 218:     stop(mL,mR);
  3609   001A02  C01B  F014         	movff	reverseHalfSquare@mL,stop@mL
  3610   001A06  C01C  F015         	movff	reverseHalfSquare@mL+1,stop@mL+1
  3611   001A0A  C01D  F016         	movff	reverseHalfSquare@mR,stop@mR
  3612   001A0E  C01E  F017         	movff	reverseHalfSquare@mR+1,stop@mR+1
  3613   001A12  EC46  F00B         	call	_stop	;wreg free
  3614   001A16                     
  3615                           ;dc_motor.c: 219:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3616   001A16  0E09               	movlw	9
  3617   001A18  6E20               	movwf	(??_reverseHalfSquare+1)^0,c
  3618   001A1A  0E1E               	movlw	30
  3619   001A1C  6E1F               	movwf	??_reverseHalfSquare^0,c
  3620   001A1E  0EE4               	movlw	228
  3621   001A20                     u2227:
  3622   001A20  2EE8               	decfsz	wreg,f,c
  3623   001A22  D7FE               	bra	u2227
  3624   001A24  2E1F               	decfsz	??_reverseHalfSquare^0,f,c
  3625   001A26  D7FC               	bra	u2227
  3626   001A28  2E20               	decfsz	(??_reverseHalfSquare+1)^0,f,c
  3627   001A2A  D7FA               	bra	u2227
  3628   001A2C  D000               	nop2	
  3629   001A2E                     
  3630                           ;dc_motor.c: 220:     fullSpeedReverse(mL,mR);
  3631   001A2E  C01B  F014         	movff	reverseHalfSquare@mL,fullSpeedReverse@mL
  3632   001A32  C01C  F015         	movff	reverseHalfSquare@mL+1,fullSpeedReverse@mL+1
  3633   001A36  C01D  F016         	movff	reverseHalfSquare@mR,fullSpeedReverse@mR
  3634   001A3A  C01E  F017         	movff	reverseHalfSquare@mR+1,fullSpeedReverse@mR+1
  3635   001A3E  EC84  F00D         	call	_fullSpeedReverse	;wreg free
  3636                           
  3637                           ;dc_motor.c: 221:     _delay((unsigned long)((_halfsquare)*(64000000/4000.0)));
  3638   001A42  0E1D               	movlw	29
  3639   001A44  6E20               	movwf	(??_reverseHalfSquare+1)^0,c
  3640   001A46  0E69               	movlw	105
  3641   001A48  6E1F               	movwf	??_reverseHalfSquare^0,c
  3642   001A4A  0EA5               	movlw	165
  3643   001A4C                     u2237:
  3644   001A4C  2EE8               	decfsz	wreg,f,c
  3645   001A4E  D7FE               	bra	u2237
  3646   001A50  2E1F               	decfsz	??_reverseHalfSquare^0,f,c
  3647   001A52  D7FC               	bra	u2237
  3648   001A54  2E20               	decfsz	(??_reverseHalfSquare+1)^0,f,c
  3649   001A56  D7FA               	bra	u2237
  3650   001A58  F000               	nop	
  3651   001A5A                     
  3652                           ;dc_motor.c: 222:     stop(mL,mR);
  3653   001A5A  C01B  F014         	movff	reverseHalfSquare@mL,stop@mL
  3654   001A5E  C01C  F015         	movff	reverseHalfSquare@mL+1,stop@mL+1
  3655   001A62  C01D  F016         	movff	reverseHalfSquare@mR,stop@mR
  3656   001A66  C01E  F017         	movff	reverseHalfSquare@mR+1,stop@mR+1
  3657   001A6A  EC46  F00B         	call	_stop	;wreg free
  3658   001A6E                     
  3659                           ;dc_motor.c: 223:     _delay((unsigned long)((100)*(64000000/4000.0)));
  3660   001A6E  0E09               	movlw	9
  3661   001A70  6E20               	movwf	(??_reverseHalfSquare+1)^0,c
  3662   001A72  0E1E               	movlw	30
  3663   001A74  6E1F               	movwf	??_reverseHalfSquare^0,c
  3664   001A76  0EE4               	movlw	228
  3665   001A78                     u2247:
  3666   001A78  2EE8               	decfsz	wreg,f,c
  3667   001A7A  D7FE               	bra	u2247
  3668   001A7C  2E1F               	decfsz	??_reverseHalfSquare^0,f,c
  3669   001A7E  D7FC               	bra	u2247
  3670   001A80  2E20               	decfsz	(??_reverseHalfSquare+1)^0,f,c
  3671   001A82  D7FA               	bra	u2247
  3672   001A84  D000               	nop2	
  3673   001A86  0012               	return		;funcret
  3674   001A88                     __end_of_reverseHalfSquare:
  3675                           	callstack 0
  3676                           
  3677 ;; *************** function _stop *****************
  3678 ;; Defined at:
  3679 ;;		line 93 in file "dc_motor.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  3682 ;;		 -> motorL(9), 
  3683 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  3684 ;;		 -> motorR(9), 
  3685 ;; Auto vars:     Size  Location     Type
  3686 ;;		None
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  1    wreg      void 
  3689 ;; Registers used:
  3690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3691 ;; Tracked objects:
  3692 ;;		On entry : 0/0
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3696 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3698 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3699 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3700 ;;Total ram usage:        5 bytes
  3701 ;; Hardware stack levels used: 1
  3702 ;; Hardware stack levels required when called: 3
  3703 ;; This function calls:
  3704 ;;		_setMotorPWM
  3705 ;; This function is called by:
  3706 ;;		_Left45
  3707 ;;		_Right45
  3708 ;;		_reverseHalfSquare
  3709 ;;		_Yellow_rev1_R90
  3710 ;;		_Pink_rev1_L90
  3711 ;;		_White
  3712 ;;		_maxTimeReturn
  3713 ;; This function uses a non-reentrant model
  3714 ;;
  3715                           
  3716                           	psect	text26
  3717   00168C                     __ptext26:
  3718                           	callstack 0
  3719   00168C                     _stop:
  3720                           	callstack 26
  3721   00168C                     
  3722                           ;dc_motor.c: 93: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 94: {;d
      +                          c_motor.c: 95:     LATDbits.LATD4 = 1;;
  3723   00168C  887C               	bsf	124,4,c	;volatile
  3724                           
  3725                           ;dc_motor.c: 96:     while((mL->power)>0 && (mR->power)>0)
  3726   00168E  EF7F  F00B         	goto	l2301
  3727   001692                     l2287:
  3728                           
  3729                           ;dc_motor.c: 97:     {;dc_motor.c: 99:         if (mL->power>0){
  3730   001692  C014  FFD9         	movff	stop@mL,fsr2l
  3731   001696  C015  FFDA         	movff	stop@mL+1,fsr2h
  3732   00169A  50DF               	movf	indf2,w,c
  3733   00169C  B4D8               	btfsc	status,2,c
  3734   00169E  EF53  F00B         	goto	u1181
  3735   0016A2  EF55  F00B         	goto	u1180
  3736   0016A6                     u1181:
  3737   0016A6  EF5A  F00B         	goto	l2291
  3738   0016AA                     u1180:
  3739   0016AA                     
  3740                           ;dc_motor.c: 100:             mL->power--;
  3741   0016AA  C014  FFD9         	movff	stop@mL,fsr2l
  3742   0016AE  C015  FFDA         	movff	stop@mL+1,fsr2h
  3743   0016B2  06DF               	decf	indf2,f,c
  3744   0016B4                     l2291:
  3745                           
  3746                           ;dc_motor.c: 102:         if ((mR->power)>0){
  3747   0016B4  C016  FFD9         	movff	stop@mR,fsr2l
  3748   0016B8  C017  FFDA         	movff	stop@mR+1,fsr2h
  3749   0016BC  50DF               	movf	indf2,w,c
  3750   0016BE  B4D8               	btfsc	status,2,c
  3751   0016C0  EF64  F00B         	goto	u1191
  3752   0016C4  EF66  F00B         	goto	u1190
  3753   0016C8                     u1191:
  3754   0016C8  EF6B  F00B         	goto	l2295
  3755   0016CC                     u1190:
  3756   0016CC                     
  3757                           ;dc_motor.c: 103:             mR->power--;
  3758   0016CC  C016  FFD9         	movff	stop@mR,fsr2l
  3759   0016D0  C017  FFDA         	movff	stop@mR+1,fsr2h
  3760   0016D4  06DF               	decf	indf2,f,c
  3761   0016D6                     l2295:
  3762                           
  3763                           ;dc_motor.c: 105:         setMotorPWM(mL);
  3764   0016D6  C014  F00E         	movff	stop@mL,setMotorPWM@m
  3765   0016DA  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  3766   0016DE  ECA1  F008         	call	_setMotorPWM	;wreg free
  3767   0016E2                     
  3768                           ;dc_motor.c: 106:         setMotorPWM(mR);
  3769   0016E2  C016  F00E         	movff	stop@mR,setMotorPWM@m
  3770   0016E6  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  3771   0016EA  ECA1  F008         	call	_setMotorPWM	;wreg free
  3772   0016EE                     
  3773                           ;dc_motor.c: 107:         _delay((unsigned long)((400)*(64000000/4000000.0)));
  3774   0016EE  0E09               	movlw	9
  3775   0016F0  6E18               	movwf	??_stop^0,c
  3776   0016F2  0E4E               	movlw	78
  3777   0016F4                     u2257:
  3778   0016F4  2EE8               	decfsz	wreg,f,c
  3779   0016F6  D7FE               	bra	u2257
  3780   0016F8  2E18               	decfsz	??_stop^0,f,c
  3781   0016FA  D7FC               	bra	u2257
  3782   0016FC  D000               	nop2	
  3783   0016FE                     l2301:
  3784                           
  3785                           ;dc_motor.c: 96:     while((mL->power)>0 && (mR->power)>0)
  3786   0016FE  C014  FFD9         	movff	stop@mL,fsr2l
  3787   001702  C015  FFDA         	movff	stop@mL+1,fsr2h
  3788   001706  50DF               	movf	indf2,w,c
  3789   001708  B4D8               	btfsc	status,2,c
  3790   00170A  EF89  F00B         	goto	u1201
  3791   00170E  EF8B  F00B         	goto	u1200
  3792   001712                     u1201:
  3793   001712  EF97  F00B         	goto	l216
  3794   001716                     u1200:
  3795   001716  C016  FFD9         	movff	stop@mR,fsr2l
  3796   00171A  C017  FFDA         	movff	stop@mR+1,fsr2h
  3797   00171E  50DF               	movf	indf2,w,c
  3798   001720  A4D8               	btfss	status,2,c
  3799   001722  EF95  F00B         	goto	u1211
  3800   001726  EF97  F00B         	goto	u1210
  3801   00172A                     u1211:
  3802   00172A  EF49  F00B         	goto	l2287
  3803   00172E                     u1210:
  3804   00172E                     l216:
  3805                           
  3806                           ;dc_motor.c: 109:     LATDbits.LATD4 = 0;;
  3807   00172E  987C               	bcf	124,4,c	;volatile
  3808   001730  0012               	return		;funcret
  3809   001732                     __end_of_stop:
  3810                           	callstack 0
  3811                           
  3812 ;; *************** function _fullSpeedReverse *****************
  3813 ;; Defined at:
  3814 ;;		line 163 in file "dc_motor.c"
  3815 ;; Parameters:    Size  Location     Type
  3816 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  3817 ;;		 -> motorL(9), 
  3818 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  3819 ;;		 -> motorR(9), 
  3820 ;; Auto vars:     Size  Location     Type
  3821 ;;  i               2   24[COMRAM] unsigned int 
  3822 ;; Return value:  Size  Location     Type
  3823 ;;                  1    wreg      void 
  3824 ;; Registers used:
  3825 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3826 ;; Tracked objects:
  3827 ;;		On entry : 0/0
  3828 ;;		On exit  : 0/0
  3829 ;;		Unchanged: 0/0
  3830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3831 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3832 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3833 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3834 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3835 ;;Total ram usage:        7 bytes
  3836 ;; Hardware stack levels used: 1
  3837 ;; Hardware stack levels required when called: 3
  3838 ;; This function calls:
  3839 ;;		_setMotorPWM
  3840 ;; This function is called by:
  3841 ;;		_reverseHalfSquare
  3842 ;;		_Yellow_rev1_R90
  3843 ;;		_Pink_rev1_L90
  3844 ;; This function uses a non-reentrant model
  3845 ;;
  3846                           
  3847                           	psect	text27
  3848   001B08                     __ptext27:
  3849                           	callstack 0
  3850   001B08                     _fullSpeedReverse:
  3851                           	callstack 25
  3852   001B08                     
  3853                           ;dc_motor.c: 163: void fullSpeedReverse(struct DC_motor *mL, struct DC_motor *mR);dc_mot
      +                          or.c: 164: {;dc_motor.c: 165:  (mL->direction) = 0;
  3854   001B08  EE20 F001          	lfsr	2,1
  3855   001B0C  5014               	movf	fullSpeedReverse@mL^0,w,c
  3856   001B0E  26D9               	addwf	fsr2l,f,c
  3857   001B10  5015               	movf	(fullSpeedReverse@mL+1)^0,w,c
  3858   001B12  22DA               	addwfc	fsr2h,f,c
  3859   001B14  0E00               	movlw	0
  3860   001B16  6EDF               	movwf	indf2,c
  3861                           
  3862                           ;dc_motor.c: 166:  (mR->direction) = 0;
  3863   001B18  EE20 F001          	lfsr	2,1
  3864   001B1C  5016               	movf	fullSpeedReverse@mR^0,w,c
  3865   001B1E  26D9               	addwf	fsr2l,f,c
  3866   001B20  5017               	movf	(fullSpeedReverse@mR+1)^0,w,c
  3867   001B22  22DA               	addwfc	fsr2h,f,c
  3868   001B24  0E00               	movlw	0
  3869   001B26  6EDF               	movwf	indf2,c
  3870   001B28                     
  3871                           ;dc_motor.c: 168:     for (unsigned int i = 0; i <50; i++)
  3872   001B28  0E00               	movlw	0
  3873   001B2A  6E1A               	movwf	(fullSpeedReverse@i+1)^0,c
  3874   001B2C  0E00               	movlw	0
  3875   001B2E  6E19               	movwf	fullSpeedReverse@i^0,c
  3876   001B30                     l2365:
  3877                           
  3878                           ;dc_motor.c: 169:     {;dc_motor.c: 170:         (mL->power)++;
  3879   001B30  C014  FFD9         	movff	fullSpeedReverse@mL,fsr2l
  3880   001B34  C015  FFDA         	movff	fullSpeedReverse@mL+1,fsr2h
  3881   001B38  2ADF               	incf	indf2,f,c
  3882                           
  3883                           ;dc_motor.c: 171:         (mR->power)++;
  3884   001B3A  C016  FFD9         	movff	fullSpeedReverse@mR,fsr2l
  3885   001B3E  C017  FFDA         	movff	fullSpeedReverse@mR+1,fsr2h
  3886   001B42  2ADF               	incf	indf2,f,c
  3887   001B44                     
  3888                           ;dc_motor.c: 172:         setMotorPWM(mL);
  3889   001B44  C014  F00E         	movff	fullSpeedReverse@mL,setMotorPWM@m
  3890   001B48  C015  F00F         	movff	fullSpeedReverse@mL+1,setMotorPWM@m+1
  3891   001B4C  ECA1  F008         	call	_setMotorPWM	;wreg free
  3892   001B50                     
  3893                           ;dc_motor.c: 173:         setMotorPWM(mR);
  3894   001B50  C016  F00E         	movff	fullSpeedReverse@mR,setMotorPWM@m
  3895   001B54  C017  F00F         	movff	fullSpeedReverse@mR+1,setMotorPWM@m+1
  3896   001B58  ECA1  F008         	call	_setMotorPWM	;wreg free
  3897   001B5C                     
  3898                           ;dc_motor.c: 174:         _delay((unsigned long)((400)*(64000000/4000000.0)));
  3899   001B5C  0E09               	movlw	9
  3900   001B5E  6E18               	movwf	??_fullSpeedReverse^0,c
  3901   001B60  0E4E               	movlw	78
  3902   001B62                     u2267:
  3903   001B62  2EE8               	decfsz	wreg,f,c
  3904   001B64  D7FE               	bra	u2267
  3905   001B66  2E18               	decfsz	??_fullSpeedReverse^0,f,c
  3906   001B68  D7FC               	bra	u2267
  3907   001B6A  D000               	nop2	
  3908   001B6C                     
  3909                           ;dc_motor.c: 175:     }
  3910   001B6C  4A19               	infsnz	fullSpeedReverse@i^0,f,c
  3911   001B6E  2A1A               	incf	(fullSpeedReverse@i+1)^0,f,c
  3912   001B70  501A               	movf	(fullSpeedReverse@i+1)^0,w,c
  3913   001B72  E109               	bnz	u1260
  3914   001B74  0E32               	movlw	50
  3915   001B76  5C19               	subwf	fullSpeedReverse@i^0,w,c
  3916   001B78  A0D8               	btfss	status,0,c
  3917   001B7A  EFC1  F00D         	goto	u1261
  3918   001B7E  EFC3  F00D         	goto	u1260
  3919   001B82                     u1261:
  3920   001B82  EF98  F00D         	goto	l2365
  3921   001B86                     u1260:
  3922   001B86  0012               	return		;funcret
  3923   001B88                     __end_of_fullSpeedReverse:
  3924                           	callstack 0
  3925                           
  3926 ;; *************** function _setMotorPWM *****************
  3927 ;; Defined at:
  3928 ;;		line 70 in file "dc_motor.c"
  3929 ;; Parameters:    Size  Location     Type
  3930 ;;  m               2   13[COMRAM] PTR struct DC_motor
  3931 ;;		 -> motorR(9), motorL(9), 
  3932 ;; Auto vars:     Size  Location     Type
  3933 ;;  negDuty         1   18[COMRAM] unsigned char 
  3934 ;;  posDuty         1   17[COMRAM] unsigned char 
  3935 ;; Return value:  Size  Location     Type
  3936 ;;                  1    wreg      void 
  3937 ;; Registers used:
  3938 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3939 ;; Tracked objects:
  3940 ;;		On entry : 0/0
  3941 ;;		On exit  : 0/0
  3942 ;;		Unchanged: 0/0
  3943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3944 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3945 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3946 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3947 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3948 ;;Total ram usage:        6 bytes
  3949 ;; Hardware stack levels used: 1
  3950 ;; Hardware stack levels required when called: 2
  3951 ;; This function calls:
  3952 ;;		___lwdiv
  3953 ;;		___wmul
  3954 ;; This function is called by:
  3955 ;;		_stop
  3956 ;;		_turnLeft
  3957 ;;		_turnRight
  3958 ;;		_fullSpeedAhead
  3959 ;;		_fullSpeedReverse
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963                           	psect	text28
  3964   001142                     __ptext28:
  3965                           	callstack 0
  3966   001142                     _setMotorPWM:
  3967                           	callstack 26
  3968   001142                     
  3969                           ;dc_motor.c: 70: void setMotorPWM(struct DC_motor *m);dc_motor.c: 71: {;dc_motor.c: 72: 
      +                              unsigned char posDuty, negDuty;;dc_motor.c: 74:     if(m->brakemode) {
  3970   001142  EE20 F002          	lfsr	2,2
  3971   001146  500E               	movf	setMotorPWM@m^0,w,c
  3972   001148  26D9               	addwf	fsr2l,f,c
  3973   00114A  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3974   00114C  22DA               	addwfc	fsr2h,f,c
  3975   00114E  50DF               	movf	indf2,w,c
  3976   001150  B4D8               	btfsc	status,2,c
  3977   001152  EFAD  F008         	goto	u1161
  3978   001156  EFAF  F008         	goto	u1160
  3979   00115A                     u1161:
  3980   00115A  EFE3  F008         	goto	l2275
  3981   00115E                     u1160:
  3982   00115E                     
  3983                           ;dc_motor.c: 75:         posDuty=(m->PWMperiod) - ((unsigned int)(m->power)*(m->PWMperio
      +                          d))/100;
  3984   00115E  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  3985   001162  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3986   001166  50DF               	movf	indf2,w,c
  3987   001168  6E10               	movwf	??_setMotorPWM^0,c
  3988   00116A  5010               	movf	??_setMotorPWM^0,w,c
  3989   00116C  6E01               	movwf	___wmul@multiplier^0,c
  3990   00116E  6A02               	clrf	(___wmul@multiplier+1)^0,c
  3991   001170  EE20 F003          	lfsr	2,3
  3992   001174  500E               	movf	setMotorPWM@m^0,w,c
  3993   001176  26D9               	addwf	fsr2l,f,c
  3994   001178  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3995   00117A  22DA               	addwfc	fsr2h,f,c
  3996   00117C  CFDE F003          	movff	postinc2,___wmul@multiplicand
  3997   001180  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  3998   001184  EC68  F00F         	call	___wmul	;wreg free
  3999   001188  C001  F007         	movff	?___wmul,___lwdiv@dividend
  4000   00118C  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  4001   001190  0E00               	movlw	0
  4002   001192  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  4003   001194  0E64               	movlw	100
  4004   001196  6E09               	movwf	___lwdiv@divisor^0,c
  4005   001198  EC42  F00E         	call	___lwdiv	;wreg free
  4006   00119C  EE20 F003          	lfsr	2,3
  4007   0011A0  500E               	movf	setMotorPWM@m^0,w,c
  4008   0011A2  26D9               	addwf	fsr2l,f,c
  4009   0011A4  500F               	movf	(setMotorPWM@m+1)^0,w,c
  4010   0011A6  22DA               	addwfc	fsr2h,f,c
  4011   0011A8  50DF               	movf	indf2,w,c
  4012   0011AA  6E11               	movwf	(??_setMotorPWM+1)^0,c
  4013   0011AC  5007               	movf	?___lwdiv^0,w,c
  4014   0011AE  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  4015   0011B0  6E12               	movwf	setMotorPWM@posDuty^0,c
  4016   0011B2                     
  4017                           ;dc_motor.c: 76:         negDuty=(m->PWMperiod);
  4018   0011B2  EE20 F003          	lfsr	2,3
  4019   0011B6  500E               	movf	setMotorPWM@m^0,w,c
  4020   0011B8  26D9               	addwf	fsr2l,f,c
  4021   0011BA  500F               	movf	(setMotorPWM@m+1)^0,w,c
  4022   0011BC  22DA               	addwfc	fsr2h,f,c
  4023   0011BE  50DF               	movf	indf2,w,c
  4024   0011C0  6E13               	movwf	setMotorPWM@negDuty^0,c
  4025                           
  4026                           ;dc_motor.c: 77:     }
  4027   0011C2  EF06  F009         	goto	l2279
  4028   0011C6                     l2275:
  4029                           
  4030                           ;dc_motor.c: 79:         posDuty=0;
  4031   0011C6  0E00               	movlw	0
  4032   0011C8  6E12               	movwf	setMotorPWM@posDuty^0,c
  4033   0011CA                     
  4034                           ;dc_motor.c: 80:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  4035   0011CA  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  4036   0011CE  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4037   0011D2  50DF               	movf	indf2,w,c
  4038   0011D4  6E10               	movwf	??_setMotorPWM^0,c
  4039   0011D6  5010               	movf	??_setMotorPWM^0,w,c
  4040   0011D8  6E01               	movwf	___wmul@multiplier^0,c
  4041   0011DA  6A02               	clrf	(___wmul@multiplier+1)^0,c
  4042   0011DC  EE20 F003          	lfsr	2,3
  4043   0011E0  500E               	movf	setMotorPWM@m^0,w,c
  4044   0011E2  26D9               	addwf	fsr2l,f,c
  4045   0011E4  500F               	movf	(setMotorPWM@m+1)^0,w,c
  4046   0011E6  22DA               	addwfc	fsr2h,f,c
  4047   0011E8  CFDE F003          	movff	postinc2,___wmul@multiplicand
  4048   0011EC  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  4049   0011F0  EC68  F00F         	call	___wmul	;wreg free
  4050   0011F4  C001  F007         	movff	?___wmul,___lwdiv@dividend
  4051   0011F8  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  4052   0011FC  0E00               	movlw	0
  4053   0011FE  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  4054   001200  0E64               	movlw	100
  4055   001202  6E09               	movwf	___lwdiv@divisor^0,c
  4056   001204  EC42  F00E         	call	___lwdiv	;wreg free
  4057   001208  5007               	movf	?___lwdiv^0,w,c
  4058   00120A  6E13               	movwf	setMotorPWM@negDuty^0,c
  4059   00120C                     l2279:
  4060                           
  4061                           ;dc_motor.c: 83:     if (m->direction) {
  4062   00120C  EE20 F001          	lfsr	2,1
  4063   001210  500E               	movf	setMotorPWM@m^0,w,c
  4064   001212  26D9               	addwf	fsr2l,f,c
  4065   001214  500F               	movf	(setMotorPWM@m+1)^0,w,c
  4066   001216  22DA               	addwfc	fsr2h,f,c
  4067   001218  50DF               	movf	indf2,w,c
  4068   00121A  B4D8               	btfsc	status,2,c
  4069   00121C  EF12  F009         	goto	u1171
  4070   001220  EF14  F009         	goto	u1170
  4071   001224                     u1171:
  4072   001224  EF36  F009         	goto	l2283
  4073   001228                     u1170:
  4074   001228                     
  4075                           ;dc_motor.c: 84:         *(m->posDutyHighByte)=posDuty;
  4076   001228  EE20 F005          	lfsr	2,5
  4077   00122C  500E               	movf	setMotorPWM@m^0,w,c
  4078   00122E  26D9               	addwf	fsr2l,f,c
  4079   001230  500F               	movf	(setMotorPWM@m+1)^0,w,c
  4080   001232  22DA               	addwfc	fsr2h,f,c
  4081   001234  CFDE F010          	movff	postinc2,??_setMotorPWM
  4082   001238  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  4083   00123C  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  4084   001240  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4085   001244  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  4086                           
  4087                           ;dc_motor.c: 85:         *(m->negDutyHighByte)=negDuty;
  4088   001248  EE20 F007          	lfsr	2,7
  4089   00124C  500E               	movf	setMotorPWM@m^0,w,c
  4090   00124E  26D9               	addwf	fsr2l,f,c
  4091   001250  500F               	movf	(setMotorPWM@m+1)^0,w,c
  4092   001252  22DA               	addwfc	fsr2h,f,c
  4093   001254  CFDE F010          	movff	postinc2,??_setMotorPWM
  4094   001258  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  4095   00125C  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  4096   001260  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4097   001264  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  4098                           
  4099                           ;dc_motor.c: 86:     } else {
  4100   001268  EF56  F009         	goto	l207
  4101   00126C                     l2283:
  4102                           
  4103                           ;dc_motor.c: 87:         *(m->posDutyHighByte)=negDuty;
  4104   00126C  EE20 F005          	lfsr	2,5
  4105   001270  500E               	movf	setMotorPWM@m^0,w,c
  4106   001272  26D9               	addwf	fsr2l,f,c
  4107   001274  500F               	movf	(setMotorPWM@m+1)^0,w,c
  4108   001276  22DA               	addwfc	fsr2h,f,c
  4109   001278  CFDE F010          	movff	postinc2,??_setMotorPWM
  4110   00127C  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  4111   001280  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  4112   001284  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4113   001288  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  4114                           
  4115                           ;dc_motor.c: 88:         *(m->negDutyHighByte)=posDuty;
  4116   00128C  EE20 F007          	lfsr	2,7
  4117   001290  500E               	movf	setMotorPWM@m^0,w,c
  4118   001292  26D9               	addwf	fsr2l,f,c
  4119   001294  500F               	movf	(setMotorPWM@m+1)^0,w,c
  4120   001296  22DA               	addwfc	fsr2h,f,c
  4121   001298  CFDE F010          	movff	postinc2,??_setMotorPWM
  4122   00129C  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  4123   0012A0  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  4124   0012A4  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4125   0012A8  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  4126   0012AC                     l207:
  4127   0012AC  0012               	return		;funcret
  4128   0012AE                     __end_of_setMotorPWM:
  4129                           	callstack 0
  4130                           
  4131 ;; *************** function ___wmul *****************
  4132 ;; Defined at:
  4133 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;  multiplier      2    0[COMRAM] unsigned int 
  4136 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;  product         2    4[COMRAM] unsigned int 
  4139 ;; Return value:  Size  Location     Type
  4140 ;;                  2    0[COMRAM] unsigned int 
  4141 ;; Registers used:
  4142 ;;		wreg, status,2, status,0, prodl, prodh
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4148 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4149 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4151 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4152 ;;Total ram usage:        6 bytes
  4153 ;; Hardware stack levels used: 1
  4154 ;; Hardware stack levels required when called: 1
  4155 ;; This function calls:
  4156 ;;		Nothing
  4157 ;; This function is called by:
  4158 ;;		_setMotorPWM
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           	psect	text29
  4163   001ED0                     __ptext29:
  4164                           	callstack 0
  4165   001ED0                     ___wmul:
  4166                           	callstack 26
  4167   001ED0  5001               	movf	___wmul@multiplier^0,w,c
  4168   001ED2  0203               	mulwf	___wmul@multiplicand^0,c
  4169   001ED4  CFF3 F005          	movff	prodl,___wmul@product
  4170   001ED8  CFF4 F006          	movff	prodh,___wmul@product+1
  4171   001EDC  5001               	movf	___wmul@multiplier^0,w,c
  4172   001EDE  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  4173   001EE0  50F3               	movf	243,w,c
  4174   001EE2  2606               	addwf	(___wmul@product+1)^0,f,c
  4175   001EE4  5002               	movf	(___wmul@multiplier+1)^0,w,c
  4176   001EE6  0203               	mulwf	___wmul@multiplicand^0,c
  4177   001EE8  50F3               	movf	243,w,c
  4178   001EEA  2606               	addwf	(___wmul@product+1)^0,f,c
  4179   001EEC  C005  F001         	movff	___wmul@product,?___wmul
  4180   001EF0  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4181   001EF4  0012               	return		;funcret
  4182   001EF6                     __end_of___wmul:
  4183                           	callstack 0
  4184                           
  4185 ;; *************** function ___lwdiv *****************
  4186 ;; Defined at:
  4187 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;  dividend        2    6[COMRAM] unsigned int 
  4190 ;;  divisor         2    8[COMRAM] unsigned int 
  4191 ;; Auto vars:     Size  Location     Type
  4192 ;;  quotient        2   10[COMRAM] unsigned int 
  4193 ;;  counter         1   12[COMRAM] unsigned char 
  4194 ;; Return value:  Size  Location     Type
  4195 ;;                  2    6[COMRAM] unsigned int 
  4196 ;; Registers used:
  4197 ;;		wreg, status,2, status,0
  4198 ;; Tracked objects:
  4199 ;;		On entry : 0/0
  4200 ;;		On exit  : 0/0
  4201 ;;		Unchanged: 0/0
  4202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4203 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4204 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4206 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4207 ;;Total ram usage:        7 bytes
  4208 ;; Hardware stack levels used: 1
  4209 ;; Hardware stack levels required when called: 1
  4210 ;; This function calls:
  4211 ;;		Nothing
  4212 ;; This function is called by:
  4213 ;;		_setMotorPWM
  4214 ;; This function uses a non-reentrant model
  4215 ;;
  4216                           
  4217                           	psect	text30
  4218   001C84                     __ptext30:
  4219                           	callstack 0
  4220   001C84                     ___lwdiv:
  4221                           	callstack 26
  4222   001C84  0E00               	movlw	0
  4223   001C86  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  4224   001C88  0E00               	movlw	0
  4225   001C8A  6E0B               	movwf	___lwdiv@quotient^0,c
  4226   001C8C  5009               	movf	___lwdiv@divisor^0,w,c
  4227   001C8E  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  4228   001C90  B4D8               	btfsc	status,2,c
  4229   001C92  EF4D  F00E         	goto	u1131
  4230   001C96  EF4F  F00E         	goto	u1130
  4231   001C9A                     u1131:
  4232   001C9A  EF77  F00E         	goto	l1118
  4233   001C9E                     u1130:
  4234   001C9E  0E01               	movlw	1
  4235   001CA0  6E0D               	movwf	___lwdiv@counter^0,c
  4236   001CA2  EF57  F00E         	goto	l2255
  4237   001CA6                     l2253:
  4238   001CA6  90D8               	bcf	status,0,c
  4239   001CA8  3609               	rlcf	___lwdiv@divisor^0,f,c
  4240   001CAA  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  4241   001CAC  2A0D               	incf	___lwdiv@counter^0,f,c
  4242   001CAE                     l2255:
  4243   001CAE  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  4244   001CB0  EF5C  F00E         	goto	u1141
  4245   001CB4  EF5E  F00E         	goto	u1140
  4246   001CB8                     u1141:
  4247   001CB8  EF53  F00E         	goto	l2253
  4248   001CBC                     u1140:
  4249   001CBC                     l2257:
  4250   001CBC  90D8               	bcf	status,0,c
  4251   001CBE  360B               	rlcf	___lwdiv@quotient^0,f,c
  4252   001CC0  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  4253   001CC2  5009               	movf	___lwdiv@divisor^0,w,c
  4254   001CC4  5C07               	subwf	___lwdiv@dividend^0,w,c
  4255   001CC6  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  4256   001CC8  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  4257   001CCA  A0D8               	btfss	status,0,c
  4258   001CCC  EF6A  F00E         	goto	u1151
  4259   001CD0  EF6C  F00E         	goto	u1150
  4260   001CD4                     u1151:
  4261   001CD4  EF71  F00E         	goto	l2265
  4262   001CD8                     u1150:
  4263   001CD8  5009               	movf	___lwdiv@divisor^0,w,c
  4264   001CDA  5E07               	subwf	___lwdiv@dividend^0,f,c
  4265   001CDC  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  4266   001CDE  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  4267   001CE0  800B               	bsf	___lwdiv@quotient^0,0,c
  4268   001CE2                     l2265:
  4269   001CE2  90D8               	bcf	status,0,c
  4270   001CE4  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  4271   001CE6  3209               	rrcf	___lwdiv@divisor^0,f,c
  4272   001CE8  2E0D               	decfsz	___lwdiv@counter^0,f,c
  4273   001CEA  EF5E  F00E         	goto	l2257
  4274   001CEE                     l1118:
  4275   001CEE  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  4276   001CF2  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4277   001CF6  0012               	return		;funcret
  4278   001CF8                     __end_of___lwdiv:
  4279                           	callstack 0
  4280                           
  4281 ;; *************** function _TimerReset *****************
  4282 ;; Defined at:
  4283 ;;		line 23 in file "timer.c"
  4284 ;; Parameters:    Size  Location     Type
  4285 ;;		None
  4286 ;; Auto vars:     Size  Location     Type
  4287 ;;		None
  4288 ;; Return value:  Size  Location     Type
  4289 ;;                  1    wreg      void 
  4290 ;; Registers used:
  4291 ;;		wreg, status,2
  4292 ;; Tracked objects:
  4293 ;;		On entry : 0/0
  4294 ;;		On exit  : 0/0
  4295 ;;		Unchanged: 0/0
  4296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4301 ;;Total ram usage:        0 bytes
  4302 ;; Hardware stack levels used: 1
  4303 ;; Hardware stack levels required when called: 1
  4304 ;; This function calls:
  4305 ;;		Nothing
  4306 ;; This function is called by:
  4307 ;;		_Red_R90
  4308 ;;		_Green_L90
  4309 ;;		_Blue_T180
  4310 ;;		_Yellow_rev1_R90
  4311 ;;		_Pink_rev1_L90
  4312 ;;		_Orange_R135
  4313 ;;		_LightBlue_L135
  4314 ;;		_White
  4315 ;; This function uses a non-reentrant model
  4316 ;;
  4317                           
  4318                           	psect	text31
  4319   001FC6                     __ptext31:
  4320                           	callstack 0
  4321   001FC6                     _TimerReset:
  4322                           	callstack 27
  4323   001FC6                     
  4324                           ;timer.c: 25:     TMR0L = 0;
  4325   001FC6  0E00               	movlw	0
  4326   001FC8  6ED3               	movwf	211,c	;volatile
  4327                           
  4328                           ;timer.c: 26:     TMR0H = 0;
  4329   001FCA  0E00               	movlw	0
  4330   001FCC  6ED4               	movwf	212,c	;volatile
  4331   001FCE  0012               	return		;funcret
  4332   001FD0                     __end_of_TimerReset:
  4333                           	callstack 0
  4334                           
  4335 ;; *************** function _Timer0_init *****************
  4336 ;; Defined at:
  4337 ;;		line 7 in file "timer.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;		None
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;		None
  4342 ;; Return value:  Size  Location     Type
  4343 ;;                  1    wreg      void 
  4344 ;; Registers used:
  4345 ;;		wreg, status,2
  4346 ;; Tracked objects:
  4347 ;;		On entry : 0/0
  4348 ;;		On exit  : 0/0
  4349 ;;		Unchanged: 0/0
  4350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4355 ;;Total ram usage:        0 bytes
  4356 ;; Hardware stack levels used: 1
  4357 ;; Hardware stack levels required when called: 1
  4358 ;; This function calls:
  4359 ;;		Nothing
  4360 ;; This function is called by:
  4361 ;;		_main
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           	psect	text32
  4366   001EF6                     __ptext32:
  4367                           	callstack 0
  4368   001EF6                     _Timer0_init:
  4369                           	callstack 29
  4370   001EF6                     
  4371                           ;timer.c: 9:     T0CON1bits.T0CS=0b010;
  4372   001EF6  50D6               	movf	214,w,c	;volatile
  4373   001EF8  0B1F               	andlw	-225
  4374   001EFA  0940               	iorlw	64
  4375   001EFC  6ED6               	movwf	214,c	;volatile
  4376   001EFE                     
  4377                           ;timer.c: 10:     T0CON1bits.T0ASYNC=1;
  4378   001EFE  88D6               	bsf	214,4,c	;volatile
  4379                           
  4380                           ;timer.c: 12:     T0CON1bits.T0CKPS=0b1101;
  4381   001F00  50D6               	movf	214,w,c	;volatile
  4382   001F02  0BF0               	andlw	-16
  4383   001F04  090D               	iorlw	13
  4384   001F06  6ED6               	movwf	214,c	;volatile
  4385   001F08                     
  4386                           ;timer.c: 13:     T0CON0bits.T016BIT=1;
  4387   001F08  88D5               	bsf	213,4,c	;volatile
  4388   001F0A                     
  4389                           ;timer.c: 14:  PIE0bits.TMR0IE = 1;
  4390   001F0A  010E               	movlb	14	; () banked
  4391   001F0C  8B29               	bsf	41,5,b	;volatile
  4392                           
  4393                           ;timer.c: 17:     TMR0H=0;
  4394   001F0E  0E00               	movlw	0
  4395   001F10  6ED4               	movwf	212,c	;volatile
  4396                           
  4397                           ;timer.c: 18:     TMR0L=0;
  4398   001F12  0E00               	movlw	0
  4399   001F14  6ED3               	movwf	211,c	;volatile
  4400   001F16                     
  4401                           ; BSR set to: 14
  4402                           ;timer.c: 20:     T0CON0bits.T0EN=1;
  4403   001F16  8ED5               	bsf	213,7,c	;volatile
  4404   001F18                     
  4405                           ; BSR set to: 14
  4406   001F18  0012               	return		;funcret
  4407   001F1A                     __end_of_Timer0_init:
  4408                           	callstack 0
  4409                           
  4410 ;; *************** function _LED_init *****************
  4411 ;; Defined at:
  4412 ;;		line 4 in file "LED.c"
  4413 ;; Parameters:    Size  Location     Type
  4414 ;;		None
  4415 ;; Auto vars:     Size  Location     Type
  4416 ;;		None
  4417 ;; Return value:  Size  Location     Type
  4418 ;;                  1    wreg      void 
  4419 ;; Registers used:
  4420 ;;		None
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4430 ;;Total ram usage:        0 bytes
  4431 ;; Hardware stack levels used: 1
  4432 ;; Hardware stack levels required when called: 1
  4433 ;; This function calls:
  4434 ;;		Nothing
  4435 ;; This function is called by:
  4436 ;;		_main
  4437 ;; This function uses a non-reentrant model
  4438 ;;
  4439                           
  4440                           	psect	text33
  4441   001F8C                     __ptext33:
  4442                           	callstack 0
  4443   001F8C                     _LED_init:
  4444                           	callstack 29
  4445   001F8C                     
  4446                           ;LED.c: 6:     TRISDbits.TRISD4 = 0;
  4447   001F8C  9884               	bcf	132,4,c	;volatile
  4448                           
  4449                           ;LED.c: 7:     TRISHbits.TRISH0 = 0;
  4450   001F8E  9088               	bcf	136,0,c	;volatile
  4451                           
  4452                           ;LED.c: 8:     TRISFbits.TRISF0 = 0;
  4453   001F90  9086               	bcf	134,0,c	;volatile
  4454                           
  4455                           ;LED.c: 11:     LATDbits.LATD4 = 0;
  4456   001F92  987C               	bcf	124,4,c	;volatile
  4457                           
  4458                           ;LED.c: 12:     LATHbits.LATH0 = 0;
  4459   001F94  9080               	bcf	128,0,c	;volatile
  4460                           
  4461                           ;LED.c: 13:     LATFbits.LATF0 = 0;
  4462   001F96  907E               	bcf	126,0,c	;volatile
  4463   001F98  0012               	return		;funcret
  4464   001F9A                     __end_of_LED_init:
  4465                           	callstack 0
  4466                           
  4467 ;; *************** function _Interrupts_init *****************
  4468 ;; Defined at:
  4469 ;;		line 5 in file "interrupts.c"
  4470 ;; Parameters:    Size  Location     Type
  4471 ;;		None
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;		None
  4474 ;; Return value:  Size  Location     Type
  4475 ;;                  1    wreg      void 
  4476 ;; Registers used:
  4477 ;;		None
  4478 ;; Tracked objects:
  4479 ;;		On entry : 0/0
  4480 ;;		On exit  : 0/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4487 ;;Total ram usage:        0 bytes
  4488 ;; Hardware stack levels used: 1
  4489 ;; Hardware stack levels required when called: 1
  4490 ;; This function calls:
  4491 ;;		Nothing
  4492 ;; This function is called by:
  4493 ;;		_main
  4494 ;; This function uses a non-reentrant model
  4495 ;;
  4496                           
  4497                           	psect	text34
  4498   001FA6                     __ptext34:
  4499                           	callstack 0
  4500   001FA6                     _Interrupts_init:
  4501                           	callstack 29
  4502   001FA6                     
  4503                           ;interrupts.c: 8:     PIE4bits.RC4IE=1;
  4504   001FA6  010E               	movlb	14	; () banked
  4505   001FA8  872D               	bsf	45,3,b	;volatile
  4506                           
  4507                           ;interrupts.c: 10:     INTCONbits.IPEN=1;
  4508   001FAA  8AF2               	bsf	242,5,c	;volatile
  4509                           
  4510                           ;interrupts.c: 15:     INTCONbits.PEIE=1;
  4511   001FAC  8CF2               	bsf	242,6,c	;volatile
  4512                           
  4513                           ;interrupts.c: 17:     INTCONbits.GIE=1;
  4514   001FAE  8EF2               	bsf	242,7,c	;volatile
  4515   001FB0                     
  4516                           ; BSR set to: 14
  4517   001FB0  0012               	return		;funcret
  4518   001FB2                     __end_of_Interrupts_init:
  4519                           	callstack 0
  4520                           
  4521 ;; *************** function _ClickLEDOn *****************
  4522 ;; Defined at:
  4523 ;;		line 93 in file "colorclick.c"
  4524 ;; Parameters:    Size  Location     Type
  4525 ;;  power           1    wreg     unsigned char 
  4526 ;; Auto vars:     Size  Location     Type
  4527 ;;  power           1    0[COMRAM] unsigned char 
  4528 ;; Return value:  Size  Location     Type
  4529 ;;                  1    wreg      void 
  4530 ;; Registers used:
  4531 ;;		wreg, status,2
  4532 ;; Tracked objects:
  4533 ;;		On entry : 0/0
  4534 ;;		On exit  : 0/0
  4535 ;;		Unchanged: 0/0
  4536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4538 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4540 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4541 ;;Total ram usage:        1 bytes
  4542 ;; Hardware stack levels used: 1
  4543 ;; Hardware stack levels required when called: 1
  4544 ;; This function calls:
  4545 ;;		Nothing
  4546 ;; This function is called by:
  4547 ;;		_main
  4548 ;; This function uses a non-reentrant model
  4549 ;;
  4550                           
  4551                           	psect	text35
  4552   001E4A                     __ptext35:
  4553                           	callstack 0
  4554   001E4A                     _ClickLEDOn:
  4555                           	callstack 29
  4556                           
  4557                           ; BSR set to: 14
  4558                           ;incstack = 0
  4559                           ;ClickLEDOn@power stored from wreg
  4560   001E4A  6E01               	movwf	ClickLEDOn@power^0,c
  4561   001E4C                     
  4562                           ;colorclick.c: 93: void ClickLEDOn(char power);colorclick.c: 94: {;colorclick.c: 95:    
      +                           if (power){
  4563   001E4C  5001               	movf	ClickLEDOn@power^0,w,c
  4564   001E4E  B4D8               	btfsc	status,2,c
  4565   001E50  EF2C  F00F         	goto	u1371
  4566   001E54  EF2E  F00F         	goto	u1370
  4567   001E58                     u1371:
  4568   001E58  EF33  F00F         	goto	l2647
  4569   001E5C                     u1370:
  4570   001E5C                     
  4571                           ;colorclick.c: 96:     LATGbits.LATG1=1;
  4572   001E5C  827F               	bsf	127,1,c	;volatile
  4573                           
  4574                           ;colorclick.c: 97:     LATAbits.LATA4=1;
  4575   001E5E  8879               	bsf	121,4,c	;volatile
  4576                           
  4577                           ;colorclick.c: 98:     LATFbits.LATF7=1;
  4578   001E60  8E7E               	bsf	126,7,c	;volatile
  4579                           
  4580                           ;colorclick.c: 99:     }
  4581   001E62  EF3E  F00F         	goto	l416
  4582   001E66                     l2647:
  4583   001E66  5001               	movf	ClickLEDOn@power^0,w,c
  4584   001E68  A4D8               	btfss	status,2,c
  4585   001E6A  EF39  F00F         	goto	u1381
  4586   001E6E  EF3B  F00F         	goto	u1380
  4587   001E72                     u1381:
  4588   001E72  EF3E  F00F         	goto	l416
  4589   001E76                     u1380:
  4590   001E76                     
  4591                           ;colorclick.c: 101:     LATGbits.LATG1=0;
  4592   001E76  927F               	bcf	127,1,c	;volatile
  4593                           
  4594                           ;colorclick.c: 102:     LATAbits.LATA4=0;
  4595   001E78  9879               	bcf	121,4,c	;volatile
  4596                           
  4597                           ;colorclick.c: 103:     LATFbits.LATF7=0;
  4598   001E7A  9E7E               	bcf	126,7,c	;volatile
  4599   001E7C                     l416:
  4600   001E7C  0012               	return		;funcret
  4601   001E7E                     __end_of_ClickLEDOn:
  4602                           	callstack 0
  4603                           
  4604 ;; *************** function _HighISR *****************
  4605 ;; Defined at:
  4606 ;;		line 25 in file "interrupts.c"
  4607 ;; Parameters:    Size  Location     Type
  4608 ;;		None
  4609 ;; Auto vars:     Size  Location     Type
  4610 ;;		None
  4611 ;; Return value:  Size  Location     Type
  4612 ;;                  1    wreg      void 
  4613 ;; Registers used:
  4614 ;;		wreg, status,2
  4615 ;; Tracked objects:
  4616 ;;		On entry : 0/0
  4617 ;;		On exit  : 0/0
  4618 ;;		Unchanged: 0/0
  4619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4624 ;;Total ram usage:        0 bytes
  4625 ;; Hardware stack levels used: 1
  4626 ;; This function calls:
  4627 ;;		Nothing
  4628 ;; This function is called by:
  4629 ;;		Interrupt level 2
  4630 ;; This function uses a non-reentrant model
  4631 ;;
  4632                           
  4633                           	psect	intcode
  4634   000008                     __pintcode:
  4635                           	callstack 0
  4636   000008                     _HighISR:
  4637                           	callstack 23
  4638                           
  4639                           ;incstack = 0
  4640   000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  4641   00000A                     
  4642                           ;interrupts.c: 28:     if (PIR0bits.TMR0IF) {
  4643   00000A  010E               	movlb	14	; () banked
  4644   00000C  AB33               	btfss	51,5,b	;volatile
  4645   00000E  EF0B  F000         	goto	i2u76_41
  4646   000012  EF0D  F000         	goto	i2u76_40
  4647   000016                     i2u76_41:
  4648   000016  EF12  F000         	goto	i2l624
  4649   00001A                     i2u76_40:
  4650   00001A                     
  4651                           ; BSR set to: 14
  4652                           ;interrupts.c: 29:     maxTime = 1;
  4653   00001A  0E00               	movlw	0
  4654   00001C  6E3B               	movwf	(_maxTime+1)^0,c	;volatile
  4655   00001E  0E01               	movlw	1
  4656   000020  6E3A               	movwf	_maxTime^0,c	;volatile
  4657   000022                     
  4658                           ; BSR set to: 14
  4659                           ;interrupts.c: 30:     PIR0bits.TMR0IF=0;
  4660   000022  9B33               	bcf	51,5,b	;volatile
  4661   000024                     i2l624:
  4662                           
  4663                           ; BSR set to: 14
  4664   000024  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  4665   000026  0011               	retfie		f
  4666   000028                     __end_of_HighISR:
  4667                           	callstack 0
  4668                           
  4669                           	psect	rparam
  4670   000000                     
  4671                           	psect	temp
  4672   00005F                     btemp:
  4673                           	callstack 0
  4674   00005F                     	ds	1
  4675   000000                     int$flags	set	btemp
  4676   000000                     wtemp8	set	btemp+1
  4677   000000                     ttemp5	set	btemp+1
  4678   000000                     ttemp6	set	btemp+4
  4679   000000                     ttemp7	set	btemp+8
  4680                           
  4681                           	psect	idloc
  4682                           
  4683                           ;Config register IDLOC0 @ 0x200000
  4684                           ;	unspecified, using default values
  4685   200000                     	org	2097152
  4686   200000  0FFF               	dw	4095
  4687                           
  4688                           ;Config register IDLOC1 @ 0x200002
  4689                           ;	unspecified, using default values
  4690   200002                     	org	2097154
  4691   200002  0FFF               	dw	4095
  4692                           
  4693                           ;Config register IDLOC2 @ 0x200004
  4694                           ;	unspecified, using default values
  4695   200004                     	org	2097156
  4696   200004  0FFF               	dw	4095
  4697                           
  4698                           ;Config register IDLOC3 @ 0x200006
  4699                           ;	unspecified, using default values
  4700   200006                     	org	2097158
  4701   200006  0FFF               	dw	4095
  4702                           
  4703                           ;Config register IDLOC4 @ 0x200008
  4704                           ;	unspecified, using default values
  4705   200008                     	org	2097160
  4706   200008  0FFF               	dw	4095
  4707                           
  4708                           ;Config register IDLOC5 @ 0x20000A
  4709                           ;	unspecified, using default values
  4710   20000A                     	org	2097162
  4711   20000A  0FFF               	dw	4095
  4712                           
  4713                           ;Config register IDLOC6 @ 0x20000C
  4714                           ;	unspecified, using default values
  4715   20000C                     	org	2097164
  4716   20000C  0FFF               	dw	4095
  4717                           
  4718                           ;Config register IDLOC7 @ 0x20000E
  4719                           ;	unspecified, using default values
  4720   20000E                     	org	2097166
  4721   20000E  0FFF               	dw	4095
  4722                           
  4723                           	psect	config
  4724                           
  4725                           ;Config register CONFIG1L @ 0x300000
  4726                           ;	External Oscillator mode Selection bits
  4727                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  4728                           ;	Power-up default value for COSC bits
  4729                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  4730   300000                     	org	3145728
  4731   300000  AA                 	db	170
  4732                           
  4733                           ;Config register CONFIG1H @ 0x300001
  4734                           ;	unspecified, using default values
  4735                           ;	Clock Out Enable bit
  4736                           ;	CLKOUTEN = 0x1, unprogrammed default
  4737                           ;	Clock Switch Enable bit
  4738                           ;	CSWEN = 0x1, unprogrammed default
  4739                           ;	Fail-Safe Clock Monitor Enable bit
  4740                           ;	FCMEN = 0x1, unprogrammed default
  4741   300001                     	org	3145729
  4742   300001  FF                 	db	255
  4743                           
  4744                           ;Config register CONFIG2L @ 0x300002
  4745                           ;	unspecified, using default values
  4746                           ;	Master Clear Enable bit
  4747                           ;	MCLRE = 0x1, unprogrammed default
  4748                           ;	Power-up Timer Enable bit
  4749                           ;	PWRTE = 0x1, unprogrammed default
  4750                           ;	Low-power BOR enable bit
  4751                           ;	LPBOREN = 0x1, unprogrammed default
  4752                           ;	Brown-out Reset Enable bits
  4753                           ;	BOREN = 0x3, unprogrammed default
  4754   300002                     	org	3145730
  4755   300002  FF                 	db	255
  4756                           
  4757                           ;Config register CONFIG2H @ 0x300003
  4758                           ;	unspecified, using default values
  4759                           ;	Brown Out Reset Voltage selection bits
  4760                           ;	BORV = 0x3, unprogrammed default
  4761                           ;	ZCD Disable bit
  4762                           ;	ZCD = 0x1, unprogrammed default
  4763                           ;	PPSLOCK bit One-Way Set Enable bit
  4764                           ;	PPS1WAY = 0x1, unprogrammed default
  4765                           ;	Stack Full/Underflow Reset Enable bit
  4766                           ;	STVREN = 0x1, unprogrammed default
  4767                           ;	Debugger Enable bit
  4768                           ;	DEBUG = 0x1, unprogrammed default
  4769                           ;	Extended Instruction Set Enable bit
  4770                           ;	XINST = 0x1, unprogrammed default
  4771   300003                     	org	3145731
  4772   300003  FF                 	db	255
  4773                           
  4774                           ;Config register CONFIG3L @ 0x300004
  4775                           ;	WDT Period Select bits
  4776                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  4777                           ;	WDT operating mode
  4778                           ;	WDTE = OFF, WDT Disabled
  4779   300004                     	org	3145732
  4780   300004  9F                 	db	159
  4781                           
  4782                           ;Config register CONFIG3H @ 0x300005
  4783                           ;	unspecified, using default values
  4784                           ;	WDT Window Select bits
  4785                           ;	WDTCWS = 0x7, unprogrammed default
  4786                           ;	WDT input clock selector
  4787                           ;	WDTCCS = 0x7, unprogrammed default
  4788   300005                     	org	3145733
  4789   300005  FF                 	db	255
  4790                           
  4791                           ;Config register CONFIG4L @ 0x300006
  4792                           ;	unspecified, using default values
  4793                           ;	Write Protection Block 0
  4794                           ;	WRT0 = 0x1, unprogrammed default
  4795                           ;	Write Protection Block 1
  4796                           ;	WRT1 = 0x1, unprogrammed default
  4797                           ;	Write Protection Block 2
  4798                           ;	WRT2 = 0x1, unprogrammed default
  4799                           ;	Write Protection Block 3
  4800                           ;	WRT3 = 0x1, unprogrammed default
  4801                           ;	Write Protection Block 3
  4802                           ;	WRT4 = 0x1, unprogrammed default
  4803                           ;	Write Protection Block 3
  4804                           ;	WRT5 = 0x1, unprogrammed default
  4805                           ;	Write Protection Block 3
  4806                           ;	WRT6 = 0x1, unprogrammed default
  4807                           ;	Write Protection Block 3
  4808                           ;	WRT7 = 0x1, unprogrammed default
  4809   300006                     	org	3145734
  4810   300006  FF                 	db	255
  4811                           
  4812                           ;Config register CONFIG4H @ 0x300007
  4813                           ;	unspecified, using default values
  4814                           ;	Configuration Register Write Protection bit
  4815                           ;	WRTC = 0x1, unprogrammed default
  4816                           ;	Boot Block Write Protection bit
  4817                           ;	WRTB = 0x1, unprogrammed default
  4818                           ;	Data EEPROM Write Protection bit
  4819                           ;	WRTD = 0x1, unprogrammed default
  4820                           ;	Scanner Enable bit
  4821                           ;	SCANE = 0x1, unprogrammed default
  4822                           ;	Low Voltage Programming Enable bit
  4823                           ;	LVP = 0x1, unprogrammed default
  4824   300007                     	org	3145735
  4825   300007  FF                 	db	255
  4826                           
  4827                           ;Config register CONFIG5L @ 0x300008
  4828                           ;	unspecified, using default values
  4829                           ;	UserNVM Program Memory Code Protection bit
  4830                           ;	CP = 0x1, unprogrammed default
  4831                           ;	DataNVM Memory Code Protection bit
  4832                           ;	CPD = 0x1, unprogrammed default
  4833   300008                     	org	3145736
  4834   300008  FF                 	db	255
  4835                           
  4836                           ;Config register CONFIG5H @ 0x300009
  4837                           ;	unspecified, using default values
  4838   300009                     	org	3145737
  4839   300009  FF                 	db	255
  4840                           
  4841                           ;Config register CONFIG6L @ 0x30000A
  4842                           ;	unspecified, using default values
  4843                           ;	Table Read Protection Block 0
  4844                           ;	EBTR0 = 0x1, unprogrammed default
  4845                           ;	Table Read Protection Block 1
  4846                           ;	EBTR1 = 0x1, unprogrammed default
  4847                           ;	Table Read Protection Block 2
  4848                           ;	EBTR2 = 0x1, unprogrammed default
  4849                           ;	Table Read Protection Block 3
  4850                           ;	EBTR3 = 0x1, unprogrammed default
  4851                           ;	Table Read Protection Block 4
  4852                           ;	EBTR4 = 0x1, unprogrammed default
  4853                           ;	Table Read Protection Block 5
  4854                           ;	EBTR5 = 0x1, unprogrammed default
  4855                           ;	Table Read Protection Block 6
  4856                           ;	EBTR6 = 0x1, unprogrammed default
  4857                           ;	Table Read Protection Block 7
  4858                           ;	EBTR7 = 0x1, unprogrammed default
  4859   30000A                     	org	3145738
  4860   30000A  FF                 	db	255
  4861                           
  4862                           ;Config register CONFIG6H @ 0x30000B
  4863                           ;	unspecified, using default values
  4864                           ;	Boot Block Table Read Protection bit
  4865                           ;	EBTRB = 0x1, unprogrammed default
  4866   30000B                     	org	3145739
  4867   30000B  FF                 	db	255
  4868                           tosu	equ	0xFFF
  4869                           tosh	equ	0xFFE
  4870                           tosl	equ	0xFFD
  4871                           stkptr	equ	0xFFC
  4872                           pclatu	equ	0xFFB
  4873                           pclath	equ	0xFFA
  4874                           pcl	equ	0xFF9
  4875                           tblptru	equ	0xFF8
  4876                           tblptrh	equ	0xFF7
  4877                           tblptrl	equ	0xFF6
  4878                           tablat	equ	0xFF5
  4879                           prodh	equ	0xFF4
  4880                           prodl	equ	0xFF3
  4881                           indf0	equ	0xFEF
  4882                           postinc0	equ	0xFEE
  4883                           postdec0	equ	0xFED
  4884                           preinc0	equ	0xFEC
  4885                           plusw0	equ	0xFEB
  4886                           fsr0h	equ	0xFEA
  4887                           fsr0l	equ	0xFE9
  4888                           wreg	equ	0xFE8
  4889                           indf1	equ	0xFE7
  4890                           postinc1	equ	0xFE6
  4891                           postdec1	equ	0xFE5
  4892                           preinc1	equ	0xFE4
  4893                           plusw1	equ	0xFE3
  4894                           fsr1h	equ	0xFE2
  4895                           fsr1l	equ	0xFE1
  4896                           bsr	equ	0xFE0
  4897                           indf2	equ	0xFDF
  4898                           postinc2	equ	0xFDE
  4899                           postdec2	equ	0xFDD
  4900                           preinc2	equ	0xFDC
  4901                           plusw2	equ	0xFDB
  4902                           fsr2h	equ	0xFDA
  4903                           fsr2l	equ	0xFD9
  4904                           status	equ	0xFD8

Data Sizes:
    Strings     75
    Constant    0
    Data        23
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      94
    BANK0           160      0      28
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_1(CODE[16]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    S2700$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2700$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    sp__Hue2Colour	PTR unsigned char  size(2) Largest target is 11
		 -> STR_10(CODE[9]), STR_9(CODE[11]), STR_8(CODE[7]), STR_7(CODE[5]), 
		 -> STR_6(CODE[7]), STR_5(CODE[10]), STR_4(CODE[6]), STR_3(CODE[4]), 
		 -> STR_2(CODE[1]), 

    White@timerMemory	PTR unsigned int  size(2) Largest target is 6
		 -> timerMemory(BANK0[6]), 

    White@movementMemory	PTR unsigned int  size(2) Largest target is 6
		 -> movementMemory(COMRAM[6]), 

    White@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    White@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    LightBlue_L135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    LightBlue_L135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    Orange_R135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    Orange_R135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    Pink_rev1_L90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    Pink_rev1_L90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    Yellow_rev1_R90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    Yellow_rev1_R90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    Blue_T180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    Blue_T180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    Green_L90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    Green_L90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    Red_R90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    Red_R90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    reverseHalfSquare@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    reverseHalfSquare@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    rotate180left@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    rotate180left@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    Right45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    Right45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    Left45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    Left45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    fullSpeedReverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    fullSpeedReverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    fullSpeedReverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    fullSpeedReverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    fullSpeedReverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    fullSpeedReverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), motorL(COMRAM[9]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    S243DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(ABS[1]), 

    S243DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(ABS[1]), 


Critical Paths under _main in COMRAM

    _main->_White
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _White->_Blue_T180
    _Yellow_rev1_R90->_reverseHalfSquare
    _Red_R90->_reverseHalfSquare
    _Pink_rev1_L90->_reverseHalfSquare
    _fullSpeedAhead->_setMotorPWM
    _Orange_R135->_reverseHalfSquare
    _LightBlue_L135->_reverseHalfSquare
    _Green_L90->_reverseHalfSquare
    _Right45->_turnRight
    _turnRight->_setMotorPWM
    _Blue_T180->_rotate180left
    _rotate180left->_Left45
    _Left45->_turnLeft
    _turnLeft->_setMotorPWM
    _reverseHalfSquare->_fullSpeedReverse
    _stop->_setMotorPWM
    _fullSpeedReverse->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               103   103      0  229294
                         _ClickLEDOn
                  _I2C_2_Master_Init
                    _Interrupts_init
                           _LED_init
                        _Timer0_init
                              _White
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _White                                               18     8     10  228790
                                             39 COMRAM    18     8     10
                          _Blue_T180
                          _Green_L90
                     _LightBlue_L135
                        _Orange_R135
                      _Pink_rev1_L90
                            _Red_R90
                         _TimerReset
                    _Yellow_rev1_R90
                     _fullSpeedAhead
                      _getTimerValue
                  _reverseHalfSquare
                      _rotate180left
                               _stop
 ---------------------------------------------------------------------------------
 (2) _getTimerValue                                        6     4      2      24
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _Yellow_rev1_R90                                      6     2      4   37023
                                             32 COMRAM     6     2      4
                             _Left45
                            _Right45
                         _TimerReset
                     _fullSpeedAhead
                   _fullSpeedReverse
                  _reverseHalfSquare
                               _stop
 ---------------------------------------------------------------------------------
 (2) _Red_R90                                              4     0      4   27180
                                             32 COMRAM     4     0      4
                             _Left45
                            _Right45
                         _TimerReset
                  _reverseHalfSquare
 ---------------------------------------------------------------------------------
 (2) _Pink_rev1_L90                                        6     2      4   36979
                                             32 COMRAM     6     2      4
                             _Left45
                            _Right45
                         _TimerReset
                     _fullSpeedAhead
                   _fullSpeedReverse
                  _reverseHalfSquare
                               _stop
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       7     3      4    2767
                                             19 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _Orange_R135                                          4     0      4   27268
                                             32 COMRAM     4     0      4
                             _Left45
                            _Right45
                         _TimerReset
                  _reverseHalfSquare
 ---------------------------------------------------------------------------------
 (2) _LightBlue_L135                                       4     0      4   27268
                                             32 COMRAM     4     0      4
                             _Left45
                            _Right45
                         _TimerReset
                  _reverseHalfSquare
 ---------------------------------------------------------------------------------
 (2) _Green_L90                                            4     0      4   27180
                                             32 COMRAM     4     0      4
                             _Left45
                            _Right45
                         _TimerReset
                  _reverseHalfSquare
 ---------------------------------------------------------------------------------
 (3) _Right45                                              6     2      4    8900
                                             25 COMRAM     6     2      4
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (4) _turnRight                                            6     2      4    2507
                                             19 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _Blue_T180                                            4     0      4   18824
                                             35 COMRAM     4     0      4
                         _TimerReset
                  _reverseHalfSquare
                      _rotate180left
 ---------------------------------------------------------------------------------
 (2) _rotate180left                                        4     0      4   10140
                                             31 COMRAM     4     0      4
                             _Left45
 ---------------------------------------------------------------------------------
 (3) _Left45                                               6     2      4    9508
                                             25 COMRAM     6     2      4
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (4) _turnLeft                                             6     2      4    2507
                                             19 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _reverseHalfSquare                                    6     2      4    8248
                                             26 COMRAM     6     2      4
                   _fullSpeedReverse
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 5     1      4    4133
                                             19 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _fullSpeedReverse                                     7     3      4    2767
                                             19 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    2133
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _TimerReset                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ClickLEDOn                                           1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClickLEDOn
   _I2C_2_Master_Init
   _Interrupts_init
   _LED_init
   _Timer0_init
   _White
     _Blue_T180
       _TimerReset
       _reverseHalfSquare
         _fullSpeedReverse
           _setMotorPWM
             ___lwdiv
               ___wmul (ARG)
             ___wmul
         _stop
           _setMotorPWM
       _rotate180left
         _Left45
           _stop
           _turnLeft
             _setMotorPWM
     _Green_L90
       _Left45
       _Right45
         _stop
         _turnRight
           _setMotorPWM
       _TimerReset
       _reverseHalfSquare
     _LightBlue_L135
       _Left45
       _Right45
       _TimerReset
       _reverseHalfSquare
     _Orange_R135
       _Left45
       _Right45
       _TimerReset
       _reverseHalfSquare
     _Pink_rev1_L90
       _Left45
       _Right45
       _TimerReset
       _fullSpeedAhead
         _setMotorPWM
       _fullSpeedReverse
       _reverseHalfSquare
       _stop
     _Red_R90
       _Left45
       _Right45
       _TimerReset
       _reverseHalfSquare
     _TimerReset
     _Yellow_rev1_R90
       _Left45
       _Right45
       _TimerReset
       _fullSpeedAhead
       _fullSpeedReverse
       _reverseHalfSquare
       _stop
     _fullSpeedAhead
     _getTimerValue
     _reverseHalfSquare
     _rotate180left
     _stop
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _initDCmotorsPWM
   _initUSART4

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      63        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      1C       5       17.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      5E       1      100.0%
BITBIGSFRhlhlll     52      0       0      42        0.0%
BITBIGSFRhlllh      37      0       0      44        0.0%
BITBIGSFRlllhll     2A      0       0      55        0.0%
BITBIGSFRlllll      26      0       0      61        0.0%
BITBIGSFRllhh       20      0       0      47        0.0%
BITBIGSFRlllhhh     1E      0       0      49        0.0%
BITBIGSFRhhhhhl     1B      0       0      33        0.0%
BITBIGSFRhhllhh     17      0       0      38        0.0%
BITBIGSFRhhhhl      13      0       0      34        0.0%
BITBIGSFRlllhhh     11      0       0      50        0.0%
BITBIGSFRhhhlh       E      0       0      35        0.0%
BITBIGSFRhhhhhh      D      0       0      32        0.0%
BITBIGSFRllhl        C      0       0      48        0.0%
BITBIGSFRlllhll      B      0       0      59        0.0%
BITBIGSFRhlllll      8      0       0      45        0.0%
BITBIGSFRllllh       6      0       0      60        0.0%
BITBIGSFRlllhll      6      0       0      54        0.0%
BITBIGSFRlllhll      5      0       0      57        0.0%
BITBIGSFRlllhlh      5      0       0      53        0.0%
BITBIGSFRhhllhl      5      0       0      39        0.0%
BITBIGSFRlllhll      3      0       0      56        0.0%
BITBIGSFRlllhll      3      0       0      58        0.0%
BITBIGSFRlllhhl      3      0       0      52        0.0%
BITBIGSFRhllh        2      0       0      43        0.0%
BITBIGSFRhhlh        2      0       0      37        0.0%
BITBIGSFRhlhllh      1      0       0      41        0.0%
BITBIGSFRlllhhh      1      0       0      51        0.0%
BITBIGSFRhlhhh       1      0       0      40        0.0%
BITBIGSFRhhhll       1      0       0      36        0.0%
BITBIGSFRlh          1      0       0      46        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7A      62        0.0%
DATA                 0      0      7A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Mar 14 15:53:39 2023

                         l30 1EA8                           l33 1ECE                           l42 1FBA  
                         l27 1EA6                           l36 1FC4                           l45 1FA4  
            ??_getTimerValue 0003          ___wmul@multiplicand 0003               ?_rotate180left 0020  
          ??_Interrupts_init 0001                  Green_L90@mL 0021                  Green_L90@mR 0023  
                        l200 18EC                          l112 1538                          l113 1538  
                        l109 14F8                          l222 185C                          l207 12AC  
                        l216 172E                          l240 1A00                          l232 1B06  
                        l217 1730                          l227 17C6                          l243 1976  
                        l308 1140                          l237 1B86                          l246 1E08  
                        l254 1C04                          l431 1F98                          l343 1F3A  
                        l416 1E7C                          l264 1DB6                          l249 1A86  
                        l274 1484                          l259 1C82                          l284 168A  
                        l269 139A                          l279 15E4                          l481 1FCE  
                        l618 1FB0                          l298 1072                          l627 1EF4  
                        l395 1E48                          l484 1F78                          l478 1F18  
                        l398 1F5A                          wreg 000FE8                         l1125 1CF6  
                       l1118 1CEE                         l2301 16FE                         l2303 1716  
                       l2311 1800                         l2241 1ED0                         l2321 1828  
                       l2305 17C8                         l2401 1FA0                         l2251 1C9E  
                       l2243 1EEC                         l2323 1834                         l2307 17E8  
                       l2411 1AB0                         l2403 1A88                         l2331 1EB8  
                       l2261 1CD8                         l2253 1CA6                         l2325 1842  
                       l2317 1808                         l2309 17F4                         l2501 1D9A  
                       l2333 1732                         l2421 1AF0                         l2413 1AC4  
                       l2405 1AA8                         l2263 1CE0                         l2255 1CAE  
                       l2247 1C84                         l2271 115E                         l2327 1846  
                       l2319 181C                         l2503 1DA2                         l2351 179E  
                       l2335 1752                         l2431 1948                         l2423 18EE  
                       l2415 1AD0                         l2511 12FE                         l2265 1CE2  
                       l2257 1CBC                         l2249 1C8C                         l2281 1228  
                       l2273 11B2                         l2441 1A16                         l2353 17AC  
                       l2345 1772                         l2337 175E                         l2433 195C  
                       l2425 18F0                         l2417 1ADC                         l2521 137E  
                       l2513 1312                         l2505 12AE                         l2329 1EA8  
                       l2601 1E44                         l2611 1EFE                         l2267 1CE8  
                       l2259 1CC2                         l2283 126C                         l2275 11C6  
                       l2371 1B5C                         l2291 16B4                         l2443 1A2E  
                       l2355 17B0                         l2347 1786                         l2339 176A  
                       l2435 1974                         l2427 1904                         l2419 1AEC  
                       l2531 13EC                         l2515 1326                         l2507 12BE  
                       l2451 1E7E                         l2603 1E46                         l2605 1F8C  
                       l2613 1F08                         l2277 11CA                         l2269 1142  
                       l2373 1B6C                         l2365 1B30                         l2357 1B08  
                       l2293 16CC                         l2285 168C                         l2445 1A5A  
                       l2381 198E                         l2437 1DB8                         l2349 1792  
                       l2429 191C                         l2541 1470                         l2533 1400  
                       l2525 139C                         l2517 132A                         l2509 12E6  
                       l2701 1096                         l2461 1E94                         l2453 1E88  
                       l2621 186E                         l2607 1FA6                         l2615 1F0A  
                       l2279 120C                         l2375 1B70                         l2367 1B44  
                       l2359 1B28                         l2295 16D6                         l2287 1692  
                       l2447 1A6E                         l2439 1A02                         l2383 19A6  
                       l2551 15E6                         l2543 1540                         l2535 1414  
                       l2527 13AC                         l2519 1342                         l2711 10F8  
                       l2703 10A2                         l2455 1E8E                         l2391 1FBC  
                       l2631 18C8                         l2623 1894                         l2617 1F16  
                       l2609 1EF6                         l2449 1FC6                         l2369 1B50  
                       l2297 16E2                         l2289 16AA                         l2385 19D2  
                       l2377 1978                         l2553 15F6                         l2545 1550  
                       l2529 13D4                         l2537 141C                         l2481 1B88  
                       l2561 1F62                         l2705 10A4                         l2457 1E90  
                       l2393 1FC0                         l2641 18EA                         l2633 18D2  
                       l2625 1898                         l2643 1E4C                         l2299 16EE  
                       l2387 19E6                         l2379 197A                         l2491 1C16  
                       l2555 1646                         l2547 15A0                         l2539 1458  
                       l2483 1B98                         l2563 1F70                         l2707 10CC  
                       l2715 1102                         l2651 0E4E                         l2459 1E92  
                       l2395 1FB2                         l2635 18D4                         l2627 18BC  
                       l2619 185E                         l2571 1F1E                         l2645 1E5C  
                       l2389 19FE                         l2493 1C52                         l2557 164E  
                       l2549 15A8                         l2485 1BD4                         l2717 1114  
                       l2709 10E0                         l2661 0EA6                         l2653 0E5A  
                       l2397 1FB6                         l2637 18DE                         l2629 18C6  
                       l2581 1F38                         l2573 1F28                         l2647 1E66  
                       l2495 1C5A                         l2487 1BDC                         l2559 1F5C  
                       l2719 1128                         l2671 0F00                         l2663 0EB2  
                       l2655 0E82                         l2399 1F9C                         l2567 1F3E  
                       l2591 1E32                         l2583 1E0A                         l2639 18E0  
                       l2575 1F2A                         l2751 1492                         l2649 1E76  
                       l2497 1D62                         l2489 1C06                         l2681 0FA0  
                       l2673 0F24                         l2657 0E9A                         l2593 1E3C  
                       l2585 1E0E                         l2577 1F34                         l2569 1F1A  
                       l2761 14AA                         l2753 1496                         l2745 1486  
                       l2499 1D72                         l2691 1034                         l2683 0FB8  
                       l2675 0F3C                         l2667 0EC4                         l2659 0E9E  
                       l2595 1E3E                         l2587 1E18                         l2579 1F36  
                       l2771 14C6                         l2763 14AE                         l2755 149A  
                       l2747 148A                         l2693 105A                         l2685 0FDE  
                       l2677 0F62                         l2669 0EE8                         l2597 1E40  
                       l2589 1E28                         l2781 14E2                         l2773 14CE  
                       l2765 14B2                         l2757 149E                         l2749 148E  
                       l2687 0FF6                         l2679 0F7A                         l2695 1072  
                       l2599 1E42                         l2791 1506                         l2783 14EA  
                       l2775 14D2                         l2767 14B6                         l2759 149E  
                       l2697 107A                         l2689 101C                         l2793 150C  
                       l2785 14F2                         l2777 14D6                         l2769 14BE  
                       l2699 107E                         l2787 14F4                         l2779 14DA  
                       l2789 1506                         STR_1 0E01                         STR_3 0E48  
                       STR_4 0E3D                         STR_5 0E1C                         STR_6 0E36  
                       STR_7 0E43                         STR_8 0E2F                         STR_9 0E11  
                       u1200 1716                         u1201 1712                         u1130 1C9E  
                       u1210 172E                         u1131 1C9A                         u1211 172A  
                       u1140 1CBC                         u1220 185C                         u1300 1B98  
                       u1141 1CB8                         u1221 1858                         u1301 1B94  
                       u1150 1CD8                         u1310 1C16                         u1230 1EB8  
                       u1151 1CD4                         u1311 1C12                         u1231 1EB4  
                       u1160 115E                         u1320 1D72                         u1400 0EE8  
                       u1240 1ECE                         u1161 115A                         u1321 1D6E  
                       u1401 0EE4                         u1241 1ECA                         u1170 1228  
                       u1250 17C6                         u1330 12BE                         u1410 0F24  
                       u1171 1224                         u1251 17C2                         u2107 1388  
                       u1331 12BA                         u1411 0F20                         u1260 1B86  
                       u1180 16AA                         u1340 13AC                         u1420 0F62  
                       u1261 1B82                         u1181 16A6                         u2117 13DE  
                       u1341 13A8                         u1421 0F5E                         u1190 16CC  
                       u1350 1550                         u1270 1B06                         u1430 0FA0  
                       u1191 16C8                         u2207 19F0                         u1351 154C  
                       u1271 1B02                         u2127 1462                         u1431 0F9C  
                       u1360 15F6                         u1440 0FDE                 _BAUD4CONbits 000EE9  
                       u2217 1836                         u1361 15F2                         u2137 1AE2  
                       u1441 0FDA                         u2057 1E1E                         u1370 1E5C  
                       u1450 101C                         u1371 1E58                         u2227 1A20  
                       u2147 190E                         u1451 1018                         u2067 0E8C  
                       u1380 1E76                         u1460 105A                         u1381 1E72  
                       u2237 1A4C                         u2157 193A                         u2077 10EA  
                       u1461 1056                         u1470 10CC                         u1390 0EC0  
                       u2247 1A78                         u2167 1966                         u2087 1132  
                       u1471 10C8                         u1391 0EBC                         u1480 1114  
                       u2257 16F4                         u2177 17A0                         u2097 12F0  
                       u1481 1110                         u1490 1506                         _T2PR 000FBC  
                       u2267 1B62                         u2187 1998                         u1491 1502  
                       u2197 19C4          reverseHalfSquare@mL 001B          reverseHalfSquare@mR 001D  
                       _main 1486                         fsr2h 000FDA                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 005F  
                       _stop 168C                   _ClickLEDOn 1E4A                         prodh 000FF4  
                       prodl 000FF3                         start 0028      __end_of_Yellow_rev1_R90 139C  
            __end_of_HighISR 0028                 ___param_bank 000000              __end_of_Red_R90 1C06  
            __end_of_Right45 1978             __end_of_LED_init 1F9A                        ?_main 0001  
                      STR_10 0E26               _LightBlue_L135 15E6                        ?_stop 0014  
            __end_of___lwdiv 1CF8                        i2l624 0024                        _TMR0H 000FD4  
                      _TMR0L 000FD3   __end_of_I2C_2_Master_Start 1FC6                        _White 0E4E  
 __end_of_I2C_2_Master_Write 1FA6            fullSpeedReverse@i 0019                        tablat 000FF5  
                      ttemp5 0060                        ttemp6 0063                        ttemp7 0067  
                      status 000FD8                        wtemp8 0060              __initialization 1CF8  
               __end_of_main 1540                 __end_of_stop 1732              ??_rotate180left 0024  
     __end_of_LightBlue_L135 168C                       ??_main 003A                       ??_stop 0018  
              __activetblptr 000001                ??_Orange_R135 0025                       ?_White 0028  
               ?_setMotorPWM 000E                       _CCPR1H 000FAA                       _CCPR2H 000FA6  
                     _CCPR3H 000F25                       _CCPR4H 000F21                       _RC0PPS 000E62  
                     _RC4REG 000EE3                       _RE2PPS 000E74                       _RD5PPS 000E6F  
                     _RC7PPS 000E69                       _RE4PPS 000E76                       _RD6PPS 000E70  
                     i2l2015 000A                       i2l2017 001A                       i2l2019 0022  
                     _RG6PPS 000E88                    ??_HighISR 0001     __end_of_color_click_init 1E4A  
                     _RX4PPS 000E15                       _TX4REG 000EE4                  ?_ClickLEDOn 0001  
                  ??_Red_R90 0025                       _Left45 1978                    ??_Right45 001E  
           _fullSpeedReverse 1B08             ?_Yellow_rev1_R90 0021                ??_Timer0_init 0001  
               _CCPTMRS0bits 000FAD                       White@i 0038                       ___wmul 1ED0  
              Orange_R135@mL 0021                Orange_R135@mR 0023                    ??___lwdiv 000B  
                 _TimerReset 1FC6                       _colorf 0060              ?_LightBlue_L135 0021  
                     clear_0 1D3E                       clear_1 1D4A           fullSpeedReverse@mL 0014  
         fullSpeedReverse@mR 0016                       _motorL 0045                       _motorR 003C  
                     isa$std 000001                 __pdataCOMRAM 004E                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                     stop@mL 0014                       stop@mR 0016            ??_initDCmotorsPWM 0003  
           __end_of_turnLeft 185E          __end_of_Orange_R135 15E6                   __accesstop 0060  
    __end_of__initialization 1D50              fullSpeedAhead@i 0019            __end_of_Blue_T180 1DB8  
              ___rparam_used 000001                    ?_LED_init 0001              _Interrupts_init 1FA6  
             __pcstackCOMRAM 0001                __end_of_White 1142                 __pidataBANK0 1FD0  
          __end_of_Green_L90 1C84          __end_of_Timer0_init 1F1A                  _ForwardFlag 0058  
                    ??_White 0032                   __pbssBANK0 0060                   ??_LED_init 0001  
                    ?_Left45 001A            _color_writetoaddr 1F3C                 _T2CLKCONbits 000FBF  
         ?_color_writetoaddr 0003                      ?___wmul 0001                  ?_TimerReset 0001  
        ??_color_writetoaddr 0004        __end_of_getTimerValue 1F7A                      _SP4BRGH 000EE6  
                    _SP4BRGL 000EE5                  _Orange_R135 1540                      i2u76_40 001A  
                    i2u76_41 0016                      _SSP2ADD 000ED6                      _SSP2BUF 000ED5  
    __end_of_Interrupts_init 1FB2       color_writetoaddr@value 0003                      _HighISR 0008  
  __end_of_color_writetoaddr 1F5C                      _Red_R90 1B88           _I2C_2_Master_Start 1FBC  
                 _initUSART4 1F1A           _I2C_2_Master_Write 1F9A                      _Right45 18EE  
                    __Hparam 0000                      __Lparam 0000                  _Timer0_init 1EF6  
                    White@mL 0028                      White@mR 002A          ?_I2C_2_Master_Start 0001  
                    ___lwdiv 1C84          ?_I2C_2_Master_Write 0001                 __psmallconst 0E00  
                    __pcinit 1CF8                      __ramtop 0E00                    ?_turnLeft 0014  
                    __ptext0 1486                      __ptext1 1F1A                      __ptext2 185E  
                    __ptext3 1E0A                      __ptext4 1F3C                      __ptext5 1F9A  
                    __ptext6 1FB2                      __ptext7 1FBC                      __ptext8 1EA8  
                    __ptext9 1E7E                      _maxTime 003A                    _T2CONbits 000FBD  
   __end_of_fullSpeedReverse 1B88                    _T2HLTbits 000FBE         ??_I2C_2_Master_Start 0002  
       ??_I2C_2_Master_Write 0002         end_of_initialization 1D50                _Pink_rev1_L90 139C  
               ??_ClickLEDOn 0001            ?_color_click_init 0001               __45drightdelay 0052  
         ??_color_click_init 0005             ??_LightBlue_L135 0025            _reverseHalfSquare 1A02  
                    postdec1 000FE5                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE           ?_reverseHalfSquare 001B        __end_of_rotate180left 1E0A  
            _initDCmotorsPWM 185E                   ??_turnLeft 0018             White@timerMemory 0030  
                  _PORTFbits 000F8E           setMotorPWM@negDuty 0013            __end_of_turnRight 17C8  
        ??_reverseHalfSquare 001F           __end_of_ClickLEDOn 1E7E                    _TRISAbits 000F81  
         setMotorPWM@posDuty 0012                    _TRISCbits 000F83                    _TRISDbits 000F84  
                  _TRISEbits 000F85                    _TRISFbits 000F86                    _TRISGbits 000F87  
                  _TRISHbits 000F88             fullSpeedAhead@mL 0014             fullSpeedAhead@mR 0016  
   color_writetoaddr@address 0004                    Red_R90@mL 0021                    Red_R90@mR 0023  
             _movementMemory 0059               ?_Pink_rev1_L90 0021             ?_Interrupts_init 0001  
                _CCP1CONbits 000FAB                  _CCP2CONbits 000FA7                  _CCP3CONbits 000F26  
                ?_initUSART4 0001                  _CCP4CONbits 000F22    __end_of_reverseHalfSquare 1A88  
                  _Blue_T180 1D62               __end_of_Left45 1A02               _fullSpeedAhead 1A88  
             __end_of___wmul 1EF6                __pidataCOMRAM 1F7A                    _Green_L90 1C06  
                  Right45@mL 001A                    Right45@mR 001C          start_initialization 1CF8  
                __halfsquare 004E                     ??_Left45 001E                   ?_Blue_T180 0024  
    __end_of_initDCmotorsPWM 18EE       __end_of_fullSpeedAhead 1B08                     ??___wmul 0005  
               ??_TimerReset 0001                  __pdataBANK0 0076              ClickLEDOn@power 0001  
                 ?_Green_L90 0021                  __pbssCOMRAM 003A                 ?_Orange_R135 0021  
            ??_Pink_rev1_L90 0025                     ?_HighISR 0001           __end_of_TimerReset 1FD0  
                   ?_Red_R90 0021                     ?_Right45 001A             ___lwdiv@dividend 0007  
               ?_Timer0_init 0001              ?_fullSpeedAhead 0014                    __pintcode 0008  
                   ?___lwdiv 0007              Pink_rev1_L90@mL 0021              Pink_rev1_L90@mR 0023  
                __smallconst 0E00            _I2C_2_Master_Idle 1EA8            _I2C_2_Master_Init 1E7E  
              __45dleftdelay 0054            _I2C_2_Master_Stop 1FB2            ?_fullSpeedReverse 0014  
          ??_Yellow_rev1_R90 0025           ?_I2C_2_Master_Idle 0001              rotate180left@mL 0020  
            rotate180left@mR 0022           ?_I2C_2_Master_Init 0001                ??_setMotorPWM 0010  
         ?_I2C_2_Master_Stop 0001             ___lwdiv@quotient 000B          White@movementMemory 002E  
   initDCmotorsPWM@PWMperiod 0001           ??_fullSpeedReverse 0018          ??_I2C_2_Master_Idle 0001  
        ??_I2C_2_Master_Init 0001               ___wmul@product 0005                     _LATAbits 000F79  
        ??_I2C_2_Master_Stop 0002                     _LATCbits 000F7B                     _LATDbits 000F7C  
                   _LATEbits 000F7D                     _LATFbits 000F7E                     _LATGbits 000F7F  
                   _LATHbits 000F80                     _PIE0bits 000E29                     _LED_init 1F8C  
                   _PIE4bits 000E2D                  turnRight@mL 0014                  turnRight@mR 0016  
                   _PIR0bits 000E33                  ??_Blue_T180 0028                     _PIR4bits 000E37  
           ?_initDCmotorsPWM 0001                     Left45@mL 001A                     Left45@mR 001C  
                   _SSP2CON2 000EDA                     _SSP2STAT 000ED8    __end_of_I2C_2_Master_Idle 1ED0  
  __end_of_I2C_2_Master_Init 1EA8            ___wmul@multiplier 0001    __end_of_I2C_2_Master_Stop 1FBC  
              _movementCount 0056                  ??_Green_L90 0025                 setMotorPWM@m 000E  
I2C_2_Master_Write@data_byte 0002                    _turnRight 1732                     __1square 0050  
                  copy_data0 1D0C                    copy_data1 1D2C          __end_of_setMotorPWM 12AE  
               ??_initUSART4 0001                     __Hrparam 0000                     __Lrparam 0000  
               __Lsmallconst 0E00                   _ANSELDbits 000EA7                   _ANSELFbits 000EB4  
              _getTimerValue 1F5C                  Blue_T180@mL 0024                  Blue_T180@mR 0026  
                 _T0CON0bits 000FD5                   _T0CON1bits 000FD6              ___lwdiv@divisor 0009  
         __end_of_initUSART4 1F3C              ___lwdiv@counter 000D                   ?_turnRight 0014  
                   __ptext10 0E4E                     __ptext11 1F5C                     __ptext20 1732  
                   __ptext12 12AE                     __ptext21 1D62                     __ptext13 1B88  
                   __ptext30 1C84                     __ptext22 1DB8                     __ptext14 139C  
                   __ptext31 1FC6                     __ptext23 1978                     __ptext15 1A88  
                   __ptext32 1EF6                     __ptext24 17C8                     __ptext16 1540  
                   __ptext33 1F8C                     __ptext25 1A02                     __ptext17 15E6  
                   __ptext34 1FA6                     __ptext26 168C                     __ptext18 1C06  
                   __ptext35 1E4A                     __ptext27 1B08                     __ptext19 18EE  
                   __ptext28 1142                     __ptext29 1ED0                 _SSP2CON1bits 000ED9  
               _SSP2CON2bits 000EDA           White@movementCount 002C                   turnLeft@mL 0014  
                 turnLeft@mR 0016               White@tempTimer 0036                   turnRight@i 0018  
           LightBlue_L135@mL 0021             LightBlue_L135@mR 0023           White@retracingDone 0034  
                   isa$xinst 000000                   _RC4STAbits 000EE7                     int$flags 005F  
          Yellow_rev1_R90@mL 0021            Yellow_rev1_R90@mR 0023                     _turnLeft 17C8  
             ?_getTimerValue 0001                   _INTCONbits 000FF2                  _setMotorPWM 1142  
                   intlevel2 0000             ??_fullSpeedAhead 0018                    turnLeft@i 0018  
    getTimerValue@timerCount 0005              _Yellow_rev1_R90 12AE             _color_click_init 1E0A  
              _rotate180left 1DB8                   _SSP2DATPPS 000E1D                   _SSP2CLKPPS 000E1C  
                _timerMemory 0076                  ??_turnRight 0018                   _TX4STAbits 000EE8  
      __end_of_Pink_rev1_L90 1486  
