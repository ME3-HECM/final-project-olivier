

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Mar 11 17:03:07 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18LF67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    36                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    37   000000                     
    38                           ; Generated 06/04/2022 GMT
    39                           ; 
    40                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution. Publication is not required when
    54                           ;        this file is used in an embedded application.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18LF67K40 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72   000000                     
    73                           	psect	idataCOMRAM
    74   00178E                     __pidataCOMRAM:
    75                           	callstack 0
    76                           
    77                           ;initializer for __halfsquare
    78   00178E  03E8               	dw	1000
    79                           
    80                           ;initializer for __1square
    81   001790  07D0               	dw	2000
    82                           
    83                           ;initializer for __45drightdelay
    84   001792  012C               	dw	300
    85                           
    86                           ;initializer for __45dleftdelay
    87   001794  012C               	dw	300
    88                           
    89                           ;initializer for _DataFlag
    90   001796  01                 	db	1
    91   000000                     _TX4REG	set	3812
    92   000000                     _RC4STAbits	set	3815
    93   000000                     _SP4BRGH	set	3814
    94   000000                     _SSP2CON2bits	set	3802
    95   000000                     _RX4PPS	set	3605
    96   000000                     _SSP2CLKPPS	set	3612
    97   000000                     _SSP2DATPPS	set	3613
    98   000000                     _ANSELDbits	set	3751
    99   000000                     _SSP2ADD	set	3798
   100   000000                     _SSP2CON1bits	set	3801
   101   000000                     _RC4REG	set	3811
   102   000000                     _SP4BRGL	set	3813
   103   000000                     _TX4STAbits	set	3816
   104   000000                     _BAUD4CONbits	set	3817
   105   000000                     _SSP2CON2	set	3802
   106   000000                     _TRISDbits	set	3972
   107   000000                     _CCPR4H	set	3873
   108   000000                     _CCPR3H	set	3877
   109   000000                     _SSP2STAT	set	3800
   110   000000                     _TRISGbits	set	3975
   111   000000                     _TRISEbits	set	3973
   112   000000                     _CCPR2H	set	4006
   113   000000                     _CCPR1H	set	4010
   114   000000                     _SSP2BUF	set	3797
   115   000000                     _PIR4bits	set	3639
   116   000000                     _RC0PPS	set	3682
   117   000000                     _RC7PPS	set	3689
   118   000000                     _RD5PPS	set	3695
   119   000000                     _RE2PPS	set	3700
   120   000000                     _RD6PPS	set	3696
   121   000000                     _CCP1CONbits	set	4011
   122   000000                     _CCPTMRS0bits	set	4013
   123   000000                     _T2PR	set	4028
   124   000000                     _T2CONbits	set	4029
   125   000000                     _CCP2CONbits	set	4007
   126   000000                     _CCP3CONbits	set	3878
   127   000000                     _LATCbits	set	3963
   128   000000                     _LATEbits	set	3965
   129   000000                     _TRISCbits	set	3971
   130   000000                     _CCP4CONbits	set	3874
   131   000000                     _LATGbits	set	3967
   132   000000                     _RE4PPS	set	3702
   133   000000                     _RG6PPS	set	3720
   134   000000                     _T2CLKCONbits	set	4031
   135   000000                     _T2HLTbits	set	4030
   136                           
   137                           	psect	smallconst
   138   000E00                     __psmallconst:
   139                           	callstack 0
   140   000E00  00                 	db	0
   141   000E01  52                 	db	82	;'R'
   142   000E02  65                 	db	101	;'e'
   143   000E03  64                 	db	100	;'d'
   144   000E04  3A                 	db	58	;':'
   145   000E05  20                 	db	32
   146   000E06  25                 	db	37
   147   000E07  64                 	db	100	;'d'
   148   000E08  20                 	db	32
   149   000E09  47                 	db	71	;'G'
   150   000E0A  72                 	db	114	;'r'
   151   000E0B  65                 	db	101	;'e'
   152   000E0C  65                 	db	101	;'e'
   153   000E0D  6E                 	db	110	;'n'
   154   000E0E  3A                 	db	58	;':'
   155   000E0F  20                 	db	32
   156   000E10  25                 	db	37
   157   000E11  64                 	db	100	;'d'
   158   000E12  20                 	db	32
   159   000E13  42                 	db	66	;'B'
   160   000E14  6C                 	db	108	;'l'
   161   000E15  75                 	db	117	;'u'
   162   000E16  65                 	db	101	;'e'
   163   000E17  3A                 	db	58	;':'
   164   000E18  20                 	db	32
   165   000E19  25                 	db	37
   166   000E1A  64                 	db	100	;'d'
   167   000E1B  20                 	db	32
   168   000E1C  43                 	db	67	;'C'
   169   000E1D  6C                 	db	108	;'l'
   170   000E1E  65                 	db	101	;'e'
   171   000E1F  61                 	db	97	;'a'
   172   000E20  72                 	db	114	;'r'
   173   000E21  3A                 	db	58	;':'
   174   000E22  20                 	db	32
   175   000E23  25                 	db	37
   176   000E24  64                 	db	100	;'d'
   177   000E25  20                 	db	32
   178   000E26  0D                 	db	13
   179   000E27  00                 	db	0
   180   000E28  00                 	db	0	; dummy byte at the end
   181   000000                     
   182                           ; #config settings
   183                           
   184                           	psect	cinit
   185   00163A                     __pcinit:
   186                           	callstack 0
   187   00163A                     start_initialization:
   188                           	callstack 0
   189   00163A                     __initialization:
   190                           	callstack 0
   191                           
   192                           ; Initialize objects allocated to COMRAM (9 bytes)
   193                           ; load TBLPTR registers with __pidataCOMRAM
   194   00163A  0E8E               	movlw	low __pidataCOMRAM
   195   00163C  6EF6               	movwf	tblptrl,c
   196   00163E  0E17               	movlw	high __pidataCOMRAM
   197   001640  6EF7               	movwf	tblptrh,c
   198   001642  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   199   001644  6EF8               	movwf	tblptru,c
   200   001646  EE00  F053         	lfsr	0,__pdataCOMRAM
   201   00164A  EE10 F009          	lfsr	1,9
   202   00164E                     copy_data0:
   203   00164E  0009               	tblrd		*+
   204   001650  CFF5 FFEE          	movff	tablat,postinc0
   205   001654  50E5               	movf	postdec1,w,c
   206   001656  50E1               	movf	fsr1l,w,c
   207   001658  E1FA               	bnz	copy_data0
   208                           
   209                           ; Clear objects allocated to BANK0 (60 bytes)
   210   00165A  EE00  F060         	lfsr	0,__pbssBANK0
   211   00165E  0E3C               	movlw	60
   212   001660                     clear_0:
   213   001660  6AEE               	clrf	postinc0,c
   214   001662  06E8               	decf	wreg,f,c
   215   001664  E1FD               	bnz	clear_0
   216                           
   217                           ; Clear objects allocated to COMRAM (43 bytes)
   218   001666  EE00  F001         	lfsr	0,__pbssCOMRAM
   219   00166A  0E2B               	movlw	43
   220   00166C                     clear_1:
   221   00166C  6AEE               	clrf	postinc0,c
   222   00166E  06E8               	decf	wreg,f,c
   223   001670  E1FD               	bnz	clear_1
   224   001672                     end_of_initialization:
   225                           	callstack 0
   226   001672                     __end_of__initialization:
   227                           	callstack 0
   228   001672  0E00               	movlw	low (__Lsmallconst shr (0+16))
   229   001674  6EF8               	movwf	tblptru,c
   230   001676  0E0E               	movlw	high __Lsmallconst
   231   001678  6EF7               	movwf	tblptrh,c
   232   00167A  0100               	movlb	0
   233   00167C  EF4D  F009         	goto	_main	;jump to C main() function
   234                           
   235                           	psect	bssCOMRAM
   236   000001                     __pbssCOMRAM:
   237                           	callstack 0
   238   000001                     _EUSART4RXbuf:
   239                           	callstack 0
   240   000001                     	ds	20
   241   000015                     _ForwardFlag:
   242                           	callstack 0
   243   000015                     	ds	1
   244   000016                     _TxBufReadCnt:
   245                           	callstack 0
   246   000016                     	ds	1
   247   000017                     _TxBufWriteCnt:
   248                           	callstack 0
   249   000017                     	ds	1
   250   000018                     _RxBufReadCnt:
   251                           	callstack 0
   252   000018                     	ds	1
   253   000019                     _RxBufWriteCnt:
   254                           	callstack 0
   255   000019                     	ds	1
   256   00001A                     _motorR:
   257                           	callstack 0
   258   00001A                     	ds	9
   259   000023                     _motorL:
   260                           	callstack 0
   261   000023                     	ds	9
   262                           
   263                           	psect	dataCOMRAM
   264   000053                     __pdataCOMRAM:
   265                           	callstack 0
   266   000053                     __halfsquare:
   267                           	callstack 0
   268   000053                     	ds	2
   269   000055                     __1square:
   270                           	callstack 0
   271   000055                     	ds	2
   272   000057                     __45drightdelay:
   273                           	callstack 0
   274   000057                     	ds	2
   275   000059                     __45dleftdelay:
   276                           	callstack 0
   277   000059                     	ds	2
   278   00005B                     _DataFlag:
   279                           	callstack 0
   280   00005B                     	ds	1
   281                           
   282                           	psect	bssBANK0
   283   000060                     __pbssBANK0:
   284                           	callstack 0
   285   000060                     _EUSART4TXbuf:
   286                           	callstack 0
   287   000060                     	ds	60
   288                           
   289                           	psect	cstackCOMRAM
   290   00002C                     __pcstackCOMRAM:
   291                           	callstack 0
   292   00002C                     ??_I2C_2_Master_Idle:
   293   00002C                     ?___wmul:
   294                           	callstack 0
   295   00002C                     initDCmotorsPWM@PWMperiod:
   296                           	callstack 0
   297   00002C                     ___wmul@multiplier:
   298                           	callstack 0
   299                           
   300                           ; 2 bytes @ 0x0
   301   00002C                     	ds	1
   302   00002D                     I2C_2_Master_Write@data_byte:
   303                           	callstack 0
   304                           
   305                           ; 1 bytes @ 0x1
   306   00002D                     	ds	1
   307   00002E                     color_writetoaddr@value:
   308                           	callstack 0
   309   00002E                     ___wmul@multiplicand:
   310                           	callstack 0
   311                           
   312                           ; 2 bytes @ 0x2
   313   00002E                     	ds	1
   314   00002F                     color_writetoaddr@address:
   315                           	callstack 0
   316                           
   317                           ; 1 bytes @ 0x3
   318   00002F                     	ds	1
   319   000030                     ??_color_click_init:
   320   000030                     ___wmul@product:
   321                           	callstack 0
   322                           
   323                           ; 2 bytes @ 0x4
   324   000030                     	ds	2
   325   000032                     ?___lwdiv:
   326                           	callstack 0
   327   000032                     ___lwdiv@dividend:
   328                           	callstack 0
   329                           
   330                           ; 2 bytes @ 0x6
   331   000032                     	ds	2
   332   000034                     ___lwdiv@divisor:
   333                           	callstack 0
   334                           
   335                           ; 2 bytes @ 0x8
   336   000034                     	ds	2
   337   000036                     ___lwdiv@quotient:
   338                           	callstack 0
   339                           
   340                           ; 2 bytes @ 0xA
   341   000036                     	ds	2
   342   000038                     ___lwdiv@counter:
   343                           	callstack 0
   344                           
   345                           ; 1 bytes @ 0xC
   346   000038                     	ds	1
   347   000039                     setMotorPWM@m:
   348                           	callstack 0
   349                           
   350                           ; 2 bytes @ 0xD
   351   000039                     	ds	2
   352   00003B                     ??_setMotorPWM:
   353                           
   354                           ; 1 bytes @ 0xF
   355   00003B                     	ds	2
   356   00003D                     setMotorPWM@posDuty:
   357                           	callstack 0
   358                           
   359                           ; 1 bytes @ 0x11
   360   00003D                     	ds	1
   361   00003E                     setMotorPWM@negDuty:
   362                           	callstack 0
   363                           
   364                           ; 1 bytes @ 0x12
   365   00003E                     	ds	1
   366   00003F                     stop@mL:
   367                           	callstack 0
   368   00003F                     turnLeft@mL:
   369                           	callstack 0
   370   00003F                     turnRight@mL:
   371                           	callstack 0
   372   00003F                     fullSpeedAhead@mL:
   373                           	callstack 0
   374   00003F                     fullSpeedReverse@mL:
   375                           	callstack 0
   376                           
   377                           ; 2 bytes @ 0x13
   378   00003F                     	ds	2
   379   000041                     stop@mR:
   380                           	callstack 0
   381   000041                     turnLeft@mR:
   382                           	callstack 0
   383   000041                     turnRight@mR:
   384                           	callstack 0
   385   000041                     fullSpeedAhead@mR:
   386                           	callstack 0
   387   000041                     fullSpeedReverse@mR:
   388                           	callstack 0
   389                           
   390                           ; 2 bytes @ 0x15
   391   000041                     	ds	2
   392   000043                     ??_fullSpeedAhead:
   393   000043                     ??_fullSpeedReverse:
   394   000043                     turnLeft@i:
   395                           	callstack 0
   396   000043                     turnRight@i:
   397                           	callstack 0
   398                           
   399                           ; 2 bytes @ 0x17
   400   000043                     	ds	1
   401   000044                     fullSpeedAhead@i:
   402                           	callstack 0
   403   000044                     fullSpeedReverse@i:
   404                           	callstack 0
   405                           
   406                           ; 2 bytes @ 0x18
   407   000044                     	ds	1
   408   000045                     Left45@mL:
   409                           	callstack 0
   410   000045                     Right45@mL:
   411                           	callstack 0
   412                           
   413                           ; 2 bytes @ 0x19
   414   000045                     	ds	2
   415   000047                     Left45@mR:
   416                           	callstack 0
   417   000047                     Right45@mR:
   418                           	callstack 0
   419                           
   420                           ; 2 bytes @ 0x1B
   421   000047                     	ds	2
   422   000049                     ??_Left45:
   423   000049                     ??_Right45:
   424                           
   425                           ; 1 bytes @ 0x1D
   426   000049                     	ds	2
   427   00004B                     Yellow_REV1_R90@mL:
   428                           	callstack 0
   429                           
   430                           ; 2 bytes @ 0x1F
   431   00004B                     	ds	2
   432   00004D                     Yellow_REV1_R90@mR:
   433                           	callstack 0
   434                           
   435                           ; 2 bytes @ 0x21
   436   00004D                     	ds	2
   437   00004F                     ??_Yellow_REV1_R90:
   438                           
   439                           ; 1 bytes @ 0x23
   440   00004F                     	ds	2
   441   000051                     ??_main:
   442                           
   443                           ; 1 bytes @ 0x25
   444   000051                     	ds	2
   445                           
   446 ;;
   447 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   448 ;;
   449 ;; *************** function _main *****************
   450 ;; Defined at:
   451 ;;		line 14 in file "main.c"
   452 ;; Parameters:    Size  Location     Type
   453 ;;		None
   454 ;; Auto vars:     Size  Location     Type
   455 ;;  data           30    0        unsigned char [30]
   456 ;;  PWMcycle        2    0        unsigned int 
   457 ;; Return value:  Size  Location     Type
   458 ;;                  1    wreg      void 
   459 ;; Registers used:
   460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   461 ;; Tracked objects:
   462 ;;		On entry : 0/0
   463 ;;		On exit  : 0/0
   464 ;;		Unchanged: 0/0
   465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   468 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   469 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   470 ;;Total ram usage:        2 bytes
   471 ;; Hardware stack levels required when called: 5
   472 ;; This function calls:
   473 ;;		_I2C_2_Master_Init
   474 ;;		_Yellow_REV1_R90
   475 ;;		_color_click_init
   476 ;;		_initDCmotorsPWM
   477 ;;		_initUSART4
   478 ;; This function is called by:
   479 ;;		Startup code after reset
   480 ;; This function uses a non-reentrant model
   481 ;;
   482                           
   483                           	psect	text0
   484   00129A                     __ptext0:
   485                           	callstack 0
   486   00129A                     _main:
   487                           	callstack 26
   488   00129A                     
   489                           ;main.c: 15:     char data[30];;main.c: 16:     initUSART4();
   490   00129A  EC96  F00B         	call	_initUSART4	;wreg free
   491   00129E                     
   492                           ;main.c: 17:     color_click_init();
   493   00129E  EC40  F00B         	call	_color_click_init	;wreg free
   494   0012A2                     
   495                           ;main.c: 18:     I2C_2_Master_Init();
   496   0012A2  EC5A  F00B         	call	_I2C_2_Master_Init	;wreg free
   497   0012A6                     
   498                           ;main.c: 21:     initDCmotorsPWM(PWMcycle);
   499   0012A6  0E00               	movlw	0
   500   0012A8  6E2D               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   501   0012AA  0E63               	movlw	99
   502   0012AC  6E2C               	movwf	initDCmotorsPWM@PWMperiod^0,c
   503   0012AE  EC97  F009         	call	_initDCmotorsPWM	;wreg free
   504   0012B2                     
   505                           ;main.c: 23:     motorL.power=0;
   506   0012B2  0E00               	movlw	0
   507   0012B4  6E23               	movwf	_motorL^0,c
   508   0012B6                     
   509                           ;main.c: 24:     motorL.direction=1;
   510   0012B6  0E01               	movlw	1
   511   0012B8  6E24               	movwf	(_motorL+1)^0,c
   512   0012BA                     
   513                           ;main.c: 25:     motorL.brakemode=1;
   514   0012BA  0E01               	movlw	1
   515   0012BC  6E25               	movwf	(_motorL+2)^0,c
   516   0012BE                     
   517                           ;main.c: 26:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   518   0012BE  0EAA               	movlw	170
   519   0012C0  6E28               	movwf	(_motorL+5)^0,c
   520   0012C2  0E0F               	movlw	15
   521   0012C4  6E29               	movwf	(_motorL+6)^0,c
   522   0012C6                     
   523                           ;main.c: 27:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   524   0012C6  0EA6               	movlw	166
   525   0012C8  6E2A               	movwf	(_motorL+7)^0,c
   526   0012CA  0E0F               	movlw	15
   527   0012CC  6E2B               	movwf	(_motorL+8)^0,c
   528   0012CE                     
   529                           ;main.c: 28:     motorL.PWMperiod=PWMcycle;
   530   0012CE  0E00               	movlw	0
   531   0012D0  6E27               	movwf	(_motorL+4)^0,c
   532   0012D2  0E63               	movlw	99
   533   0012D4  6E26               	movwf	(_motorL+3)^0,c
   534   0012D6                     
   535                           ;main.c: 30:     motorR.power=0;
   536   0012D6  0E00               	movlw	0
   537   0012D8  6E1A               	movwf	_motorR^0,c
   538   0012DA                     
   539                           ;main.c: 31:     motorR.direction=1;
   540   0012DA  0E01               	movlw	1
   541   0012DC  6E1B               	movwf	(_motorR+1)^0,c
   542   0012DE                     
   543                           ;main.c: 32:     motorR.brakemode=1;
   544   0012DE  0E01               	movlw	1
   545   0012E0  6E1C               	movwf	(_motorR+2)^0,c
   546                           
   547                           ;main.c: 33:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   548   0012E2  0E25               	movlw	37
   549   0012E4  6E1F               	movwf	(_motorR+5)^0,c
   550   0012E6  0E0F               	movlw	15
   551   0012E8  6E20               	movwf	(_motorR+6)^0,c
   552                           
   553                           ;main.c: 34:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   554   0012EA  0E21               	movlw	33
   555   0012EC  6E21               	movwf	(_motorR+7)^0,c
   556   0012EE  0E0F               	movlw	15
   557   0012F0  6E22               	movwf	(_motorR+8)^0,c
   558   0012F2                     
   559                           ;main.c: 35:     motorR.PWMperiod=PWMcycle;
   560   0012F2  0E00               	movlw	0
   561   0012F4  6E1E               	movwf	(_motorR+4)^0,c
   562   0012F6  0E63               	movlw	99
   563   0012F8  6E1D               	movwf	(_motorR+3)^0,c
   564   0012FA                     l1975:
   565                           
   566                           ;main.c: 38:         Yellow_REV1_R90(&motorL,&motorR);
   567   0012FA  0E23               	movlw	low _motorL
   568   0012FC  6E4B               	movwf	Yellow_REV1_R90@mL^0,c
   569   0012FE  0E00               	movlw	high _motorL
   570   001300  6E4C               	movwf	(Yellow_REV1_R90@mL+1)^0,c
   571   001302  0E1A               	movlw	low _motorR
   572   001304  6E4D               	movwf	Yellow_REV1_R90@mR^0,c
   573   001306  0E00               	movlw	high _motorR
   574   001308  6E4E               	movwf	(Yellow_REV1_R90@mR+1)^0,c
   575   00130A  ECCB  F007         	call	_Yellow_REV1_R90	;wreg free
   576   00130E                     
   577                           ;main.c: 40:         _delay((unsigned long)((1000)*(64000000/4000.0)));
   578   00130E  0E52               	movlw	82
   579   001310  6E52               	movwf	(??_main+1)^0,c
   580   001312  0E2B               	movlw	43
   581   001314  6E51               	movwf	??_main^0,c
   582   001316  0E00               	movlw	0
   583   001318                     u847:
   584   001318  2EE8               	decfsz	wreg,f,c
   585   00131A  D7FE               	bra	u847
   586   00131C  2E51               	decfsz	??_main^0,f,c
   587   00131E  D7FC               	bra	u847
   588   001320  2E52               	decfsz	(??_main+1)^0,f,c
   589   001322  D7FA               	bra	u847
   590   001324  D000               	nop2	
   591   001326  EF7D  F009         	goto	l1975
   592   00132A  EF00  F000         	goto	start
   593   00132E                     __end_of_main:
   594                           	callstack 0
   595                           
   596 ;; *************** function _initUSART4 *****************
   597 ;; Defined at:
   598 ;;		line 5 in file "serial.c"
   599 ;; Parameters:    Size  Location     Type
   600 ;;		None
   601 ;; Auto vars:     Size  Location     Type
   602 ;;		None
   603 ;; Return value:  Size  Location     Type
   604 ;;                  1    wreg      void 
   605 ;; Registers used:
   606 ;;		wreg, status,2
   607 ;; Tracked objects:
   608 ;;		On entry : 0/0
   609 ;;		On exit  : 0/0
   610 ;;		Unchanged: 0/0
   611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   616 ;;Total ram usage:        0 bytes
   617 ;; Hardware stack levels used: 1
   618 ;; This function calls:
   619 ;;		Nothing
   620 ;; This function is called by:
   621 ;;		_main
   622 ;; This function uses a non-reentrant model
   623 ;;
   624                           
   625                           	psect	text1
   626   00172C                     __ptext1:
   627                           	callstack 0
   628   00172C                     _initUSART4:
   629                           	callstack 30
   630   00172C                     
   631                           ;serial.c: 6:     TRISCbits.TRISC4=1;
   632   00172C  8883               	bsf	131,4,c	;volatile
   633                           
   634                           ;serial.c: 7:     TRISCbits.TRISC1=1;
   635   00172E  8283               	bsf	131,1,c	;volatile
   636   001730                     
   637                           ;serial.c: 8:     RC0PPS = 0x12;
   638   001730  0E12               	movlw	18
   639   001732  010E               	movlb	14	; () banked
   640   001734  6F62               	movwf	98,b	;volatile
   641                           
   642                           ;serial.c: 9:     RX4PPS = 0x11;
   643   001736  0E11               	movlw	17
   644   001738  6F15               	movwf	21,b	;volatile
   645   00173A                     
   646                           ; BSR set to: 14
   647                           ;serial.c: 10:     BAUD4CONbits.BRG16 = 0;
   648   00173A  97E9               	bcf	233,3,b	;volatile
   649   00173C                     
   650                           ; BSR set to: 14
   651                           ;serial.c: 11:     TX4STAbits.BRGH = 0;
   652   00173C  95E8               	bcf	232,2,b	;volatile
   653                           
   654                           ;serial.c: 13:     SP4BRGL = 51;
   655   00173E  0E33               	movlw	51
   656   001740  6FE5               	movwf	229,b	;volatile
   657                           
   658                           ;serial.c: 14:     SP4BRGH = 0;
   659   001742  0E00               	movlw	0
   660   001744  6FE6               	movwf	230,b	;volatile
   661   001746                     
   662                           ; BSR set to: 14
   663                           ;serial.c: 16:     RC4STAbits.CREN = 1;
   664   001746  89E7               	bsf	231,4,b	;volatile
   665   001748                     
   666                           ; BSR set to: 14
   667                           ;serial.c: 17:     TX4STAbits.TXEN = 1;
   668   001748  8BE8               	bsf	232,5,b	;volatile
   669   00174A                     
   670                           ; BSR set to: 14
   671                           ;serial.c: 18:     RC4STAbits.SPEN = 1;
   672   00174A  8FE7               	bsf	231,7,b	;volatile
   673   00174C                     
   674                           ; BSR set to: 14
   675   00174C  0012               	return		;funcret
   676   00174E                     __end_of_initUSART4:
   677                           	callstack 0
   678                           
   679 ;; *************** function _initDCmotorsPWM *****************
   680 ;; Defined at:
   681 ;;		line 7 in file "dc_motor.c"
   682 ;; Parameters:    Size  Location     Type
   683 ;;  PWMperiod       2    0[COMRAM] unsigned int 
   684 ;; Auto vars:     Size  Location     Type
   685 ;;		None
   686 ;; Return value:  Size  Location     Type
   687 ;;                  1    wreg      void 
   688 ;; Registers used:
   689 ;;		wreg, status,2
   690 ;; Tracked objects:
   691 ;;		On entry : 0/0
   692 ;;		On exit  : 0/0
   693 ;;		Unchanged: 0/0
   694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   695 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   698 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   699 ;;Total ram usage:        2 bytes
   700 ;; Hardware stack levels used: 1
   701 ;; This function calls:
   702 ;;		Nothing
   703 ;; This function is called by:
   704 ;;		_main
   705 ;; This function uses a non-reentrant model
   706 ;;
   707                           
   708                           	psect	text2
   709   00132E                     __ptext2:
   710                           	callstack 0
   711   00132E                     _initDCmotorsPWM:
   712                           	callstack 30
   713   00132E                     
   714                           ;dc_motor.c: 9:     TRISEbits.TRISE2=0;
   715   00132E  9485               	bcf	133,2,c	;volatile
   716                           
   717                           ;dc_motor.c: 10:     TRISCbits.TRISC7=0;
   718   001330  9E83               	bcf	131,7,c	;volatile
   719                           
   720                           ;dc_motor.c: 11:     TRISEbits.TRISE4=0;
   721   001332  9885               	bcf	133,4,c	;volatile
   722                           
   723                           ;dc_motor.c: 12:     TRISGbits.TRISG6=0;
   724   001334  9C87               	bcf	135,6,c	;volatile
   725                           
   726                           ;dc_motor.c: 14:     LATEbits.LATE2=0;
   727   001336  947D               	bcf	125,2,c	;volatile
   728                           
   729                           ;dc_motor.c: 15:     LATCbits.LATC7=0;
   730   001338  9E7B               	bcf	123,7,c	;volatile
   731                           
   732                           ;dc_motor.c: 16:     LATEbits.LATE4=0;
   733   00133A  987D               	bcf	125,4,c	;volatile
   734                           
   735                           ;dc_motor.c: 17:     LATGbits.LATG6=0;
   736   00133C  9C7F               	bcf	127,6,c	;volatile
   737   00133E                     
   738                           ;dc_motor.c: 20:     RE2PPS=0x05;
   739   00133E  0E05               	movlw	5
   740   001340  010E               	movlb	14	; () banked
   741   001342  6F74               	movwf	116,b	;volatile
   742                           
   743                           ;dc_motor.c: 21:     RE4PPS=0x06;
   744   001344  0E06               	movlw	6
   745   001346  6F76               	movwf	118,b	;volatile
   746                           
   747                           ;dc_motor.c: 22:     RC7PPS=0x07;
   748   001348  0E07               	movlw	7
   749   00134A  6F69               	movwf	105,b	;volatile
   750                           
   751                           ;dc_motor.c: 23:     RG6PPS=0x08;
   752   00134C  0E08               	movlw	8
   753   00134E  6F88               	movwf	136,b	;volatile
   754                           
   755                           ;dc_motor.c: 26:     T2CONbits.CKPS=0b100;
   756   001350  50BD               	movf	189,w,c	;volatile
   757   001352  0B8F               	andlw	-113
   758   001354  0940               	iorlw	64
   759   001356  6EBD               	movwf	189,c	;volatile
   760                           
   761                           ;dc_motor.c: 27:     T2HLTbits.MODE=0b00000;
   762   001358  0EE0               	movlw	-32
   763   00135A  16BE               	andwf	190,f,c	;volatile
   764                           
   765                           ;dc_motor.c: 28:     T2CLKCONbits.CS=0b0001;
   766   00135C  50BF               	movf	191,w,c	;volatile
   767   00135E  0BF0               	andlw	-16
   768   001360  0901               	iorlw	1
   769   001362  6EBF               	movwf	191,c	;volatile
   770   001364                     
   771                           ; BSR set to: 14
   772                           ;dc_motor.c: 31:     T2PR=PWMperiod;
   773   001364  C02C  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
   774   001368                     
   775                           ; BSR set to: 14
   776                           ;dc_motor.c: 32:     T2CONbits.ON=1;
   777   001368  8EBD               	bsf	189,7,c	;volatile
   778                           
   779                           ;dc_motor.c: 36:     CCPR1H=0;
   780   00136A  0E00               	movlw	0
   781   00136C  6EAA               	movwf	170,c	;volatile
   782                           
   783                           ;dc_motor.c: 37:     CCPR2H=0;
   784   00136E  0E00               	movlw	0
   785   001370  6EA6               	movwf	166,c	;volatile
   786                           
   787                           ;dc_motor.c: 38:     CCPR3H=0;
   788   001372  0E00               	movlw	0
   789   001374  010F               	movlb	15	; () banked
   790   001376  6F25               	movwf	37,b	;volatile
   791                           
   792                           ;dc_motor.c: 39:     CCPR4H=0;
   793   001378  0E00               	movlw	0
   794   00137A  6F21               	movwf	33,b	;volatile
   795                           
   796                           ;dc_motor.c: 42:     CCPTMRS0bits.C1TSEL=0;
   797   00137C  0EFC               	movlw	-4
   798   00137E  16AD               	andwf	173,f,c	;volatile
   799                           
   800                           ;dc_motor.c: 43:     CCPTMRS0bits.C2TSEL=0;
   801   001380  0EF3               	movlw	-13
   802   001382  16AD               	andwf	173,f,c	;volatile
   803                           
   804                           ;dc_motor.c: 44:     CCPTMRS0bits.C3TSEL=0;
   805   001384  0ECF               	movlw	-49
   806   001386  16AD               	andwf	173,f,c	;volatile
   807                           
   808                           ;dc_motor.c: 45:     CCPTMRS0bits.C4TSEL=0;
   809   001388  0E3F               	movlw	-193
   810   00138A  16AD               	andwf	173,f,c	;volatile
   811   00138C                     
   812                           ; BSR set to: 15
   813                           ;dc_motor.c: 48:     CCP1CONbits.FMT=1;
   814   00138C  88AB               	bsf	171,4,c	;volatile
   815                           
   816                           ;dc_motor.c: 49:     CCP1CONbits.CCP1MODE=0b1100;
   817   00138E  50AB               	movf	171,w,c	;volatile
   818   001390  0BF0               	andlw	-16
   819   001392  090C               	iorlw	12
   820   001394  6EAB               	movwf	171,c	;volatile
   821   001396                     
   822                           ; BSR set to: 15
   823                           ;dc_motor.c: 50:     CCP1CONbits.EN=1;
   824   001396  8EAB               	bsf	171,7,c	;volatile
   825   001398                     
   826                           ; BSR set to: 15
   827                           ;dc_motor.c: 52:     CCP2CONbits.FMT=1;
   828   001398  88A7               	bsf	167,4,c	;volatile
   829                           
   830                           ;dc_motor.c: 53:     CCP2CONbits.CCP2MODE=0b1100;
   831   00139A  50A7               	movf	167,w,c	;volatile
   832   00139C  0BF0               	andlw	-16
   833   00139E  090C               	iorlw	12
   834   0013A0  6EA7               	movwf	167,c	;volatile
   835   0013A2                     
   836                           ; BSR set to: 15
   837                           ;dc_motor.c: 54:     CCP2CONbits.EN=1;
   838   0013A2  8EA7               	bsf	167,7,c	;volatile
   839   0013A4                     
   840                           ; BSR set to: 15
   841                           ;dc_motor.c: 56:     CCP3CONbits.FMT=1;
   842   0013A4  8926               	bsf	38,4,b	;volatile
   843                           
   844                           ;dc_motor.c: 57:     CCP3CONbits.CCP3MODE=0b1100;
   845   0013A6  5126               	movf	38,w,b	;volatile
   846   0013A8  0BF0               	andlw	-16
   847   0013AA  090C               	iorlw	12
   848   0013AC  6F26               	movwf	38,b	;volatile
   849   0013AE                     
   850                           ; BSR set to: 15
   851                           ;dc_motor.c: 58:     CCP3CONbits.EN=1;
   852   0013AE  8F26               	bsf	38,7,b	;volatile
   853   0013B0                     
   854                           ; BSR set to: 15
   855                           ;dc_motor.c: 60:     CCP4CONbits.FMT=1;
   856   0013B0  8922               	bsf	34,4,b	;volatile
   857                           
   858                           ;dc_motor.c: 61:     CCP4CONbits.CCP4MODE=0b1100;
   859   0013B2  5122               	movf	34,w,b	;volatile
   860   0013B4  0BF0               	andlw	-16
   861   0013B6  090C               	iorlw	12
   862   0013B8  6F22               	movwf	34,b	;volatile
   863   0013BA                     
   864                           ; BSR set to: 15
   865                           ;dc_motor.c: 62:     CCP4CONbits.EN=1;
   866   0013BA  8F22               	bsf	34,7,b	;volatile
   867   0013BC                     
   868                           ; BSR set to: 15
   869   0013BC  0012               	return		;funcret
   870   0013BE                     __end_of_initDCmotorsPWM:
   871                           	callstack 0
   872                           
   873 ;; *************** function _color_click_init *****************
   874 ;; Defined at:
   875 ;;		line 6 in file "color.c"
   876 ;; Parameters:    Size  Location     Type
   877 ;;		None
   878 ;; Auto vars:     Size  Location     Type
   879 ;;		None
   880 ;; Return value:  Size  Location     Type
   881 ;;                  1    wreg      void 
   882 ;; Registers used:
   883 ;;		wreg, status,2, status,0, cstack
   884 ;; Tracked objects:
   885 ;;		On entry : 0/0
   886 ;;		On exit  : 0/0
   887 ;;		Unchanged: 0/0
   888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   891 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   892 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   893 ;;Total ram usage:        1 bytes
   894 ;; Hardware stack levels used: 1
   895 ;; Hardware stack levels required when called: 3
   896 ;; This function calls:
   897 ;;		_I2C_2_Master_Init
   898 ;;		_color_writetoaddr
   899 ;; This function is called by:
   900 ;;		_main
   901 ;; This function uses a non-reentrant model
   902 ;;
   903                           
   904                           	psect	text3
   905   001680                     __ptext3:
   906                           	callstack 0
   907   001680                     _color_click_init:
   908                           	callstack 27
   909   001680                     
   910                           ;color.c: 9:     I2C_2_Master_Init();
   911   001680  EC5A  F00B         	call	_I2C_2_Master_Init	;wreg free
   912   001684                     
   913                           ;color.c: 12:   color_writetoaddr(0x00, 0x01);
   914   001684  0E01               	movlw	1
   915   001686  6E2E               	movwf	color_writetoaddr@value^0,c
   916   001688  0E00               	movlw	0
   917   00168A  ECA7  F00B         	call	_color_writetoaddr
   918   00168E                     
   919                           ;color.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
   920   00168E  0E3F               	movlw	63
   921   001690  6E30               	movwf	??_color_click_init^0,c
   922   001692  0E55               	movlw	85
   923   001694                     u857:
   924   001694  2EE8               	decfsz	wreg,f,c
   925   001696  D7FE               	bra	u857
   926   001698  2E30               	decfsz	??_color_click_init^0,f,c
   927   00169A  D7FC               	bra	u857
   928   00169C  F000               	nop	
   929   00169E                     
   930                           ;color.c: 16:  color_writetoaddr(0x00, 0x03);
   931   00169E  0E03               	movlw	3
   932   0016A0  6E2E               	movwf	color_writetoaddr@value^0,c
   933   0016A2  0E00               	movlw	0
   934   0016A4  ECA7  F00B         	call	_color_writetoaddr
   935   0016A8                     
   936                           ;color.c: 19:  color_writetoaddr(0x01, 0xD5);
   937   0016A8  0ED5               	movlw	213
   938   0016AA  6E2E               	movwf	color_writetoaddr@value^0,c
   939   0016AC  0E01               	movlw	1
   940   0016AE  ECA7  F00B         	call	_color_writetoaddr
   941   0016B2  0012               	return		;funcret
   942   0016B4                     __end_of_color_click_init:
   943                           	callstack 0
   944                           
   945 ;; *************** function _color_writetoaddr *****************
   946 ;; Defined at:
   947 ;;		line 22 in file "color.c"
   948 ;; Parameters:    Size  Location     Type
   949 ;;  address         1    wreg     unsigned char 
   950 ;;  value           1    2[COMRAM] unsigned char 
   951 ;; Auto vars:     Size  Location     Type
   952 ;;  address         1    3[COMRAM] unsigned char 
   953 ;; Return value:  Size  Location     Type
   954 ;;                  1    wreg      void 
   955 ;; Registers used:
   956 ;;		wreg, status,2, status,0, cstack
   957 ;; Tracked objects:
   958 ;;		On entry : 0/0
   959 ;;		On exit  : 0/0
   960 ;;		Unchanged: 0/0
   961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   962 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   963 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   965 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   966 ;;Total ram usage:        2 bytes
   967 ;; Hardware stack levels used: 1
   968 ;; Hardware stack levels required when called: 2
   969 ;; This function calls:
   970 ;;		_I2C_2_Master_Start
   971 ;;		_I2C_2_Master_Stop
   972 ;;		_I2C_2_Master_Write
   973 ;; This function is called by:
   974 ;;		_color_click_init
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978                           	psect	text4
   979   00174E                     __ptext4:
   980                           	callstack 0
   981   00174E                     _color_writetoaddr:
   982                           	callstack 27
   983                           
   984                           ;incstack = 0
   985                           ;color_writetoaddr@address stored from wreg
   986   00174E  6E2F               	movwf	color_writetoaddr@address^0,c
   987   001750                     
   988                           ;color.c: 23:     I2C_2_Master_Start();
   989   001750  ECC2  F00B         	call	_I2C_2_Master_Start	;wreg free
   990                           
   991                           ;color.c: 24:     I2C_2_Master_Write(0x52 | 0x00);
   992   001754  0E52               	movlw	82
   993   001756  ECB7  F00B         	call	_I2C_2_Master_Write
   994                           
   995                           ;color.c: 25:     I2C_2_Master_Write(0x80 | address);
   996   00175A  502F               	movf	color_writetoaddr@address^0,w,c
   997   00175C  0980               	iorlw	128
   998   00175E  ECB7  F00B         	call	_I2C_2_Master_Write
   999                           
  1000                           ;color.c: 26:     I2C_2_Master_Write(value);
  1001   001762  502E               	movf	color_writetoaddr@value^0,w,c
  1002   001764  ECB7  F00B         	call	_I2C_2_Master_Write
  1003                           
  1004                           ;color.c: 27:     I2C_2_Master_Stop();
  1005   001768  ECBD  F00B         	call	_I2C_2_Master_Stop	;wreg free
  1006   00176C  0012               	return		;funcret
  1007   00176E                     __end_of_color_writetoaddr:
  1008                           	callstack 0
  1009                           
  1010 ;; *************** function _I2C_2_Master_Write *****************
  1011 ;; Defined at:
  1012 ;;		line 45 in file "i2c.c"
  1013 ;; Parameters:    Size  Location     Type
  1014 ;;  data_byte       1    wreg     unsigned char 
  1015 ;; Auto vars:     Size  Location     Type
  1016 ;;  data_byte       1    1[COMRAM] unsigned char 
  1017 ;; Return value:  Size  Location     Type
  1018 ;;                  1    wreg      void 
  1019 ;; Registers used:
  1020 ;;		wreg, status,2, status,0, cstack
  1021 ;; Tracked objects:
  1022 ;;		On entry : 0/0
  1023 ;;		On exit  : 0/0
  1024 ;;		Unchanged: 0/0
  1025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1027 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1029 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1030 ;;Total ram usage:        1 bytes
  1031 ;; Hardware stack levels used: 1
  1032 ;; Hardware stack levels required when called: 1
  1033 ;; This function calls:
  1034 ;;		_I2C_2_Master_Idle
  1035 ;; This function is called by:
  1036 ;;		_color_writetoaddr
  1037 ;;		_color_read_Red
  1038 ;;		_color_read_Green
  1039 ;;		_color_read_Blue
  1040 ;;		_color_read_Clear
  1041 ;; This function uses a non-reentrant model
  1042 ;;
  1043                           
  1044                           	psect	text5
  1045   00176E                     __ptext5:
  1046                           	callstack 0
  1047   00176E                     _I2C_2_Master_Write:
  1048                           	callstack 27
  1049                           
  1050                           ;incstack = 0
  1051                           ;I2C_2_Master_Write@data_byte stored from wreg
  1052   00176E  6E2D               	movwf	I2C_2_Master_Write@data_byte^0,c
  1053   001770                     
  1054                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  1055   001770  EC6F  F00B         	call	_I2C_2_Master_Idle	;wreg free
  1056   001774                     
  1057                           ;i2c.c: 48:   SSP2BUF = data_byte;
  1058   001774  C02D  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  1059   001778  0012               	return		;funcret
  1060   00177A                     __end_of_I2C_2_Master_Write:
  1061                           	callstack 0
  1062                           
  1063 ;; *************** function _I2C_2_Master_Stop *****************
  1064 ;; Defined at:
  1065 ;;		line 39 in file "i2c.c"
  1066 ;; Parameters:    Size  Location     Type
  1067 ;;		None
  1068 ;; Auto vars:     Size  Location     Type
  1069 ;;		None
  1070 ;; Return value:  Size  Location     Type
  1071 ;;                  1    wreg      void 
  1072 ;; Registers used:
  1073 ;;		wreg, status,2, status,0, cstack
  1074 ;; Tracked objects:
  1075 ;;		On entry : 0/0
  1076 ;;		On exit  : 0/0
  1077 ;;		Unchanged: 0/0
  1078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1083 ;;Total ram usage:        0 bytes
  1084 ;; Hardware stack levels used: 1
  1085 ;; Hardware stack levels required when called: 1
  1086 ;; This function calls:
  1087 ;;		_I2C_2_Master_Idle
  1088 ;; This function is called by:
  1089 ;;		_color_writetoaddr
  1090 ;;		_color_read_Red
  1091 ;;		_color_read_Green
  1092 ;;		_color_read_Blue
  1093 ;;		_color_read_Clear
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	text6
  1098   00177A                     __ptext6:
  1099                           	callstack 0
  1100   00177A                     _I2C_2_Master_Stop:
  1101                           	callstack 27
  1102   00177A                     
  1103                           ;i2c.c: 41:   I2C_2_Master_Idle();
  1104   00177A  EC6F  F00B         	call	_I2C_2_Master_Idle	;wreg free
  1105   00177E                     
  1106                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  1107   00177E  010E               	movlb	14	; () banked
  1108   001780  85DA               	bsf	218,2,b	;volatile
  1109   001782                     
  1110                           ; BSR set to: 14
  1111   001782  0012               	return		;funcret
  1112   001784                     __end_of_I2C_2_Master_Stop:
  1113                           	callstack 0
  1114                           
  1115 ;; *************** function _I2C_2_Master_Start *****************
  1116 ;; Defined at:
  1117 ;;		line 27 in file "i2c.c"
  1118 ;; Parameters:    Size  Location     Type
  1119 ;;		None
  1120 ;; Auto vars:     Size  Location     Type
  1121 ;;		None
  1122 ;; Return value:  Size  Location     Type
  1123 ;;                  1    wreg      void 
  1124 ;; Registers used:
  1125 ;;		wreg, status,2, status,0, cstack
  1126 ;; Tracked objects:
  1127 ;;		On entry : 0/0
  1128 ;;		On exit  : 0/0
  1129 ;;		Unchanged: 0/0
  1130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1135 ;;Total ram usage:        0 bytes
  1136 ;; Hardware stack levels used: 1
  1137 ;; Hardware stack levels required when called: 1
  1138 ;; This function calls:
  1139 ;;		_I2C_2_Master_Idle
  1140 ;; This function is called by:
  1141 ;;		_color_writetoaddr
  1142 ;;		_color_read_Red
  1143 ;;		_color_read_Green
  1144 ;;		_color_read_Blue
  1145 ;;		_color_read_Clear
  1146 ;; This function uses a non-reentrant model
  1147 ;;
  1148                           
  1149                           	psect	text7
  1150   001784                     __ptext7:
  1151                           	callstack 0
  1152   001784                     _I2C_2_Master_Start:
  1153                           	callstack 27
  1154   001784                     
  1155                           ;i2c.c: 29:   I2C_2_Master_Idle();
  1156   001784  EC6F  F00B         	call	_I2C_2_Master_Idle	;wreg free
  1157   001788                     
  1158                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  1159   001788  010E               	movlb	14	; () banked
  1160   00178A  81DA               	bsf	218,0,b	;volatile
  1161   00178C                     
  1162                           ; BSR set to: 14
  1163   00178C  0012               	return		;funcret
  1164   00178E                     __end_of_I2C_2_Master_Start:
  1165                           	callstack 0
  1166                           
  1167 ;; *************** function _I2C_2_Master_Idle *****************
  1168 ;; Defined at:
  1169 ;;		line 22 in file "i2c.c"
  1170 ;; Parameters:    Size  Location     Type
  1171 ;;		None
  1172 ;; Auto vars:     Size  Location     Type
  1173 ;;		None
  1174 ;; Return value:  Size  Location     Type
  1175 ;;                  1    wreg      void 
  1176 ;; Registers used:
  1177 ;;		wreg, status,2, status,0
  1178 ;; Tracked objects:
  1179 ;;		On entry : 0/0
  1180 ;;		On exit  : 0/0
  1181 ;;		Unchanged: 0/0
  1182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1185 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1186 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1187 ;;Total ram usage:        1 bytes
  1188 ;; Hardware stack levels used: 1
  1189 ;; This function calls:
  1190 ;;		Nothing
  1191 ;; This function is called by:
  1192 ;;		_I2C_2_Master_Start
  1193 ;;		_I2C_2_Master_Stop
  1194 ;;		_I2C_2_Master_Write
  1195 ;;		_I2C_2_Master_RepStart
  1196 ;;		_I2C_2_Master_Read
  1197 ;; This function uses a non-reentrant model
  1198 ;;
  1199                           
  1200                           	psect	text8
  1201   0016DE                     __ptext8:
  1202                           	callstack 0
  1203   0016DE                     _I2C_2_Master_Idle:
  1204                           	callstack 27
  1205   0016DE                     l64:
  1206   0016DE  010E               	movlb	14	; () banked
  1207   0016E0  B5D8               	btfsc	216,2,b	;volatile
  1208   0016E2  EF75  F00B         	goto	u41
  1209   0016E6  EF77  F00B         	goto	u40
  1210   0016EA                     u41:
  1211   0016EA  EF6F  F00B         	goto	l64
  1212   0016EE                     u40:
  1213   0016EE                     
  1214                           ; BSR set to: 14
  1215   0016EE  CEDA F02C          	movff	3802,??_I2C_2_Master_Idle	;volatile
  1216   0016F2  0E1F               	movlw	31
  1217   0016F4  162C               	andwf	??_I2C_2_Master_Idle^0,f,c
  1218   0016F6  A4D8               	btfss	status,2,c
  1219   0016F8  EF80  F00B         	goto	u51
  1220   0016FC  EF82  F00B         	goto	u50
  1221   001700                     u51:
  1222   001700  EF6F  F00B         	goto	l64
  1223   001704                     u50:
  1224   001704                     
  1225                           ; BSR set to: 14
  1226   001704  0012               	return		;funcret
  1227   001706                     __end_of_I2C_2_Master_Idle:
  1228                           	callstack 0
  1229                           
  1230 ;; *************** function _I2C_2_Master_Init *****************
  1231 ;; Defined at:
  1232 ;;		line 4 in file "i2c.c"
  1233 ;; Parameters:    Size  Location     Type
  1234 ;;		None
  1235 ;; Auto vars:     Size  Location     Type
  1236 ;;		None
  1237 ;; Return value:  Size  Location     Type
  1238 ;;                  1    wreg      void 
  1239 ;; Registers used:
  1240 ;;		wreg, status,2
  1241 ;; Tracked objects:
  1242 ;;		On entry : 0/0
  1243 ;;		On exit  : 0/0
  1244 ;;		Unchanged: 0/0
  1245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1250 ;;Total ram usage:        0 bytes
  1251 ;; Hardware stack levels used: 1
  1252 ;; This function calls:
  1253 ;;		Nothing
  1254 ;; This function is called by:
  1255 ;;		_color_click_init
  1256 ;;		_main
  1257 ;; This function uses a non-reentrant model
  1258 ;;
  1259                           
  1260                           	psect	text9
  1261   0016B4                     __ptext9:
  1262                           	callstack 0
  1263   0016B4                     _I2C_2_Master_Init:
  1264                           	callstack 29
  1265   0016B4                     
  1266                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1267   0016B4  010E               	movlb	14	; () banked
  1268   0016B6  51D9               	movf	217,w,b	;volatile
  1269   0016B8  0BF0               	andlw	-16
  1270   0016BA  0908               	iorlw	8
  1271   0016BC  6FD9               	movwf	217,b	;volatile
  1272   0016BE                     
  1273                           ; BSR set to: 14
  1274                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1275   0016BE  8BD9               	bsf	217,5,b	;volatile
  1276                           
  1277                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1278   0016C0  0E9F               	movlw	159
  1279   0016C2  6FD6               	movwf	214,b	;volatile
  1280   0016C4                     
  1281                           ; BSR set to: 14
  1282                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1283   0016C4  8A84               	bsf	132,5,c	;volatile
  1284   0016C6                     
  1285                           ; BSR set to: 14
  1286                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1287   0016C6  8C84               	bsf	132,6,c	;volatile
  1288   0016C8                     
  1289                           ; BSR set to: 14
  1290                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1291   0016C8  9BA7               	bcf	167,5,b	;volatile
  1292   0016CA                     
  1293                           ; BSR set to: 14
  1294                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1295   0016CA  9DA7               	bcf	167,6,b	;volatile
  1296                           
  1297                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1298   0016CC  0E1D               	movlw	29
  1299   0016CE  6F1D               	movwf	29,b	;volatile
  1300                           
  1301                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1302   0016D0  0E1E               	movlw	30
  1303   0016D2  6F1C               	movwf	28,b	;volatile
  1304                           
  1305                           ;i2c.c: 18:   RD5PPS=0x1C;
  1306   0016D4  0E1C               	movlw	28
  1307   0016D6  6F6F               	movwf	111,b	;volatile
  1308                           
  1309                           ;i2c.c: 19:   RD6PPS=0x1B;
  1310   0016D8  0E1B               	movlw	27
  1311   0016DA  6F70               	movwf	112,b	;volatile
  1312   0016DC                     
  1313                           ; BSR set to: 14
  1314   0016DC  0012               	return		;funcret
  1315   0016DE                     __end_of_I2C_2_Master_Init:
  1316                           	callstack 0
  1317                           
  1318 ;; *************** function _Yellow_REV1_R90 *****************
  1319 ;; Defined at:
  1320 ;;		line 252 in file "dc_motor.c"
  1321 ;; Parameters:    Size  Location     Type
  1322 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  1323 ;;		 -> motorL(9), 
  1324 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  1325 ;;		 -> motorR(9), 
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;		None
  1328 ;; Return value:  Size  Location     Type
  1329 ;;                  1    wreg      void 
  1330 ;; Registers used:
  1331 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1332 ;; Tracked objects:
  1333 ;;		On entry : 0/0
  1334 ;;		On exit  : 0/0
  1335 ;;		Unchanged: 0/0
  1336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1337 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1339 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1340 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1341 ;;Total ram usage:        6 bytes
  1342 ;; Hardware stack levels used: 1
  1343 ;; Hardware stack levels required when called: 4
  1344 ;; This function calls:
  1345 ;;		_Left45
  1346 ;;		_Right45
  1347 ;;		_fullSpeedAhead
  1348 ;;		_fullSpeedReverse
  1349 ;;		_stop
  1350 ;; This function is called by:
  1351 ;;		_main
  1352 ;; This function uses a non-reentrant model
  1353 ;;
  1354                           
  1355                           	psect	text10
  1356   000F96                     __ptext10:
  1357                           	callstack 0
  1358   000F96                     _Yellow_REV1_R90:
  1359                           	callstack 26
  1360   000F96                     
  1361                           ;dc_motor.c: 252: void Yellow_REV1_R90(struct DC_motor *mL, struct DC_motor *mR);dc_moto
      +                          r.c: 253: {;dc_motor.c: 254:     if (ForwardFlag){
  1362   000F96  5015               	movf	_ForwardFlag^0,w,c	;volatile
  1363   000F98  B4D8               	btfsc	status,2,c
  1364   000F9A  EFD1  F007         	goto	u771
  1365   000F9E  EFD3  F007         	goto	u770
  1366   000FA2                     u771:
  1367   000FA2  EF35  F008         	goto	l1937
  1368   000FA6                     u770:
  1369   000FA6                     
  1370                           ;dc_motor.c: 255:         stop(mL,mR);
  1371   000FA6  C04B  F03F         	movff	Yellow_REV1_R90@mL,stop@mL
  1372   000FAA  C04C  F040         	movff	Yellow_REV1_R90@mL+1,stop@mL+1
  1373   000FAE  C04D  F041         	movff	Yellow_REV1_R90@mR,stop@mR
  1374   000FB2  C04E  F042         	movff	Yellow_REV1_R90@mR+1,stop@mR+1
  1375   000FB6  EC6A  F008         	call	_stop	;wreg free
  1376                           
  1377                           ;dc_motor.c: 256:         fullSpeedReverse(mL,mR);
  1378   000FBA  C04B  F03F         	movff	Yellow_REV1_R90@mL,fullSpeedReverse@mL
  1379   000FBE  C04C  F040         	movff	Yellow_REV1_R90@mL+1,fullSpeedReverse@mL+1
  1380   000FC2  C04D  F041         	movff	Yellow_REV1_R90@mR,fullSpeedReverse@mR
  1381   000FC6  C04E  F042         	movff	Yellow_REV1_R90@mR+1,fullSpeedReverse@mR+1
  1382   000FCA  EC63  F00A         	call	_fullSpeedReverse	;wreg free
  1383   000FCE                     
  1384                           ;dc_motor.c: 257:         _delay((unsigned long)((_halfsquare)*(64000000/4000.0)));
  1385   000FCE  0E52               	movlw	82
  1386   000FD0  6E50               	movwf	(??_Yellow_REV1_R90+1)^0,c
  1387   000FD2  0E2B               	movlw	43
  1388   000FD4  6E4F               	movwf	??_Yellow_REV1_R90^0,c
  1389   000FD6  0E00               	movlw	0
  1390   000FD8                     u867:
  1391   000FD8  2EE8               	decfsz	wreg,f,c
  1392   000FDA  D7FE               	bra	u867
  1393   000FDC  2E4F               	decfsz	??_Yellow_REV1_R90^0,f,c
  1394   000FDE  D7FC               	bra	u867
  1395   000FE0  2E50               	decfsz	(??_Yellow_REV1_R90+1)^0,f,c
  1396   000FE2  D7FA               	bra	u867
  1397   000FE4  D000               	nop2	
  1398   000FE6                     
  1399                           ;dc_motor.c: 258:         stop(mL,mR);
  1400   000FE6  C04B  F03F         	movff	Yellow_REV1_R90@mL,stop@mL
  1401   000FEA  C04C  F040         	movff	Yellow_REV1_R90@mL+1,stop@mL+1
  1402   000FEE  C04D  F041         	movff	Yellow_REV1_R90@mR,stop@mR
  1403   000FF2  C04E  F042         	movff	Yellow_REV1_R90@mR+1,stop@mR+1
  1404   000FF6  EC6A  F008         	call	_stop	;wreg free
  1405                           
  1406                           ;dc_motor.c: 259:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1407   000FFA  0E05               	movlw	5
  1408   000FFC  6E50               	movwf	(??_Yellow_REV1_R90+1)^0,c
  1409   000FFE  0E0F               	movlw	15
  1410   001000  6E4F               	movwf	??_Yellow_REV1_R90^0,c
  1411   001002  0EF1               	movlw	241
  1412   001004                     u877:
  1413   001004  2EE8               	decfsz	wreg,f,c
  1414   001006  D7FE               	bra	u877
  1415   001008  2E4F               	decfsz	??_Yellow_REV1_R90^0,f,c
  1416   00100A  D7FC               	bra	u877
  1417   00100C  2E50               	decfsz	(??_Yellow_REV1_R90+1)^0,f,c
  1418   00100E  D7FA               	bra	u877
  1419   001010  F000               	nop	
  1420   001012                     
  1421                           ;dc_motor.c: 261:         fullSpeedReverse(mL,mR);
  1422   001012  C04B  F03F         	movff	Yellow_REV1_R90@mL,fullSpeedReverse@mL
  1423   001016  C04C  F040         	movff	Yellow_REV1_R90@mL+1,fullSpeedReverse@mL+1
  1424   00101A  C04D  F041         	movff	Yellow_REV1_R90@mR,fullSpeedReverse@mR
  1425   00101E  C04E  F042         	movff	Yellow_REV1_R90@mR+1,fullSpeedReverse@mR+1
  1426   001022  EC63  F00A         	call	_fullSpeedReverse	;wreg free
  1427   001026                     
  1428                           ;dc_motor.c: 262:         _delay((unsigned long)((_1square)*(64000000/4000.0)));
  1429   001026  0EA3               	movlw	163
  1430   001028  6E50               	movwf	(??_Yellow_REV1_R90+1)^0,c
  1431   00102A  0E57               	movlw	87
  1432   00102C  6E4F               	movwf	??_Yellow_REV1_R90^0,c
  1433   00102E  0E02               	movlw	2
  1434   001030                     u887:
  1435   001030  2EE8               	decfsz	wreg,f,c
  1436   001032  D7FE               	bra	u887
  1437   001034  2E4F               	decfsz	??_Yellow_REV1_R90^0,f,c
  1438   001036  D7FC               	bra	u887
  1439   001038  2E50               	decfsz	(??_Yellow_REV1_R90+1)^0,f,c
  1440   00103A  D7FA               	bra	u887
  1441   00103C  D000               	nop2	
  1442                           
  1443                           ;dc_motor.c: 264:         Right45(mL,mR);
  1444   00103E  C04B  F045         	movff	Yellow_REV1_R90@mL,Right45@mL
  1445   001042  C04C  F046         	movff	Yellow_REV1_R90@mL+1,Right45@mL+1
  1446   001046  C04D  F047         	movff	Yellow_REV1_R90@mR,Right45@mR
  1447   00104A  C04E  F048         	movff	Yellow_REV1_R90@mR+1,Right45@mR+1
  1448   00104E  ECDF  F009         	call	_Right45	;wreg free
  1449                           
  1450                           ;dc_motor.c: 265:         Right45(mL,mR);
  1451   001052  C04B  F045         	movff	Yellow_REV1_R90@mL,Right45@mL
  1452   001056  C04C  F046         	movff	Yellow_REV1_R90@mL+1,Right45@mL+1
  1453   00105A  C04D  F047         	movff	Yellow_REV1_R90@mR,Right45@mR
  1454   00105E  C04E  F048         	movff	Yellow_REV1_R90@mR+1,Right45@mR+1
  1455   001062  ECDF  F009         	call	_Right45	;wreg free
  1456                           
  1457                           ;dc_motor.c: 266:     }
  1458   001066  EF69  F008         	goto	l269
  1459   00106A                     l1937:
  1460                           
  1461                           ;dc_motor.c: 269:         Left45(mL,mR);
  1462   00106A  C04B  F045         	movff	Yellow_REV1_R90@mL,Left45@mL
  1463   00106E  C04C  F046         	movff	Yellow_REV1_R90@mL+1,Left45@mL+1
  1464   001072  C04D  F047         	movff	Yellow_REV1_R90@mR,Left45@mR
  1465   001076  C04E  F048         	movff	Yellow_REV1_R90@mR+1,Left45@mR+1
  1466   00107A  EC21  F00A         	call	_Left45	;wreg free
  1467                           
  1468                           ;dc_motor.c: 270:         Left45(mL,mR);
  1469   00107E  C04B  F045         	movff	Yellow_REV1_R90@mL,Left45@mL
  1470   001082  C04C  F046         	movff	Yellow_REV1_R90@mL+1,Left45@mL+1
  1471   001086  C04D  F047         	movff	Yellow_REV1_R90@mR,Left45@mR
  1472   00108A  C04E  F048         	movff	Yellow_REV1_R90@mR+1,Left45@mR+1
  1473   00108E  EC21  F00A         	call	_Left45	;wreg free
  1474                           
  1475                           ;dc_motor.c: 271:         fullSpeedAhead(mL,mR);
  1476   001092  C04B  F03F         	movff	Yellow_REV1_R90@mL,fullSpeedAhead@mL
  1477   001096  C04C  F040         	movff	Yellow_REV1_R90@mL+1,fullSpeedAhead@mL+1
  1478   00109A  C04D  F041         	movff	Yellow_REV1_R90@mR,fullSpeedAhead@mR
  1479   00109E  C04E  F042         	movff	Yellow_REV1_R90@mR+1,fullSpeedAhead@mR+1
  1480   0010A2  ECA3  F00A         	call	_fullSpeedAhead	;wreg free
  1481   0010A6                     
  1482                           ;dc_motor.c: 272:         _delay((unsigned long)((_1square)*(64000000/4000.0)));
  1483   0010A6  0EA3               	movlw	163
  1484   0010A8  6E50               	movwf	(??_Yellow_REV1_R90+1)^0,c
  1485   0010AA  0E57               	movlw	87
  1486   0010AC  6E4F               	movwf	??_Yellow_REV1_R90^0,c
  1487   0010AE  0E02               	movlw	2
  1488   0010B0                     u897:
  1489   0010B0  2EE8               	decfsz	wreg,f,c
  1490   0010B2  D7FE               	bra	u897
  1491   0010B4  2E4F               	decfsz	??_Yellow_REV1_R90^0,f,c
  1492   0010B6  D7FC               	bra	u897
  1493   0010B8  2E50               	decfsz	(??_Yellow_REV1_R90+1)^0,f,c
  1494   0010BA  D7FA               	bra	u897
  1495   0010BC  D000               	nop2	
  1496   0010BE                     
  1497                           ;dc_motor.c: 273:         stop(mL,mR);
  1498   0010BE  C04B  F03F         	movff	Yellow_REV1_R90@mL,stop@mL
  1499   0010C2  C04C  F040         	movff	Yellow_REV1_R90@mL+1,stop@mL+1
  1500   0010C6  C04D  F041         	movff	Yellow_REV1_R90@mR,stop@mR
  1501   0010CA  C04E  F042         	movff	Yellow_REV1_R90@mR+1,stop@mR+1
  1502   0010CE  EC6A  F008         	call	_stop	;wreg free
  1503   0010D2                     l269:
  1504   0010D2  0012               	return		;funcret
  1505   0010D4                     __end_of_Yellow_REV1_R90:
  1506                           	callstack 0
  1507                           
  1508 ;; *************** function _fullSpeedReverse *****************
  1509 ;; Defined at:
  1510 ;;		line 155 in file "dc_motor.c"
  1511 ;; Parameters:    Size  Location     Type
  1512 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  1513 ;;		 -> motorL(9), 
  1514 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  1515 ;;		 -> motorR(9), 
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;  i               2   24[COMRAM] unsigned int 
  1518 ;; Return value:  Size  Location     Type
  1519 ;;                  1    wreg      void 
  1520 ;; Registers used:
  1521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1522 ;; Tracked objects:
  1523 ;;		On entry : 0/0
  1524 ;;		On exit  : 0/0
  1525 ;;		Unchanged: 0/0
  1526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1527 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1528 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1529 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1530 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1531 ;;Total ram usage:        7 bytes
  1532 ;; Hardware stack levels used: 1
  1533 ;; Hardware stack levels required when called: 2
  1534 ;; This function calls:
  1535 ;;		_setMotorPWM
  1536 ;; This function is called by:
  1537 ;;		_Yellow_REV1_R90
  1538 ;;		_Red_R90
  1539 ;;		_Green_L90
  1540 ;;		_Blue_T180
  1541 ;;		_Pink_rev1_L90
  1542 ;;		_Orange_R135
  1543 ;;		_LightBlue_L135
  1544 ;;		_White
  1545 ;; This function uses a non-reentrant model
  1546 ;;
  1547                           
  1548                           	psect	text11
  1549   0014C6                     __ptext11:
  1550                           	callstack 0
  1551   0014C6                     _fullSpeedReverse:
  1552                           	callstack 27
  1553   0014C6                     
  1554                           ;dc_motor.c: 155: void fullSpeedReverse(struct DC_motor *mL, struct DC_motor *mR);dc_mot
      +                          or.c: 156: {;dc_motor.c: 157:  (mL->direction) = 1;
  1555   0014C6  EE20 F001          	lfsr	2,1
  1556   0014CA  503F               	movf	fullSpeedReverse@mL^0,w,c
  1557   0014CC  26D9               	addwf	fsr2l,f,c
  1558   0014CE  5040               	movf	(fullSpeedReverse@mL+1)^0,w,c
  1559   0014D0  22DA               	addwfc	fsr2h,f,c
  1560   0014D2  0E01               	movlw	1
  1561   0014D4  6EDF               	movwf	indf2,c
  1562                           
  1563                           ;dc_motor.c: 158:  (mR->direction) = 1;
  1564   0014D6  EE20 F001          	lfsr	2,1
  1565   0014DA  5041               	movf	fullSpeedReverse@mR^0,w,c
  1566   0014DC  26D9               	addwf	fsr2l,f,c
  1567   0014DE  5042               	movf	(fullSpeedReverse@mR+1)^0,w,c
  1568   0014E0  22DA               	addwfc	fsr2h,f,c
  1569   0014E2  0E01               	movlw	1
  1570   0014E4  6EDF               	movwf	indf2,c
  1571   0014E6                     
  1572                           ;dc_motor.c: 160:     for (unsigned int i = 0; i <50; i++)
  1573   0014E6  0E00               	movlw	0
  1574   0014E8  6E45               	movwf	(fullSpeedReverse@i+1)^0,c
  1575   0014EA  0E00               	movlw	0
  1576   0014EC  6E44               	movwf	fullSpeedReverse@i^0,c
  1577   0014EE                     l1859:
  1578                           
  1579                           ;dc_motor.c: 161:     {;dc_motor.c: 162:         (mL->power)++;
  1580   0014EE  C03F  FFD9         	movff	fullSpeedReverse@mL,fsr2l
  1581   0014F2  C040  FFDA         	movff	fullSpeedReverse@mL+1,fsr2h
  1582   0014F6  2ADF               	incf	indf2,f,c
  1583                           
  1584                           ;dc_motor.c: 163:         (mR->power)++;
  1585   0014F8  C041  FFD9         	movff	fullSpeedReverse@mR,fsr2l
  1586   0014FC  C042  FFDA         	movff	fullSpeedReverse@mR+1,fsr2h
  1587   001500  2ADF               	incf	indf2,f,c
  1588   001502                     
  1589                           ;dc_motor.c: 164:         setMotorPWM(mL);
  1590   001502  C03F  F039         	movff	fullSpeedReverse@mL,setMotorPWM@m
  1591   001506  C040  F03A         	movff	fullSpeedReverse@mL+1,setMotorPWM@m+1
  1592   00150A  EC15  F007         	call	_setMotorPWM	;wreg free
  1593   00150E                     
  1594                           ;dc_motor.c: 165:         setMotorPWM(mR);
  1595   00150E  C041  F039         	movff	fullSpeedReverse@mR,setMotorPWM@m
  1596   001512  C042  F03A         	movff	fullSpeedReverse@mR+1,setMotorPWM@m+1
  1597   001516  EC15  F007         	call	_setMotorPWM	;wreg free
  1598   00151A                     
  1599                           ;dc_motor.c: 166:         _delay((unsigned long)((1000)*(64000000/4000000.0)));
  1600   00151A  0E15               	movlw	21
  1601   00151C  6E43               	movwf	??_fullSpeedReverse^0,c
  1602   00151E  0EC6               	movlw	198
  1603   001520                     u907:
  1604   001520  2EE8               	decfsz	wreg,f,c
  1605   001522  D7FE               	bra	u907
  1606   001524  2E43               	decfsz	??_fullSpeedReverse^0,f,c
  1607   001526  D7FC               	bra	u907
  1608   001528  D000               	nop2	
  1609   00152A                     
  1610                           ;dc_motor.c: 167:     }
  1611   00152A  4A44               	infsnz	fullSpeedReverse@i^0,f,c
  1612   00152C  2A45               	incf	(fullSpeedReverse@i+1)^0,f,c
  1613   00152E  5045               	movf	(fullSpeedReverse@i+1)^0,w,c
  1614   001530  E109               	bnz	u760
  1615   001532  0E32               	movlw	50
  1616   001534  5C44               	subwf	fullSpeedReverse@i^0,w,c
  1617   001536  A0D8               	btfss	status,0,c
  1618   001538  EFA0  F00A         	goto	u761
  1619   00153C  EFA2  F00A         	goto	u760
  1620   001540                     u761:
  1621   001540  EF77  F00A         	goto	l1859
  1622   001544                     u760:
  1623   001544  0012               	return		;funcret
  1624   001546                     __end_of_fullSpeedReverse:
  1625                           	callstack 0
  1626                           
  1627 ;; *************** function _fullSpeedAhead *****************
  1628 ;; Defined at:
  1629 ;;		line 141 in file "dc_motor.c"
  1630 ;; Parameters:    Size  Location     Type
  1631 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  1632 ;;		 -> motorL(9), 
  1633 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  1634 ;;		 -> motorR(9), 
  1635 ;; Auto vars:     Size  Location     Type
  1636 ;;  i               2   24[COMRAM] unsigned int 
  1637 ;; Return value:  Size  Location     Type
  1638 ;;                  1    wreg      void 
  1639 ;; Registers used:
  1640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1641 ;; Tracked objects:
  1642 ;;		On entry : 0/0
  1643 ;;		On exit  : 0/0
  1644 ;;		Unchanged: 0/0
  1645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1646 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1647 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1648 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1649 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1650 ;;Total ram usage:        7 bytes
  1651 ;; Hardware stack levels used: 1
  1652 ;; Hardware stack levels required when called: 2
  1653 ;; This function calls:
  1654 ;;		_setMotorPWM
  1655 ;; This function is called by:
  1656 ;;		_Yellow_REV1_R90
  1657 ;;		_Pink_rev1_L90
  1658 ;; This function uses a non-reentrant model
  1659 ;;
  1660                           
  1661                           	psect	text12
  1662   001546                     __ptext12:
  1663                           	callstack 0
  1664   001546                     _fullSpeedAhead:
  1665                           	callstack 27
  1666   001546                     
  1667                           ;dc_motor.c: 141: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 142: {;dc_motor.c: 143:  (mL->direction) = 0;
  1668   001546  EE20 F001          	lfsr	2,1
  1669   00154A  503F               	movf	fullSpeedAhead@mL^0,w,c
  1670   00154C  26D9               	addwf	fsr2l,f,c
  1671   00154E  5040               	movf	(fullSpeedAhead@mL+1)^0,w,c
  1672   001550  22DA               	addwfc	fsr2h,f,c
  1673   001552  0E00               	movlw	0
  1674   001554  6EDF               	movwf	indf2,c
  1675                           
  1676                           ;dc_motor.c: 144:  (mR->direction) = 0;
  1677   001556  EE20 F001          	lfsr	2,1
  1678   00155A  5041               	movf	fullSpeedAhead@mR^0,w,c
  1679   00155C  26D9               	addwf	fsr2l,f,c
  1680   00155E  5042               	movf	(fullSpeedAhead@mR+1)^0,w,c
  1681   001560  22DA               	addwfc	fsr2h,f,c
  1682   001562  0E00               	movlw	0
  1683   001564  6EDF               	movwf	indf2,c
  1684   001566                     
  1685                           ;dc_motor.c: 146:     for (unsigned int i = 0; i <50; i++)
  1686   001566  0E00               	movlw	0
  1687   001568  6E45               	movwf	(fullSpeedAhead@i+1)^0,c
  1688   00156A  0E00               	movlw	0
  1689   00156C  6E44               	movwf	fullSpeedAhead@i^0,c
  1690   00156E                     l1839:
  1691                           
  1692                           ;dc_motor.c: 147:     {;dc_motor.c: 148:         (mL->power)++;
  1693   00156E  C03F  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1694   001572  C040  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1695   001576  2ADF               	incf	indf2,f,c
  1696                           
  1697                           ;dc_motor.c: 149:         (mR->power)++;
  1698   001578  C041  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1699   00157C  C042  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1700   001580  2ADF               	incf	indf2,f,c
  1701   001582                     
  1702                           ;dc_motor.c: 150:         setMotorPWM(mL);
  1703   001582  C03F  F039         	movff	fullSpeedAhead@mL,setMotorPWM@m
  1704   001586  C040  F03A         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  1705   00158A  EC15  F007         	call	_setMotorPWM	;wreg free
  1706   00158E                     
  1707                           ;dc_motor.c: 151:         setMotorPWM(mR);
  1708   00158E  C041  F039         	movff	fullSpeedAhead@mR,setMotorPWM@m
  1709   001592  C042  F03A         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  1710   001596  EC15  F007         	call	_setMotorPWM	;wreg free
  1711   00159A                     
  1712                           ;dc_motor.c: 152:         _delay((unsigned long)((1000)*(64000000/4000000.0)));
  1713   00159A  0E15               	movlw	21
  1714   00159C  6E43               	movwf	??_fullSpeedAhead^0,c
  1715   00159E  0EC6               	movlw	198
  1716   0015A0                     u917:
  1717   0015A0  2EE8               	decfsz	wreg,f,c
  1718   0015A2  D7FE               	bra	u917
  1719   0015A4  2E43               	decfsz	??_fullSpeedAhead^0,f,c
  1720   0015A6  D7FC               	bra	u917
  1721   0015A8  D000               	nop2	
  1722   0015AA                     
  1723                           ;dc_motor.c: 153:     }
  1724   0015AA  4A44               	infsnz	fullSpeedAhead@i^0,f,c
  1725   0015AC  2A45               	incf	(fullSpeedAhead@i+1)^0,f,c
  1726   0015AE  5045               	movf	(fullSpeedAhead@i+1)^0,w,c
  1727   0015B0  E109               	bnz	u750
  1728   0015B2  0E32               	movlw	50
  1729   0015B4  5C44               	subwf	fullSpeedAhead@i^0,w,c
  1730   0015B6  A0D8               	btfss	status,0,c
  1731   0015B8  EFE0  F00A         	goto	u751
  1732   0015BC  EFE2  F00A         	goto	u750
  1733   0015C0                     u751:
  1734   0015C0  EFB7  F00A         	goto	l1839
  1735   0015C4                     u750:
  1736   0015C4  0012               	return		;funcret
  1737   0015C6                     __end_of_fullSpeedAhead:
  1738                           	callstack 0
  1739                           
  1740 ;; *************** function _Right45 *****************
  1741 ;; Defined at:
  1742 ;;		line 183 in file "dc_motor.c"
  1743 ;; Parameters:    Size  Location     Type
  1744 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  1745 ;;		 -> motorL(9), 
  1746 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  1747 ;;		 -> motorR(9), 
  1748 ;; Auto vars:     Size  Location     Type
  1749 ;;		None
  1750 ;; Return value:  Size  Location     Type
  1751 ;;                  1    wreg      void 
  1752 ;; Registers used:
  1753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1754 ;; Tracked objects:
  1755 ;;		On entry : 0/0
  1756 ;;		On exit  : 0/0
  1757 ;;		Unchanged: 0/0
  1758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1759 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1761 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1762 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1763 ;;Total ram usage:        6 bytes
  1764 ;; Hardware stack levels used: 1
  1765 ;; Hardware stack levels required when called: 3
  1766 ;; This function calls:
  1767 ;;		_stop
  1768 ;;		_turnRight
  1769 ;; This function is called by:
  1770 ;;		_Yellow_REV1_R90
  1771 ;;		_Red_R90
  1772 ;;		_Green_L90
  1773 ;;		_Pink_rev1_L90
  1774 ;;		_Orange_R135
  1775 ;;		_LightBlue_L135
  1776 ;; This function uses a non-reentrant model
  1777 ;;
  1778                           
  1779                           	psect	text13
  1780   0013BE                     __ptext13:
  1781                           	callstack 0
  1782   0013BE                     _Right45:
  1783                           	callstack 26
  1784   0013BE                     
  1785                           ;dc_motor.c: 183: void Right45(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 184
      +                          : {;dc_motor.c: 186:     stop(mL,mR);
  1786   0013BE  C045  F03F         	movff	Right45@mL,stop@mL
  1787   0013C2  C046  F040         	movff	Right45@mL+1,stop@mL+1
  1788   0013C6  C047  F041         	movff	Right45@mR,stop@mR
  1789   0013CA  C048  F042         	movff	Right45@mR+1,stop@mR+1
  1790   0013CE  EC6A  F008         	call	_stop	;wreg free
  1791   0013D2                     
  1792                           ;dc_motor.c: 187:     _delay((unsigned long)((50)*(64000000/4000.0)));
  1793   0013D2  0E05               	movlw	5
  1794   0013D4  6E4A               	movwf	(??_Right45+1)^0,c
  1795   0013D6  0E0F               	movlw	15
  1796   0013D8  6E49               	movwf	??_Right45^0,c
  1797   0013DA  0EF1               	movlw	241
  1798   0013DC                     u927:
  1799   0013DC  2EE8               	decfsz	wreg,f,c
  1800   0013DE  D7FE               	bra	u927
  1801   0013E0  2E49               	decfsz	??_Right45^0,f,c
  1802   0013E2  D7FC               	bra	u927
  1803   0013E4  2E4A               	decfsz	(??_Right45+1)^0,f,c
  1804   0013E6  D7FA               	bra	u927
  1805   0013E8  F000               	nop	
  1806   0013EA                     
  1807                           ;dc_motor.c: 188:     turnRight(mL,mR);
  1808   0013EA  C045  F03F         	movff	Right45@mL,turnRight@mL
  1809   0013EE  C046  F040         	movff	Right45@mL+1,turnRight@mL+1
  1810   0013F2  C047  F041         	movff	Right45@mR,turnRight@mR
  1811   0013F6  C048  F042         	movff	Right45@mR+1,turnRight@mR+1
  1812   0013FA  ECB7  F008         	call	_turnRight	;wreg free
  1813                           
  1814                           ;dc_motor.c: 189:    _delay((unsigned long)((_45drightdelay)*(64000000/4000.0)));
  1815   0013FE  0E19               	movlw	25
  1816   001400  6E4A               	movwf	(??_Right45+1)^0,c
  1817   001402  0E5A               	movlw	90
  1818   001404  6E49               	movwf	??_Right45^0,c
  1819   001406  0EB2               	movlw	178
  1820   001408                     u937:
  1821   001408  2EE8               	decfsz	wreg,f,c
  1822   00140A  D7FE               	bra	u937
  1823   00140C  2E49               	decfsz	??_Right45^0,f,c
  1824   00140E  D7FC               	bra	u937
  1825   001410  2E4A               	decfsz	(??_Right45+1)^0,f,c
  1826   001412  D7FA               	bra	u937
  1827   001414                     
  1828                           ;dc_motor.c: 190:     stop(mL,mR);
  1829   001414  C045  F03F         	movff	Right45@mL,stop@mL
  1830   001418  C046  F040         	movff	Right45@mL+1,stop@mL+1
  1831   00141C  C047  F041         	movff	Right45@mR,stop@mR
  1832   001420  C048  F042         	movff	Right45@mR+1,stop@mR+1
  1833   001424  EC6A  F008         	call	_stop	;wreg free
  1834   001428                     
  1835                           ;dc_motor.c: 191:     _delay((unsigned long)((50)*(64000000/4000.0)));
  1836   001428  0E05               	movlw	5
  1837   00142A  6E4A               	movwf	(??_Right45+1)^0,c
  1838   00142C  0E0F               	movlw	15
  1839   00142E  6E49               	movwf	??_Right45^0,c
  1840   001430  0EF1               	movlw	241
  1841   001432                     u947:
  1842   001432  2EE8               	decfsz	wreg,f,c
  1843   001434  D7FE               	bra	u947
  1844   001436  2E49               	decfsz	??_Right45^0,f,c
  1845   001438  D7FC               	bra	u947
  1846   00143A  2E4A               	decfsz	(??_Right45+1)^0,f,c
  1847   00143C  D7FA               	bra	u947
  1848   00143E  F000               	nop	
  1849   001440  0012               	return		;funcret
  1850   001442                     __end_of_Right45:
  1851                           	callstack 0
  1852                           
  1853 ;; *************** function _turnRight *****************
  1854 ;; Defined at:
  1855 ;;		line 124 in file "dc_motor.c"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  1858 ;;		 -> motorL(9), 
  1859 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  1860 ;;		 -> motorR(9), 
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;  i               2   23[COMRAM] unsigned int 
  1863 ;; Return value:  Size  Location     Type
  1864 ;;                  1    wreg      void 
  1865 ;; Registers used:
  1866 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1867 ;; Tracked objects:
  1868 ;;		On entry : 0/0
  1869 ;;		On exit  : 0/0
  1870 ;;		Unchanged: 0/0
  1871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1872 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1873 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1875 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1876 ;;Total ram usage:        6 bytes
  1877 ;; Hardware stack levels used: 1
  1878 ;; Hardware stack levels required when called: 2
  1879 ;; This function calls:
  1880 ;;		_setMotorPWM
  1881 ;; This function is called by:
  1882 ;;		_Right45
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           	psect	text14
  1887   00116E                     __ptext14:
  1888                           	callstack 0
  1889   00116E                     _turnRight:
  1890                           	callstack 26
  1891   00116E                     
  1892                           ;dc_motor.c: 124: void turnRight(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 1
      +                          25: {;dc_motor.c: 126:     (mL->direction) = 0;
  1893   00116E  EE20 F001          	lfsr	2,1
  1894   001172  503F               	movf	turnRight@mL^0,w,c
  1895   001174  26D9               	addwf	fsr2l,f,c
  1896   001176  5040               	movf	(turnRight@mL+1)^0,w,c
  1897   001178  22DA               	addwfc	fsr2h,f,c
  1898   00117A  0E00               	movlw	0
  1899   00117C  6EDF               	movwf	indf2,c
  1900                           
  1901                           ;dc_motor.c: 127:     (mR->direction) = 1;
  1902   00117E  EE20 F001          	lfsr	2,1
  1903   001182  5041               	movf	turnRight@mR^0,w,c
  1904   001184  26D9               	addwf	fsr2l,f,c
  1905   001186  5042               	movf	(turnRight@mR+1)^0,w,c
  1906   001188  22DA               	addwfc	fsr2h,f,c
  1907   00118A  0E01               	movlw	1
  1908   00118C  6EDF               	movwf	indf2,c
  1909   00118E                     
  1910                           ;dc_motor.c: 128:     setMotorPWM(mL);
  1911   00118E  C03F  F039         	movff	turnRight@mL,setMotorPWM@m
  1912   001192  C040  F03A         	movff	turnRight@mL+1,setMotorPWM@m+1
  1913   001196  EC15  F007         	call	_setMotorPWM	;wreg free
  1914   00119A                     
  1915                           ;dc_motor.c: 129:     setMotorPWM(mR);
  1916   00119A  C041  F039         	movff	turnRight@mR,setMotorPWM@m
  1917   00119E  C042  F03A         	movff	turnRight@mR+1,setMotorPWM@m+1
  1918   0011A2  EC15  F007         	call	_setMotorPWM	;wreg free
  1919   0011A6                     
  1920                           ;dc_motor.c: 130:     for (unsigned int i = 0; i <50; i++)
  1921   0011A6  0E00               	movlw	0
  1922   0011A8  6E44               	movwf	(turnRight@i+1)^0,c
  1923   0011AA  0E00               	movlw	0
  1924   0011AC  6E43               	movwf	turnRight@i^0,c
  1925   0011AE                     l1817:
  1926                           
  1927                           ;dc_motor.c: 131:     {;dc_motor.c: 132:         mL->power++;
  1928   0011AE  C03F  FFD9         	movff	turnRight@mL,fsr2l
  1929   0011B2  C040  FFDA         	movff	turnRight@mL+1,fsr2h
  1930   0011B6  2ADF               	incf	indf2,f,c
  1931                           
  1932                           ;dc_motor.c: 133:         mR->power++;
  1933   0011B8  C041  FFD9         	movff	turnRight@mR,fsr2l
  1934   0011BC  C042  FFDA         	movff	turnRight@mR+1,fsr2h
  1935   0011C0  2ADF               	incf	indf2,f,c
  1936   0011C2                     
  1937                           ;dc_motor.c: 134:         setMotorPWM(mL);
  1938   0011C2  C03F  F039         	movff	turnRight@mL,setMotorPWM@m
  1939   0011C6  C040  F03A         	movff	turnRight@mL+1,setMotorPWM@m+1
  1940   0011CA  EC15  F007         	call	_setMotorPWM	;wreg free
  1941   0011CE                     
  1942                           ;dc_motor.c: 135:         setMotorPWM(mR);
  1943   0011CE  C041  F039         	movff	turnRight@mR,setMotorPWM@m
  1944   0011D2  C042  F03A         	movff	turnRight@mR+1,setMotorPWM@m+1
  1945   0011D6  EC15  F007         	call	_setMotorPWM	;wreg free
  1946   0011DA                     
  1947                           ;dc_motor.c: 136:         _delay((unsigned long)((100)*(64000000/4000000.0)));
  1948   0011DA  0EE4               	movlw	228
  1949   0011DC                     u957:
  1950   0011DC  D000               	nop2	
  1951   0011DE  D000               	nop2	
  1952   0011E0  2EE8               	decfsz	wreg,f,c
  1953   0011E2  D7FC               	bra	u957
  1954   0011E4  D000               	nop2	
  1955   0011E6  D000               	nop2	
  1956   0011E8                     
  1957                           ;dc_motor.c: 137:     }
  1958   0011E8  4A43               	infsnz	turnRight@i^0,f,c
  1959   0011EA  2A44               	incf	(turnRight@i+1)^0,f,c
  1960   0011EC  5044               	movf	(turnRight@i+1)^0,w,c
  1961   0011EE  E109               	bnz	u740
  1962   0011F0  0E32               	movlw	50
  1963   0011F2  5C43               	subwf	turnRight@i^0,w,c
  1964   0011F4  A0D8               	btfss	status,0,c
  1965   0011F6  EFFF  F008         	goto	u741
  1966   0011FA  EF01  F009         	goto	u740
  1967   0011FE                     u741:
  1968   0011FE  EFD7  F008         	goto	l1817
  1969   001202                     u740:
  1970   001202  0012               	return		;funcret
  1971   001204                     __end_of_turnRight:
  1972                           	callstack 0
  1973                           
  1974 ;; *************** function _Left45 *****************
  1975 ;; Defined at:
  1976 ;;		line 171 in file "dc_motor.c"
  1977 ;; Parameters:    Size  Location     Type
  1978 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  1979 ;;		 -> motorL(9), 
  1980 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  1981 ;;		 -> motorR(9), 
  1982 ;; Auto vars:     Size  Location     Type
  1983 ;;		None
  1984 ;; Return value:  Size  Location     Type
  1985 ;;                  1    wreg      void 
  1986 ;; Registers used:
  1987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1988 ;; Tracked objects:
  1989 ;;		On entry : 0/0
  1990 ;;		On exit  : 0/0
  1991 ;;		Unchanged: 0/0
  1992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1993 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1995 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1996 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1997 ;;Total ram usage:        6 bytes
  1998 ;; Hardware stack levels used: 1
  1999 ;; Hardware stack levels required when called: 3
  2000 ;; This function calls:
  2001 ;;		_stop
  2002 ;;		_turnLeft
  2003 ;; This function is called by:
  2004 ;;		_Yellow_REV1_R90
  2005 ;;		_rotate180left
  2006 ;;		_Red_R90
  2007 ;;		_Green_L90
  2008 ;;		_Pink_rev1_L90
  2009 ;;		_Orange_R135
  2010 ;;		_LightBlue_L135
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           	psect	text15
  2015   001442                     __ptext15:
  2016                           	callstack 0
  2017   001442                     _Left45:
  2018                           	callstack 26
  2019   001442                     
  2020                           ;dc_motor.c: 171: void Left45(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 172:
      +                           {;dc_motor.c: 174:     stop(mL,mR);
  2021   001442  C045  F03F         	movff	Left45@mL,stop@mL
  2022   001446  C046  F040         	movff	Left45@mL+1,stop@mL+1
  2023   00144A  C047  F041         	movff	Left45@mR,stop@mR
  2024   00144E  C048  F042         	movff	Left45@mR+1,stop@mR+1
  2025   001452  EC6A  F008         	call	_stop	;wreg free
  2026   001456                     
  2027                           ;dc_motor.c: 175:     _delay((unsigned long)((50)*(64000000/4000.0)));
  2028   001456  0E05               	movlw	5
  2029   001458  6E4A               	movwf	(??_Left45+1)^0,c
  2030   00145A  0E0F               	movlw	15
  2031   00145C  6E49               	movwf	??_Left45^0,c
  2032   00145E  0EF1               	movlw	241
  2033   001460                     u967:
  2034   001460  2EE8               	decfsz	wreg,f,c
  2035   001462  D7FE               	bra	u967
  2036   001464  2E49               	decfsz	??_Left45^0,f,c
  2037   001466  D7FC               	bra	u967
  2038   001468  2E4A               	decfsz	(??_Left45+1)^0,f,c
  2039   00146A  D7FA               	bra	u967
  2040   00146C  F000               	nop	
  2041   00146E                     
  2042                           ;dc_motor.c: 176:     turnLeft(mL,mR);
  2043   00146E  C045  F03F         	movff	Left45@mL,turnLeft@mL
  2044   001472  C046  F040         	movff	Left45@mL+1,turnLeft@mL+1
  2045   001476  C047  F041         	movff	Left45@mR,turnLeft@mR
  2046   00147A  C048  F042         	movff	Left45@mR+1,turnLeft@mR+1
  2047   00147E  EC02  F009         	call	_turnLeft	;wreg free
  2048                           
  2049                           ;dc_motor.c: 177:     _delay((unsigned long)((_45dleftdelay)*(64000000/4000.0)));
  2050   001482  0E19               	movlw	25
  2051   001484  6E4A               	movwf	(??_Left45+1)^0,c
  2052   001486  0E5A               	movlw	90
  2053   001488  6E49               	movwf	??_Left45^0,c
  2054   00148A  0EB2               	movlw	178
  2055   00148C                     u977:
  2056   00148C  2EE8               	decfsz	wreg,f,c
  2057   00148E  D7FE               	bra	u977
  2058   001490  2E49               	decfsz	??_Left45^0,f,c
  2059   001492  D7FC               	bra	u977
  2060   001494  2E4A               	decfsz	(??_Left45+1)^0,f,c
  2061   001496  D7FA               	bra	u977
  2062   001498                     
  2063                           ;dc_motor.c: 178:     stop(mL,mR);
  2064   001498  C045  F03F         	movff	Left45@mL,stop@mL
  2065   00149C  C046  F040         	movff	Left45@mL+1,stop@mL+1
  2066   0014A0  C047  F041         	movff	Left45@mR,stop@mR
  2067   0014A4  C048  F042         	movff	Left45@mR+1,stop@mR+1
  2068   0014A8  EC6A  F008         	call	_stop	;wreg free
  2069   0014AC                     
  2070                           ;dc_motor.c: 179:     _delay((unsigned long)((50)*(64000000/4000.0)));
  2071   0014AC  0E05               	movlw	5
  2072   0014AE  6E4A               	movwf	(??_Left45+1)^0,c
  2073   0014B0  0E0F               	movlw	15
  2074   0014B2  6E49               	movwf	??_Left45^0,c
  2075   0014B4  0EF1               	movlw	241
  2076   0014B6                     u987:
  2077   0014B6  2EE8               	decfsz	wreg,f,c
  2078   0014B8  D7FE               	bra	u987
  2079   0014BA  2E49               	decfsz	??_Left45^0,f,c
  2080   0014BC  D7FC               	bra	u987
  2081   0014BE  2E4A               	decfsz	(??_Left45+1)^0,f,c
  2082   0014C0  D7FA               	bra	u987
  2083   0014C2  F000               	nop	
  2084   0014C4  0012               	return		;funcret
  2085   0014C6                     __end_of_Left45:
  2086                           	callstack 0
  2087                           
  2088 ;; *************** function _turnLeft *****************
  2089 ;; Defined at:
  2090 ;;		line 107 in file "dc_motor.c"
  2091 ;; Parameters:    Size  Location     Type
  2092 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  2093 ;;		 -> motorL(9), 
  2094 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  2095 ;;		 -> motorR(9), 
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;  i               2   23[COMRAM] unsigned int 
  2098 ;; Return value:  Size  Location     Type
  2099 ;;                  1    wreg      void 
  2100 ;; Registers used:
  2101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2102 ;; Tracked objects:
  2103 ;;		On entry : 0/0
  2104 ;;		On exit  : 0/0
  2105 ;;		Unchanged: 0/0
  2106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2107 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2108 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2110 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2111 ;;Total ram usage:        6 bytes
  2112 ;; Hardware stack levels used: 1
  2113 ;; Hardware stack levels required when called: 2
  2114 ;; This function calls:
  2115 ;;		_setMotorPWM
  2116 ;; This function is called by:
  2117 ;;		_Left45
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121                           	psect	text16
  2122   001204                     __ptext16:
  2123                           	callstack 0
  2124   001204                     _turnLeft:
  2125                           	callstack 26
  2126   001204                     
  2127                           ;dc_motor.c: 107: void turnLeft(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 10
      +                          8: {;dc_motor.c: 109:     (mL->direction) = 1;
  2128   001204  EE20 F001          	lfsr	2,1
  2129   001208  503F               	movf	turnLeft@mL^0,w,c
  2130   00120A  26D9               	addwf	fsr2l,f,c
  2131   00120C  5040               	movf	(turnLeft@mL+1)^0,w,c
  2132   00120E  22DA               	addwfc	fsr2h,f,c
  2133   001210  0E01               	movlw	1
  2134   001212  6EDF               	movwf	indf2,c
  2135                           
  2136                           ;dc_motor.c: 110:     (mR->direction) = 0;
  2137   001214  EE20 F001          	lfsr	2,1
  2138   001218  5041               	movf	turnLeft@mR^0,w,c
  2139   00121A  26D9               	addwf	fsr2l,f,c
  2140   00121C  5042               	movf	(turnLeft@mR+1)^0,w,c
  2141   00121E  22DA               	addwfc	fsr2h,f,c
  2142   001220  0E00               	movlw	0
  2143   001222  6EDF               	movwf	indf2,c
  2144   001224                     
  2145                           ;dc_motor.c: 111:     setMotorPWM(mL);
  2146   001224  C03F  F039         	movff	turnLeft@mL,setMotorPWM@m
  2147   001228  C040  F03A         	movff	turnLeft@mL+1,setMotorPWM@m+1
  2148   00122C  EC15  F007         	call	_setMotorPWM	;wreg free
  2149   001230                     
  2150                           ;dc_motor.c: 112:     setMotorPWM(mR);
  2151   001230  C041  F039         	movff	turnLeft@mR,setMotorPWM@m
  2152   001234  C042  F03A         	movff	turnLeft@mR+1,setMotorPWM@m+1
  2153   001238  EC15  F007         	call	_setMotorPWM	;wreg free
  2154   00123C                     
  2155                           ;dc_motor.c: 113:     for (unsigned int i = 0; i <50; i++)
  2156   00123C  0E00               	movlw	0
  2157   00123E  6E44               	movwf	(turnLeft@i+1)^0,c
  2158   001240  0E00               	movlw	0
  2159   001242  6E43               	movwf	turnLeft@i^0,c
  2160   001244                     l1793:
  2161                           
  2162                           ;dc_motor.c: 114:     {;dc_motor.c: 115:         mL->power++;
  2163   001244  C03F  FFD9         	movff	turnLeft@mL,fsr2l
  2164   001248  C040  FFDA         	movff	turnLeft@mL+1,fsr2h
  2165   00124C  2ADF               	incf	indf2,f,c
  2166                           
  2167                           ;dc_motor.c: 116:         mR->power++;
  2168   00124E  C041  FFD9         	movff	turnLeft@mR,fsr2l
  2169   001252  C042  FFDA         	movff	turnLeft@mR+1,fsr2h
  2170   001256  2ADF               	incf	indf2,f,c
  2171   001258                     
  2172                           ;dc_motor.c: 117:         setMotorPWM(mL);
  2173   001258  C03F  F039         	movff	turnLeft@mL,setMotorPWM@m
  2174   00125C  C040  F03A         	movff	turnLeft@mL+1,setMotorPWM@m+1
  2175   001260  EC15  F007         	call	_setMotorPWM	;wreg free
  2176   001264                     
  2177                           ;dc_motor.c: 118:         setMotorPWM(mR);
  2178   001264  C041  F039         	movff	turnLeft@mR,setMotorPWM@m
  2179   001268  C042  F03A         	movff	turnLeft@mR+1,setMotorPWM@m+1
  2180   00126C  EC15  F007         	call	_setMotorPWM	;wreg free
  2181   001270                     
  2182                           ;dc_motor.c: 119:         _delay((unsigned long)((100)*(64000000/4000000.0)));
  2183   001270  0EE4               	movlw	228
  2184   001272                     u997:
  2185   001272  D000               	nop2	
  2186   001274  D000               	nop2	
  2187   001276  2EE8               	decfsz	wreg,f,c
  2188   001278  D7FC               	bra	u997
  2189   00127A  D000               	nop2	
  2190   00127C  D000               	nop2	
  2191   00127E                     
  2192                           ;dc_motor.c: 120:     }
  2193   00127E  4A43               	infsnz	turnLeft@i^0,f,c
  2194   001280  2A44               	incf	(turnLeft@i+1)^0,f,c
  2195   001282  5044               	movf	(turnLeft@i+1)^0,w,c
  2196   001284  E109               	bnz	u730
  2197   001286  0E32               	movlw	50
  2198   001288  5C43               	subwf	turnLeft@i^0,w,c
  2199   00128A  A0D8               	btfss	status,0,c
  2200   00128C  EF4A  F009         	goto	u731
  2201   001290  EF4C  F009         	goto	u730
  2202   001294                     u731:
  2203   001294  EF22  F009         	goto	l1793
  2204   001298                     u730:
  2205   001298  0012               	return		;funcret
  2206   00129A                     __end_of_turnLeft:
  2207                           	callstack 0
  2208                           
  2209 ;; *************** function _stop *****************
  2210 ;; Defined at:
  2211 ;;		line 89 in file "dc_motor.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  2214 ;;		 -> motorL(9), 
  2215 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  2216 ;;		 -> motorR(9), 
  2217 ;; Auto vars:     Size  Location     Type
  2218 ;;		None
  2219 ;; Return value:  Size  Location     Type
  2220 ;;                  1    wreg      void 
  2221 ;; Registers used:
  2222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2223 ;; Tracked objects:
  2224 ;;		On entry : 0/0
  2225 ;;		On exit  : 0/0
  2226 ;;		Unchanged: 0/0
  2227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2228 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2231 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2232 ;;Total ram usage:        4 bytes
  2233 ;; Hardware stack levels used: 1
  2234 ;; Hardware stack levels required when called: 2
  2235 ;; This function calls:
  2236 ;;		_setMotorPWM
  2237 ;; This function is called by:
  2238 ;;		_Left45
  2239 ;;		_Right45
  2240 ;;		_Yellow_REV1_R90
  2241 ;;		_Red_R90
  2242 ;;		_Green_L90
  2243 ;;		_Blue_T180
  2244 ;;		_Pink_rev1_L90
  2245 ;;		_Orange_R135
  2246 ;;		_LightBlue_L135
  2247 ;;		_White
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text17
  2252   0010D4                     __ptext17:
  2253                           	callstack 0
  2254   0010D4                     _stop:
  2255                           	callstack 27
  2256   0010D4                     
  2257                           ;dc_motor.c: 89: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 90: {;d
      +                          c_motor.c: 91:     while((mL->power)>0 && (mR->power)>0)
  2258   0010D4  EF9E  F008         	goto	l1777
  2259   0010D8                     l1763:
  2260                           
  2261                           ;dc_motor.c: 92:     {;dc_motor.c: 94:         if (mL->power>0){
  2262   0010D8  C03F  FFD9         	movff	stop@mL,fsr2l
  2263   0010DC  C040  FFDA         	movff	stop@mL+1,fsr2h
  2264   0010E0  50DF               	movf	indf2,w,c
  2265   0010E2  B4D8               	btfsc	status,2,c
  2266   0010E4  EF76  F008         	goto	u691
  2267   0010E8  EF78  F008         	goto	u690
  2268   0010EC                     u691:
  2269   0010EC  EF7D  F008         	goto	l1767
  2270   0010F0                     u690:
  2271   0010F0                     
  2272                           ;dc_motor.c: 95:             mL->power--;
  2273   0010F0  C03F  FFD9         	movff	stop@mL,fsr2l
  2274   0010F4  C040  FFDA         	movff	stop@mL+1,fsr2h
  2275   0010F8  06DF               	decf	indf2,f,c
  2276   0010FA                     l1767:
  2277                           
  2278                           ;dc_motor.c: 97:         if ((mR->power)>0){
  2279   0010FA  C041  FFD9         	movff	stop@mR,fsr2l
  2280   0010FE  C042  FFDA         	movff	stop@mR+1,fsr2h
  2281   001102  50DF               	movf	indf2,w,c
  2282   001104  B4D8               	btfsc	status,2,c
  2283   001106  EF87  F008         	goto	u701
  2284   00110A  EF89  F008         	goto	u700
  2285   00110E                     u701:
  2286   00110E  EF8E  F008         	goto	l1771
  2287   001112                     u700:
  2288   001112                     
  2289                           ;dc_motor.c: 98:             mR->power--;
  2290   001112  C041  FFD9         	movff	stop@mR,fsr2l
  2291   001116  C042  FFDA         	movff	stop@mR+1,fsr2h
  2292   00111A  06DF               	decf	indf2,f,c
  2293   00111C                     l1771:
  2294                           
  2295                           ;dc_motor.c: 100:         setMotorPWM(mL);
  2296   00111C  C03F  F039         	movff	stop@mL,setMotorPWM@m
  2297   001120  C040  F03A         	movff	stop@mL+1,setMotorPWM@m+1
  2298   001124  EC15  F007         	call	_setMotorPWM	;wreg free
  2299   001128                     
  2300                           ;dc_motor.c: 101:         setMotorPWM(mR);
  2301   001128  C041  F039         	movff	stop@mR,setMotorPWM@m
  2302   00112C  C042  F03A         	movff	stop@mR+1,setMotorPWM@m+1
  2303   001130  EC15  F007         	call	_setMotorPWM	;wreg free
  2304   001134                     
  2305                           ;dc_motor.c: 102:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  2306   001134  0E35               	movlw	53
  2307   001136                     u1007:
  2308   001136  2EE8               	decfsz	wreg,f,c
  2309   001138  D7FE               	bra	u1007
  2310   00113A  F000               	nop	
  2311   00113C                     l1777:
  2312                           
  2313                           ;dc_motor.c: 91:     while((mL->power)>0 && (mR->power)>0)
  2314   00113C  C03F  FFD9         	movff	stop@mL,fsr2l
  2315   001140  C040  FFDA         	movff	stop@mL+1,fsr2h
  2316   001144  50DF               	movf	indf2,w,c
  2317   001146  B4D8               	btfsc	status,2,c
  2318   001148  EFA8  F008         	goto	u711
  2319   00114C  EFAA  F008         	goto	u710
  2320   001150                     u711:
  2321   001150  EFB6  F008         	goto	l220
  2322   001154                     u710:
  2323   001154  C041  FFD9         	movff	stop@mR,fsr2l
  2324   001158  C042  FFDA         	movff	stop@mR+1,fsr2h
  2325   00115C  50DF               	movf	indf2,w,c
  2326   00115E  A4D8               	btfss	status,2,c
  2327   001160  EFB4  F008         	goto	u721
  2328   001164  EFB6  F008         	goto	u720
  2329   001168                     u721:
  2330   001168  EF6C  F008         	goto	l1763
  2331   00116C                     u720:
  2332   00116C                     l220:
  2333   00116C  0012               	return		;funcret
  2334   00116E                     __end_of_stop:
  2335                           	callstack 0
  2336                           
  2337 ;; *************** function _setMotorPWM *****************
  2338 ;; Defined at:
  2339 ;;		line 66 in file "dc_motor.c"
  2340 ;; Parameters:    Size  Location     Type
  2341 ;;  m               2   13[COMRAM] PTR struct DC_motor
  2342 ;;		 -> motorR(9), motorL(9), 
  2343 ;; Auto vars:     Size  Location     Type
  2344 ;;  negDuty         1   18[COMRAM] unsigned char 
  2345 ;;  posDuty         1   17[COMRAM] unsigned char 
  2346 ;; Return value:  Size  Location     Type
  2347 ;;                  1    wreg      void 
  2348 ;; Registers used:
  2349 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2350 ;; Tracked objects:
  2351 ;;		On entry : 0/0
  2352 ;;		On exit  : 0/0
  2353 ;;		Unchanged: 0/0
  2354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2355 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2356 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2357 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2358 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2359 ;;Total ram usage:        6 bytes
  2360 ;; Hardware stack levels used: 1
  2361 ;; Hardware stack levels required when called: 1
  2362 ;; This function calls:
  2363 ;;		___lwdiv
  2364 ;;		___wmul
  2365 ;; This function is called by:
  2366 ;;		_stop
  2367 ;;		_turnLeft
  2368 ;;		_turnRight
  2369 ;;		_fullSpeedAhead
  2370 ;;		_fullSpeedReverse
  2371 ;; This function uses a non-reentrant model
  2372 ;;
  2373                           
  2374                           	psect	text18
  2375   000E2A                     __ptext18:
  2376                           	callstack 0
  2377   000E2A                     _setMotorPWM:
  2378                           	callstack 27
  2379   000E2A                     
  2380                           ;dc_motor.c: 66: void setMotorPWM(struct DC_motor *m);dc_motor.c: 67: {;dc_motor.c: 68: 
      +                              unsigned char posDuty, negDuty;;dc_motor.c: 70:     if(m->brakemode) {
  2381   000E2A  EE20 F002          	lfsr	2,2
  2382   000E2E  5039               	movf	setMotorPWM@m^0,w,c
  2383   000E30  26D9               	addwf	fsr2l,f,c
  2384   000E32  503A               	movf	(setMotorPWM@m+1)^0,w,c
  2385   000E34  22DA               	addwfc	fsr2h,f,c
  2386   000E36  50DF               	movf	indf2,w,c
  2387   000E38  B4D8               	btfsc	status,2,c
  2388   000E3A  EF21  F007         	goto	u671
  2389   000E3E  EF23  F007         	goto	u670
  2390   000E42                     u671:
  2391   000E42  EF57  F007         	goto	l1751
  2392   000E46                     u670:
  2393   000E46                     
  2394                           ;dc_motor.c: 71:         posDuty=(m->PWMperiod) - ((unsigned int)(m->power)*(m->PWMperio
      +                          d))/100;
  2395   000E46  C039  FFD9         	movff	setMotorPWM@m,fsr2l
  2396   000E4A  C03A  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2397   000E4E  50DF               	movf	indf2,w,c
  2398   000E50  6E3B               	movwf	??_setMotorPWM^0,c
  2399   000E52  503B               	movf	??_setMotorPWM^0,w,c
  2400   000E54  6E2C               	movwf	___wmul@multiplier^0,c
  2401   000E56  6A2D               	clrf	(___wmul@multiplier+1)^0,c
  2402   000E58  EE20 F003          	lfsr	2,3
  2403   000E5C  5039               	movf	setMotorPWM@m^0,w,c
  2404   000E5E  26D9               	addwf	fsr2l,f,c
  2405   000E60  503A               	movf	(setMotorPWM@m+1)^0,w,c
  2406   000E62  22DA               	addwfc	fsr2h,f,c
  2407   000E64  CFDE F02E          	movff	postinc2,___wmul@multiplicand
  2408   000E68  CFDD F02F          	movff	postdec2,___wmul@multiplicand+1
  2409   000E6C  EC83  F00B         	call	___wmul	;wreg free
  2410   000E70  C02C  F032         	movff	?___wmul,___lwdiv@dividend
  2411   000E74  C02D  F033         	movff	?___wmul+1,___lwdiv@dividend+1
  2412   000E78  0E00               	movlw	0
  2413   000E7A  6E35               	movwf	(___lwdiv@divisor+1)^0,c
  2414   000E7C  0E64               	movlw	100
  2415   000E7E  6E34               	movwf	___lwdiv@divisor^0,c
  2416   000E80  ECE3  F00A         	call	___lwdiv	;wreg free
  2417   000E84  EE20 F003          	lfsr	2,3
  2418   000E88  5039               	movf	setMotorPWM@m^0,w,c
  2419   000E8A  26D9               	addwf	fsr2l,f,c
  2420   000E8C  503A               	movf	(setMotorPWM@m+1)^0,w,c
  2421   000E8E  22DA               	addwfc	fsr2h,f,c
  2422   000E90  50DF               	movf	indf2,w,c
  2423   000E92  6E3C               	movwf	(??_setMotorPWM+1)^0,c
  2424   000E94  5032               	movf	?___lwdiv^0,w,c
  2425   000E96  5C3C               	subwf	(??_setMotorPWM+1)^0,w,c
  2426   000E98  6E3D               	movwf	setMotorPWM@posDuty^0,c
  2427   000E9A                     
  2428                           ;dc_motor.c: 72:         negDuty=(m->PWMperiod);
  2429   000E9A  EE20 F003          	lfsr	2,3
  2430   000E9E  5039               	movf	setMotorPWM@m^0,w,c
  2431   000EA0  26D9               	addwf	fsr2l,f,c
  2432   000EA2  503A               	movf	(setMotorPWM@m+1)^0,w,c
  2433   000EA4  22DA               	addwfc	fsr2h,f,c
  2434   000EA6  50DF               	movf	indf2,w,c
  2435   000EA8  6E3E               	movwf	setMotorPWM@negDuty^0,c
  2436                           
  2437                           ;dc_motor.c: 73:     }
  2438   000EAA  EF7A  F007         	goto	l1755
  2439   000EAE                     l1751:
  2440                           
  2441                           ;dc_motor.c: 75:         posDuty=0;
  2442   000EAE  0E00               	movlw	0
  2443   000EB0  6E3D               	movwf	setMotorPWM@posDuty^0,c
  2444   000EB2                     
  2445                           ;dc_motor.c: 76:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  2446   000EB2  C039  FFD9         	movff	setMotorPWM@m,fsr2l
  2447   000EB6  C03A  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2448   000EBA  50DF               	movf	indf2,w,c
  2449   000EBC  6E3B               	movwf	??_setMotorPWM^0,c
  2450   000EBE  503B               	movf	??_setMotorPWM^0,w,c
  2451   000EC0  6E2C               	movwf	___wmul@multiplier^0,c
  2452   000EC2  6A2D               	clrf	(___wmul@multiplier+1)^0,c
  2453   000EC4  EE20 F003          	lfsr	2,3
  2454   000EC8  5039               	movf	setMotorPWM@m^0,w,c
  2455   000ECA  26D9               	addwf	fsr2l,f,c
  2456   000ECC  503A               	movf	(setMotorPWM@m+1)^0,w,c
  2457   000ECE  22DA               	addwfc	fsr2h,f,c
  2458   000ED0  CFDE F02E          	movff	postinc2,___wmul@multiplicand
  2459   000ED4  CFDD F02F          	movff	postdec2,___wmul@multiplicand+1
  2460   000ED8  EC83  F00B         	call	___wmul	;wreg free
  2461   000EDC  C02C  F032         	movff	?___wmul,___lwdiv@dividend
  2462   000EE0  C02D  F033         	movff	?___wmul+1,___lwdiv@dividend+1
  2463   000EE4  0E00               	movlw	0
  2464   000EE6  6E35               	movwf	(___lwdiv@divisor+1)^0,c
  2465   000EE8  0E64               	movlw	100
  2466   000EEA  6E34               	movwf	___lwdiv@divisor^0,c
  2467   000EEC  ECE3  F00A         	call	___lwdiv	;wreg free
  2468   000EF0  5032               	movf	?___lwdiv^0,w,c
  2469   000EF2  6E3E               	movwf	setMotorPWM@negDuty^0,c
  2470   000EF4                     l1755:
  2471                           
  2472                           ;dc_motor.c: 79:     if (m->direction) {
  2473   000EF4  EE20 F001          	lfsr	2,1
  2474   000EF8  5039               	movf	setMotorPWM@m^0,w,c
  2475   000EFA  26D9               	addwf	fsr2l,f,c
  2476   000EFC  503A               	movf	(setMotorPWM@m+1)^0,w,c
  2477   000EFE  22DA               	addwfc	fsr2h,f,c
  2478   000F00  50DF               	movf	indf2,w,c
  2479   000F02  B4D8               	btfsc	status,2,c
  2480   000F04  EF86  F007         	goto	u681
  2481   000F08  EF88  F007         	goto	u680
  2482   000F0C                     u681:
  2483   000F0C  EFAA  F007         	goto	l1759
  2484   000F10                     u680:
  2485   000F10                     
  2486                           ;dc_motor.c: 80:         *(m->posDutyHighByte)=posDuty;
  2487   000F10  EE20 F005          	lfsr	2,5
  2488   000F14  5039               	movf	setMotorPWM@m^0,w,c
  2489   000F16  26D9               	addwf	fsr2l,f,c
  2490   000F18  503A               	movf	(setMotorPWM@m+1)^0,w,c
  2491   000F1A  22DA               	addwfc	fsr2h,f,c
  2492   000F1C  CFDE F03B          	movff	postinc2,??_setMotorPWM
  2493   000F20  CFDD F03C          	movff	postdec2,??_setMotorPWM+1
  2494   000F24  C03B  FFD9         	movff	??_setMotorPWM,fsr2l
  2495   000F28  C03C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2496   000F2C  C03D  FFDF         	movff	setMotorPWM@posDuty,indf2
  2497                           
  2498                           ;dc_motor.c: 81:         *(m->negDutyHighByte)=negDuty;
  2499   000F30  EE20 F007          	lfsr	2,7
  2500   000F34  5039               	movf	setMotorPWM@m^0,w,c
  2501   000F36  26D9               	addwf	fsr2l,f,c
  2502   000F38  503A               	movf	(setMotorPWM@m+1)^0,w,c
  2503   000F3A  22DA               	addwfc	fsr2h,f,c
  2504   000F3C  CFDE F03B          	movff	postinc2,??_setMotorPWM
  2505   000F40  CFDD F03C          	movff	postdec2,??_setMotorPWM+1
  2506   000F44  C03B  FFD9         	movff	??_setMotorPWM,fsr2l
  2507   000F48  C03C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2508   000F4C  C03E  FFDF         	movff	setMotorPWM@negDuty,indf2
  2509                           
  2510                           ;dc_motor.c: 82:     } else {
  2511   000F50  EFCA  F007         	goto	l210
  2512   000F54                     l1759:
  2513                           
  2514                           ;dc_motor.c: 83:         *(m->posDutyHighByte)=negDuty;
  2515   000F54  EE20 F005          	lfsr	2,5
  2516   000F58  5039               	movf	setMotorPWM@m^0,w,c
  2517   000F5A  26D9               	addwf	fsr2l,f,c
  2518   000F5C  503A               	movf	(setMotorPWM@m+1)^0,w,c
  2519   000F5E  22DA               	addwfc	fsr2h,f,c
  2520   000F60  CFDE F03B          	movff	postinc2,??_setMotorPWM
  2521   000F64  CFDD F03C          	movff	postdec2,??_setMotorPWM+1
  2522   000F68  C03B  FFD9         	movff	??_setMotorPWM,fsr2l
  2523   000F6C  C03C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2524   000F70  C03E  FFDF         	movff	setMotorPWM@negDuty,indf2
  2525                           
  2526                           ;dc_motor.c: 84:         *(m->negDutyHighByte)=posDuty;
  2527   000F74  EE20 F007          	lfsr	2,7
  2528   000F78  5039               	movf	setMotorPWM@m^0,w,c
  2529   000F7A  26D9               	addwf	fsr2l,f,c
  2530   000F7C  503A               	movf	(setMotorPWM@m+1)^0,w,c
  2531   000F7E  22DA               	addwfc	fsr2h,f,c
  2532   000F80  CFDE F03B          	movff	postinc2,??_setMotorPWM
  2533   000F84  CFDD F03C          	movff	postdec2,??_setMotorPWM+1
  2534   000F88  C03B  FFD9         	movff	??_setMotorPWM,fsr2l
  2535   000F8C  C03C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2536   000F90  C03D  FFDF         	movff	setMotorPWM@posDuty,indf2
  2537   000F94                     l210:
  2538   000F94  0012               	return		;funcret
  2539   000F96                     __end_of_setMotorPWM:
  2540                           	callstack 0
  2541                           
  2542 ;; *************** function ___wmul *****************
  2543 ;; Defined at:
  2544 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  2545 ;; Parameters:    Size  Location     Type
  2546 ;;  multiplier      2    0[COMRAM] unsigned int 
  2547 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;  product         2    4[COMRAM] unsigned int 
  2550 ;; Return value:  Size  Location     Type
  2551 ;;                  2    0[COMRAM] unsigned int 
  2552 ;; Registers used:
  2553 ;;		wreg, status,2, status,0, prodl, prodh
  2554 ;; Tracked objects:
  2555 ;;		On entry : 0/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2559 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2560 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2562 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2563 ;;Total ram usage:        6 bytes
  2564 ;; Hardware stack levels used: 1
  2565 ;; This function calls:
  2566 ;;		Nothing
  2567 ;; This function is called by:
  2568 ;;		_setMotorPWM
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572                           	psect	text19
  2573   001706                     __ptext19:
  2574                           	callstack 0
  2575   001706                     ___wmul:
  2576                           	callstack 27
  2577   001706  502C               	movf	___wmul@multiplier^0,w,c
  2578   001708  022E               	mulwf	___wmul@multiplicand^0,c
  2579   00170A  CFF3 F030          	movff	prodl,___wmul@product
  2580   00170E  CFF4 F031          	movff	prodh,___wmul@product+1
  2581   001712  502C               	movf	___wmul@multiplier^0,w,c
  2582   001714  022F               	mulwf	(___wmul@multiplicand+1)^0,c
  2583   001716  50F3               	movf	243,w,c
  2584   001718  2631               	addwf	(___wmul@product+1)^0,f,c
  2585   00171A  502D               	movf	(___wmul@multiplier+1)^0,w,c
  2586   00171C  022E               	mulwf	___wmul@multiplicand^0,c
  2587   00171E  50F3               	movf	243,w,c
  2588   001720  2631               	addwf	(___wmul@product+1)^0,f,c
  2589   001722  C030  F02C         	movff	___wmul@product,?___wmul
  2590   001726  C031  F02D         	movff	___wmul@product+1,?___wmul+1
  2591   00172A  0012               	return		;funcret
  2592   00172C                     __end_of___wmul:
  2593                           	callstack 0
  2594                           
  2595 ;; *************** function ___lwdiv *****************
  2596 ;; Defined at:
  2597 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  2598 ;; Parameters:    Size  Location     Type
  2599 ;;  dividend        2    6[COMRAM] unsigned int 
  2600 ;;  divisor         2    8[COMRAM] unsigned int 
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;  quotient        2   10[COMRAM] unsigned int 
  2603 ;;  counter         1   12[COMRAM] unsigned char 
  2604 ;; Return value:  Size  Location     Type
  2605 ;;                  2    6[COMRAM] unsigned int 
  2606 ;; Registers used:
  2607 ;;		wreg, status,2, status,0
  2608 ;; Tracked objects:
  2609 ;;		On entry : 0/0
  2610 ;;		On exit  : 0/0
  2611 ;;		Unchanged: 0/0
  2612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2613 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2614 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2616 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2617 ;;Total ram usage:        7 bytes
  2618 ;; Hardware stack levels used: 1
  2619 ;; This function calls:
  2620 ;;		Nothing
  2621 ;; This function is called by:
  2622 ;;		_setMotorPWM
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           	psect	text20
  2627   0015C6                     __ptext20:
  2628                           	callstack 0
  2629   0015C6                     ___lwdiv:
  2630                           	callstack 27
  2631   0015C6  0E00               	movlw	0
  2632   0015C8  6E37               	movwf	(___lwdiv@quotient+1)^0,c
  2633   0015CA  0E00               	movlw	0
  2634   0015CC  6E36               	movwf	___lwdiv@quotient^0,c
  2635   0015CE  5034               	movf	___lwdiv@divisor^0,w,c
  2636   0015D0  1035               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2637   0015D2  B4D8               	btfsc	status,2,c
  2638   0015D4  EFEE  F00A         	goto	u641
  2639   0015D8  EFF0  F00A         	goto	u640
  2640   0015DC                     u641:
  2641   0015DC  EF18  F00B         	goto	l848
  2642   0015E0                     u640:
  2643   0015E0  0E01               	movlw	1
  2644   0015E2  6E38               	movwf	___lwdiv@counter^0,c
  2645   0015E4  EFF8  F00A         	goto	l1731
  2646   0015E8                     l1729:
  2647   0015E8  90D8               	bcf	status,0,c
  2648   0015EA  3634               	rlcf	___lwdiv@divisor^0,f,c
  2649   0015EC  3635               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2650   0015EE  2A38               	incf	___lwdiv@counter^0,f,c
  2651   0015F0                     l1731:
  2652   0015F0  AE35               	btfss	(___lwdiv@divisor+1)^0,7,c
  2653   0015F2  EFFD  F00A         	goto	u651
  2654   0015F6  EFFF  F00A         	goto	u650
  2655   0015FA                     u651:
  2656   0015FA  EFF4  F00A         	goto	l1729
  2657   0015FE                     u650:
  2658   0015FE                     l1733:
  2659   0015FE  90D8               	bcf	status,0,c
  2660   001600  3636               	rlcf	___lwdiv@quotient^0,f,c
  2661   001602  3637               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2662   001604  5034               	movf	___lwdiv@divisor^0,w,c
  2663   001606  5C32               	subwf	___lwdiv@dividend^0,w,c
  2664   001608  5035               	movf	(___lwdiv@divisor+1)^0,w,c
  2665   00160A  5833               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2666   00160C  A0D8               	btfss	status,0,c
  2667   00160E  EF0B  F00B         	goto	u661
  2668   001612  EF0D  F00B         	goto	u660
  2669   001616                     u661:
  2670   001616  EF12  F00B         	goto	l1741
  2671   00161A                     u660:
  2672   00161A  5034               	movf	___lwdiv@divisor^0,w,c
  2673   00161C  5E32               	subwf	___lwdiv@dividend^0,f,c
  2674   00161E  5035               	movf	(___lwdiv@divisor+1)^0,w,c
  2675   001620  5A33               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2676   001622  8036               	bsf	___lwdiv@quotient^0,0,c
  2677   001624                     l1741:
  2678   001624  90D8               	bcf	status,0,c
  2679   001626  3235               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2680   001628  3234               	rrcf	___lwdiv@divisor^0,f,c
  2681   00162A  2E38               	decfsz	___lwdiv@counter^0,f,c
  2682   00162C  EFFF  F00A         	goto	l1733
  2683   001630                     l848:
  2684   001630  C036  F032         	movff	___lwdiv@quotient,?___lwdiv
  2685   001634  C037  F033         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2686   001638  0012               	return		;funcret
  2687   00163A                     __end_of___lwdiv:
  2688                           	callstack 0
  2689                           
  2690                           	psect	rparam
  2691   000000                     
  2692                           	psect	idloc
  2693                           
  2694                           ;Config register IDLOC0 @ 0x200000
  2695                           ;	unspecified, using default values
  2696   200000                     	org	2097152
  2697   200000  0FFF               	dw	4095
  2698                           
  2699                           ;Config register IDLOC1 @ 0x200002
  2700                           ;	unspecified, using default values
  2701   200002                     	org	2097154
  2702   200002  0FFF               	dw	4095
  2703                           
  2704                           ;Config register IDLOC2 @ 0x200004
  2705                           ;	unspecified, using default values
  2706   200004                     	org	2097156
  2707   200004  0FFF               	dw	4095
  2708                           
  2709                           ;Config register IDLOC3 @ 0x200006
  2710                           ;	unspecified, using default values
  2711   200006                     	org	2097158
  2712   200006  0FFF               	dw	4095
  2713                           
  2714                           ;Config register IDLOC4 @ 0x200008
  2715                           ;	unspecified, using default values
  2716   200008                     	org	2097160
  2717   200008  0FFF               	dw	4095
  2718                           
  2719                           ;Config register IDLOC5 @ 0x20000A
  2720                           ;	unspecified, using default values
  2721   20000A                     	org	2097162
  2722   20000A  0FFF               	dw	4095
  2723                           
  2724                           ;Config register IDLOC6 @ 0x20000C
  2725                           ;	unspecified, using default values
  2726   20000C                     	org	2097164
  2727   20000C  0FFF               	dw	4095
  2728                           
  2729                           ;Config register IDLOC7 @ 0x20000E
  2730                           ;	unspecified, using default values
  2731   20000E                     	org	2097166
  2732   20000E  0FFF               	dw	4095
  2733                           
  2734                           	psect	config
  2735                           
  2736                           ;Config register CONFIG1L @ 0x300000
  2737                           ;	External Oscillator mode Selection bits
  2738                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2739                           ;	Power-up default value for COSC bits
  2740                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2741   300000                     	org	3145728
  2742   300000  AA                 	db	170
  2743                           
  2744                           ;Config register CONFIG1H @ 0x300001
  2745                           ;	unspecified, using default values
  2746                           ;	Clock Out Enable bit
  2747                           ;	CLKOUTEN = 0x1, unprogrammed default
  2748                           ;	Clock Switch Enable bit
  2749                           ;	CSWEN = 0x1, unprogrammed default
  2750                           ;	Fail-Safe Clock Monitor Enable bit
  2751                           ;	FCMEN = 0x1, unprogrammed default
  2752   300001                     	org	3145729
  2753   300001  FF                 	db	255
  2754                           
  2755                           ;Config register CONFIG2L @ 0x300002
  2756                           ;	unspecified, using default values
  2757                           ;	Master Clear Enable bit
  2758                           ;	MCLRE = 0x1, unprogrammed default
  2759                           ;	Power-up Timer Enable bit
  2760                           ;	PWRTE = 0x1, unprogrammed default
  2761                           ;	Low-power BOR enable bit
  2762                           ;	LPBOREN = 0x1, unprogrammed default
  2763                           ;	Brown-out Reset Enable bits
  2764                           ;	BOREN = 0x3, unprogrammed default
  2765   300002                     	org	3145730
  2766   300002  FF                 	db	255
  2767                           
  2768                           ;Config register CONFIG2H @ 0x300003
  2769                           ;	unspecified, using default values
  2770                           ;	Brown Out Reset Voltage selection bits
  2771                           ;	BORV = 0x3, unprogrammed default
  2772                           ;	ZCD Disable bit
  2773                           ;	ZCD = 0x1, unprogrammed default
  2774                           ;	PPSLOCK bit One-Way Set Enable bit
  2775                           ;	PPS1WAY = 0x1, unprogrammed default
  2776                           ;	Stack Full/Underflow Reset Enable bit
  2777                           ;	STVREN = 0x1, unprogrammed default
  2778                           ;	Debugger Enable bit
  2779                           ;	DEBUG = 0x1, unprogrammed default
  2780                           ;	Extended Instruction Set Enable bit
  2781                           ;	XINST = 0x1, unprogrammed default
  2782   300003                     	org	3145731
  2783   300003  FF                 	db	255
  2784                           
  2785                           ;Config register CONFIG3L @ 0x300004
  2786                           ;	WDT Period Select bits
  2787                           ;	WDTCPS = 0x1F, unprogrammed default
  2788                           ;	WDT operating mode
  2789                           ;	WDTE = OFF, WDT Disabled
  2790   300004                     	org	3145732
  2791   300004  9F                 	db	159
  2792                           
  2793                           ;Config register CONFIG3H @ 0x300005
  2794                           ;	unspecified, using default values
  2795                           ;	WDT Window Select bits
  2796                           ;	WDTCWS = 0x7, unprogrammed default
  2797                           ;	WDT input clock selector
  2798                           ;	WDTCCS = 0x7, unprogrammed default
  2799   300005                     	org	3145733
  2800   300005  FF                 	db	255
  2801                           
  2802                           ;Config register CONFIG4L @ 0x300006
  2803                           ;	unspecified, using default values
  2804                           ;	Write Protection Block 0
  2805                           ;	WRT0 = 0x1, unprogrammed default
  2806                           ;	Write Protection Block 1
  2807                           ;	WRT1 = 0x1, unprogrammed default
  2808                           ;	Write Protection Block 2
  2809                           ;	WRT2 = 0x1, unprogrammed default
  2810                           ;	Write Protection Block 3
  2811                           ;	WRT3 = 0x1, unprogrammed default
  2812                           ;	Write Protection Block 3
  2813                           ;	WRT4 = 0x1, unprogrammed default
  2814                           ;	Write Protection Block 3
  2815                           ;	WRT5 = 0x1, unprogrammed default
  2816                           ;	Write Protection Block 3
  2817                           ;	WRT6 = 0x1, unprogrammed default
  2818                           ;	Write Protection Block 3
  2819                           ;	WRT7 = 0x1, unprogrammed default
  2820   300006                     	org	3145734
  2821   300006  FF                 	db	255
  2822                           
  2823                           ;Config register CONFIG4H @ 0x300007
  2824                           ;	unspecified, using default values
  2825                           ;	Configuration Register Write Protection bit
  2826                           ;	WRTC = 0x1, unprogrammed default
  2827                           ;	Boot Block Write Protection bit
  2828                           ;	WRTB = 0x1, unprogrammed default
  2829                           ;	Data EEPROM Write Protection bit
  2830                           ;	WRTD = 0x1, unprogrammed default
  2831                           ;	Scanner Enable bit
  2832                           ;	SCANE = 0x1, unprogrammed default
  2833                           ;	Low Voltage Programming Enable bit
  2834                           ;	LVP = 0x1, unprogrammed default
  2835   300007                     	org	3145735
  2836   300007  FF                 	db	255
  2837                           
  2838                           ;Config register CONFIG5L @ 0x300008
  2839                           ;	unspecified, using default values
  2840                           ;	UserNVM Program Memory Code Protection bit
  2841                           ;	CP = 0x1, unprogrammed default
  2842                           ;	DataNVM Memory Code Protection bit
  2843                           ;	CPD = 0x1, unprogrammed default
  2844   300008                     	org	3145736
  2845   300008  FF                 	db	255
  2846                           
  2847                           ;Config register CONFIG5H @ 0x300009
  2848                           ;	unspecified, using default values
  2849   300009                     	org	3145737
  2850   300009  FF                 	db	255
  2851                           
  2852                           ;Config register CONFIG6L @ 0x30000A
  2853                           ;	unspecified, using default values
  2854                           ;	Table Read Protection Block 0
  2855                           ;	EBTR0 = 0x1, unprogrammed default
  2856                           ;	Table Read Protection Block 1
  2857                           ;	EBTR1 = 0x1, unprogrammed default
  2858                           ;	Table Read Protection Block 2
  2859                           ;	EBTR2 = 0x1, unprogrammed default
  2860                           ;	Table Read Protection Block 3
  2861                           ;	EBTR3 = 0x1, unprogrammed default
  2862                           ;	Table Read Protection Block 4
  2863                           ;	EBTR4 = 0x1, unprogrammed default
  2864                           ;	Table Read Protection Block 5
  2865                           ;	EBTR5 = 0x1, unprogrammed default
  2866                           ;	Table Read Protection Block 6
  2867                           ;	EBTR6 = 0x1, unprogrammed default
  2868                           ;	Table Read Protection Block 7
  2869                           ;	EBTR7 = 0x1, unprogrammed default
  2870   30000A                     	org	3145738
  2871   30000A  FF                 	db	255
  2872                           
  2873                           ;Config register CONFIG6H @ 0x30000B
  2874                           ;	unspecified, using default values
  2875                           ;	Boot Block Table Read Protection bit
  2876                           ;	EBTRB = 0x1, unprogrammed default
  2877   30000B                     	org	3145739
  2878   30000B  FF                 	db	255
  2879                           tosu	equ	0xFFF
  2880                           tosh	equ	0xFFE
  2881                           tosl	equ	0xFFD
  2882                           stkptr	equ	0xFFC
  2883                           pclatu	equ	0xFFB
  2884                           pclath	equ	0xFFA
  2885                           pcl	equ	0xFF9
  2886                           tblptru	equ	0xFF8
  2887                           tblptrh	equ	0xFF7
  2888                           tblptrl	equ	0xFF6
  2889                           tablat	equ	0xFF5
  2890                           prodh	equ	0xFF4
  2891                           prodl	equ	0xFF3
  2892                           indf0	equ	0xFEF
  2893                           postinc0	equ	0xFEE
  2894                           postdec0	equ	0xFED
  2895                           preinc0	equ	0xFEC
  2896                           plusw0	equ	0xFEB
  2897                           fsr0h	equ	0xFEA
  2898                           fsr0l	equ	0xFE9
  2899                           wreg	equ	0xFE8
  2900                           indf1	equ	0xFE7
  2901                           postinc1	equ	0xFE6
  2902                           postdec1	equ	0xFE5
  2903                           preinc1	equ	0xFE4
  2904                           plusw1	equ	0xFE3
  2905                           fsr1h	equ	0xFE2
  2906                           fsr1l	equ	0xFE1
  2907                           bsr	equ	0xFE0
  2908                           indf2	equ	0xFDF
  2909                           postinc2	equ	0xFDE
  2910                           postdec2	equ	0xFDD
  2911                           preinc2	equ	0xFDC
  2912                           plusw2	equ	0xFDB
  2913                           fsr2h	equ	0xFDA
  2914                           fsr2l	equ	0xFD9
  2915                           status	equ	0xFD8

Data Sizes:
    Strings     39
    Constant    0
    Data        9
    BSS         103
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     39      91
    BANK0           160      0      60
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 39
		 -> STR_1(CODE[39]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    S1763$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S1763$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    Yellow_REV1_R90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    Yellow_REV1_R90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    Right45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    Right45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    Left45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    Left45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    fullSpeedReverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedReverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedReverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    fullSpeedReverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedReverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedReverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), motorL(COMRAM[9]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    S286DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    S286DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 


Critical Paths under _main in COMRAM

    _main->_Yellow_REV1_R90
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _Yellow_REV1_R90->_Left45
    _Yellow_REV1_R90->_Right45
    _fullSpeedReverse->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _Right45->_turnRight
    _turnRight->_setMotorPWM
    _Left45->_turnLeft
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                34    34      0   33223
                                             37 COMRAM     2     2      0
                  _I2C_2_Master_Init
                    _Yellow_REV1_R90
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     287
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     287
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      15
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Yellow_REV1_R90                                      6     2      4   32771
                                             31 COMRAM     6     2      4
                             _Left45
                            _Right45
                     _fullSpeedAhead
                   _fullSpeedReverse
                               _stop
 ---------------------------------------------------------------------------------
 (2) _fullSpeedReverse                                     7     3      4    3831
                                             19 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       7     3      4    2615
                                             19 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _Right45                                              6     2      4    9964
                                             25 COMRAM     6     2      4
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _turnRight                                            6     2      4    2507
                                             19 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _Left45                                               6     2      4   10572
                                             25 COMRAM     6     2      4
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (3) _turnLeft                                             6     2      4    2507
                                             19 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _stop                                                 4     0      4    5197
                                             19 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    2133
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Yellow_REV1_R90
     _Left45
       _stop
         _setMotorPWM
           ___lwdiv
             ___wmul (ARG)
           ___wmul
       _turnLeft
         _setMotorPWM
     _Right45
       _stop
       _turnRight
         _setMotorPWM
     _fullSpeedAhead
       _setMotorPWM
     _fullSpeedReverse
       _setMotorPWM
     _stop
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _initDCmotorsPWM
   _initUSART4

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      58        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      3C       5       37.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     27      5B       1       95.8%
BITBIGSFRhlhll      54      0       0      41        0.0%
BITBIGSFRhhhh       40      0       0      32        0.0%
BITBIGSFRhlllh      37      0       0      43        0.0%
BITBIGSFRllh        2D      0       0      46        0.0%
BITBIGSFRlllhll     2A      0       0      53        0.0%
BITBIGSFRlllll      26      0       0      56        0.0%
BITBIGSFRlllhhh     1E      0       0      47        0.0%
BITBIGSFRhhllh      1E      0       0      36        0.0%
BITBIGSFRlllhll     19      0       0      54        0.0%
BITBIGSFRlllhhh     11      0       0      48        0.0%
BITBIGSFRhhhlh       E      0       0      33        0.0%
BITBIGSFRhlllll      8      0       0      44        0.0%
BITBIGSFRllllh       6      0       0      55        0.0%
BITBIGSFRlllhll      6      0       0      52        0.0%
BITBIGSFRlllhlh      5      0       0      51        0.0%
BITBIGSFRhlhhh       3      0       0      38        0.0%
BITBIGSFRlllhhl      3      0       0      50        0.0%
BITBIGSFRhllh        2      0       0      42        0.0%
BITBIGSFRhhlh        2      0       0      35        0.0%
BITBIGSFRlllhhh      1      0       0      49        0.0%
BITBIGSFRhlhlh       1      0       0      40        0.0%
BITBIGSFRhlhhl       1      0       0      39        0.0%
BITBIGSFRhhhll       1      0       0      34        0.0%
BITBIGSFRhhlll       1      0       0      37        0.0%
BITBIGSFRlh          1      0       0      45        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      97      57        0.0%
DATA                 0      0      97       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Mar 11 17:03:07 2023

                         l22 176C                           l19 16B2                           l61 16DC  
                         l70 178C                           l64 16DE                           l67 1704  
                         l76 1782                           l79 1778                           u40 16EE  
                         u41 16EA                           u50 1704                           u51 1700  
        ___wmul@multiplicand 002E                          l210 0F94                          l203 13BC  
                        l220 116C                          l230 1202                          l240 1544  
                        l225 1298                          l243 14C4                          l235 15C4  
                        l333 174C                          l246 1440                          l357 172A  
                        l269 10D2                          l855 1638                          l848 1630  
                        u700 1112                          u701 110E                          u710 1154  
                        u711 1150                          u640 15E0                          u720 116C  
                        u641 15DC                          u721 1168                          u650 15FE  
                        u730 1298                          u651 15FA                          u731 1294  
                        u660 161A                          u740 1202                          u661 1616  
                        u741 11FE                          u670 0E46                          u750 15C4  
                        u671 0E42                          u751 15C0                          u680 0F10  
                        u760 1544                          u681 0F0C                          u761 1540  
                        u690 10F0                          u770 0FA6                          u691 10EC  
                        u907 1520                          u771 0FA2                          u917 15A0  
                        u927 13DC                          u847 1318                          u937 1408  
                        u857 1694                          u947 1432                          u867 0FD8  
                        u957 11DC                          u877 1004                          u967 1460  
                        u887 1030                          u977 148C                          u897 10B0  
                        u987 14B6                          u997 1272                          wreg 000FE8  
                       l1065 16DE                         l1171 16C6                         l1067 16EE  
                       l1091 1774                         l1251 1730                         l1173 16C8  
                       l1165 16B4                         l1085 1784                         l1093 177A  
                       l1261 174A                         l1253 173A                         l1175 16CA  
                       l1167 16BE                         l1087 1788                         l1095 177E  
                       l1255 173C                         l1169 16C4                         l1089 1770  
                       l1257 1746                         l1249 172C                         l1259 1748  
                       l1801 127E                         l1731 15F0                         l1723 15C6  
                       l1803 1282                         l1811 11A6                         l1741 1624  
                       l1733 15FE                         l1725 15CE                         l1717 1706  
                       l1821 11CE                         l1805 116E                         l1901 132E  
                       l1743 162A                         l1735 1604                         l1727 15E0  
                       l1719 1722                         l1751 0EAE                         l1823 11DA  
                       l1807 118E                         l1831 1546                         l1911 1396  
                       l1903 133E                         l1737 161A                         l1729 15E8  
                       l1753 0EB2                         l1745 0E2A                         l1761 10D4  
                       l1825 11E8                         l1817 11AE                         l1809 119A  
                       l1841 1582                         l1833 1566                         l1921 13B0  
                       l1913 1398                         l1905 1364                         l1739 1622  
                       l1755 0EF4                         l1747 0E46                         l1771 111C  
                       l1763 10D8                         l1827 11EC                         l1819 11C2  
                       l1843 158E                         l1851 14C6                         l1931 0FE6  
                       l1923 13BA                         l1915 13A2                         l1907 1368  
                       l1757 0F10                         l1749 0E9A                         l1773 1128  
                       l1765 10F0                         l1781 1204                         l1845 159A  
                       l1861 1502                         l1853 14E6                         l1941 10BE  
                       l1933 1012                         l1925 0F96                         l1829 1750  
                       l1917 13A4                         l1909 138C                         l1759 0F54  
                       l1775 1134                         l1767 10FA                         l1783 1224  
                       l1871 1442                         l1847 15AA                         l1839 156E  
                       l1863 150E                         l1935 1026                         l1927 0FA6  
                       l1919 13AE                         l1951 12A6                         l1769 1112  
                       l1777 113C                         l1793 1244                         l1785 1230  
                       l1873 1456                         l1881 13BE                         l1849 15AE  
                       l1865 151A                         l1929 0FCE                         l1937 106A  
                       l1961 12BE                         l1953 12A6                         l1945 129A  
                       l1779 1154                         l1795 1258                         l1787 123C  
                       l1875 146E                         l1883 13D2                         l1867 152A  
                       l1859 14EE                         l1939 10A6                         l1891 1680  
                       l1971 12DE                         l1963 12C6                         l1955 12B2  
                       l1947 129E                         l1797 1264                         l1877 1498  
                       l1885 13EA                         l1869 152E                         l1893 1684  
                       l1973 12F2                         l1965 12CE                         l1957 12B6  
                       l1949 12A2                         l1799 1270                         l1879 14AC  
                       l1887 1414                         l1895 168E                         l1975 12FA  
                       l1967 12D6                         l1959 12BA                         l1889 1428  
                       l1897 169E                         l1977 130E                         l1969 12DA  
                       l1899 16A8                         STR_1 0E01                         u1007 1136  
               _BAUD4CONbits 000EE9                         _T2PR 000FBC                         _main 129A  
                       fsr2h 000FDA                         indf2 000FDF                         fsr1l 000FE1  
                       fsr2l 000FD9                         _stop 10D4                         prodh 000FF4  
                       prodl 000FF3                         start 0000                 ___param_bank 000000  
            __end_of_Right45 1442             ?_Yellow_REV1_R90 004B                        ?_main 002C  
                      ?_stop 003F              __end_of___lwdiv 163A   __end_of_I2C_2_Master_Start 178E  
 __end_of_I2C_2_Master_Write 177A            fullSpeedReverse@i 0044                        tablat 000FF5  
                      status 000FD8              __initialization 163A                 __end_of_main 132E  
               __end_of_stop 116E                       ??_main 0051                       ??_stop 0043  
              __activetblptr 000001                 ?_setMotorPWM 0039                       _CCPR1H 000FAA  
                     _CCPR2H 000FA6                       _CCPR3H 000F25                       _CCPR4H 000F21  
                     _RC0PPS 000E62                       _RC4REG 000EE3                       _RE2PPS 000E74  
                     _RD5PPS 000E6F                       _RC7PPS 000E69                       _RE4PPS 000E76  
                     _RD6PPS 000E70                       _RG6PPS 000E88     __end_of_color_click_init 16B4  
                     _RX4PPS 000E15                       _TX4REG 000EE4                       _Left45 1442  
                  ??_Right45 0049             _fullSpeedReverse 14C6                 _CCPTMRS0bits 000FAD  
                     ___wmul 1706                    ??___lwdiv 0036                       clear_0 1660  
                     clear_1 166C           fullSpeedReverse@mL 003F           fullSpeedReverse@mR 0041  
                     _motorL 0023                       _motorR 001A                       isa$std 000001  
               __pdataCOMRAM 0053                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                       stop@mL 003F  
                     stop@mR 0041            ??_initDCmotorsPWM 002E             __end_of_turnLeft 129A  
                 __accesstop 0060      __end_of__initialization 1672              fullSpeedAhead@i 0044  
              ___rparam_used 000001               __pcstackCOMRAM 002C                  _ForwardFlag 0015  
                 __pbssBANK0 0060                      ?_Left45 0045            _color_writetoaddr 174E  
               _T2CLKCONbits 000FBF           ?_color_writetoaddr 002E                      ?___wmul 002C  
        ??_color_writetoaddr 002F                      _SP4BRGH 000EE6                      _SP4BRGL 000EE5  
                    _SSP2ADD 000ED6                      _SSP2BUF 000ED5       color_writetoaddr@value 002E  
  __end_of_color_writetoaddr 176E           _I2C_2_Master_Start 1784                   _initUSART4 172C  
         _I2C_2_Master_Write 176E                      _Right45 13BE                      __Hparam 0000  
                    __Lparam 0000          ?_I2C_2_Master_Start 002C                      ___lwdiv 15C6  
        ?_I2C_2_Master_Write 002C                 __psmallconst 0E00                      __pcinit 163A  
                    __ramtop 0E00                    ?_turnLeft 003F                      __ptext0 129A  
                    __ptext1 172C                      __ptext2 132E                      __ptext3 1680  
                    __ptext4 174E                      __ptext5 176E                      __ptext6 177A  
                    __ptext7 1784                      __ptext8 16DE                      __ptext9 16B4  
                  _T2CONbits 000FBD     __end_of_fullSpeedReverse 1546                    _T2HLTbits 000FBE  
              _RxBufWriteCnt 0019         ??_I2C_2_Master_Start 002D         ??_I2C_2_Master_Write 002D  
       end_of_initialization 1672            ?_color_click_init 002C               __45drightdelay 0057  
         ??_color_click_init 0030                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE              _initDCmotorsPWM 132E  
                 ??_turnLeft 0043           setMotorPWM@negDuty 003E            __end_of_turnRight 1204  
         setMotorPWM@posDuty 003D                    _TRISCbits 000F83                    _TRISDbits 000F84  
                  _TRISEbits 000F85                    _TRISGbits 000F87             fullSpeedAhead@mL 003F  
           fullSpeedAhead@mR 0041     color_writetoaddr@address 002F                  _CCP1CONbits 000FAB  
               _EUSART4RXbuf 0001                 _EUSART4TXbuf 0060                  _CCP2CONbits 000FA7  
                _CCP3CONbits 000F26                  ?_initUSART4 002C                  _CCP4CONbits 000F22  
             __end_of_Left45 14C6               _fullSpeedAhead 1546               __end_of___wmul 172C  
              __pidataCOMRAM 178E                    Right45@mL 0045                    Right45@mR 0047  
        start_initialization 163A                _TxBufWriteCnt 0017                  __halfsquare 0053  
          ??_Yellow_REV1_R90 004F                     ??_Left45 0049      __end_of_initDCmotorsPWM 13BE  
     __end_of_fullSpeedAhead 15C6                     ??___wmul 0030                  __pbssCOMRAM 0001  
                   ?_Right45 0045             ___lwdiv@dividend 0032              ?_fullSpeedAhead 003F  
                   ?___lwdiv 0032                  __smallconst 0E00            _I2C_2_Master_Idle 16DE  
          _I2C_2_Master_Init 16B4                __45dleftdelay 0059            _I2C_2_Master_Stop 177A  
               _RxBufReadCnt 0018            ?_fullSpeedReverse 003F           ?_I2C_2_Master_Idle 002C  
         ?_I2C_2_Master_Init 002C                ??_setMotorPWM 003B           ?_I2C_2_Master_Stop 002C  
           ___lwdiv@quotient 0036     initDCmotorsPWM@PWMperiod 002C           ??_fullSpeedReverse 0043  
        ??_I2C_2_Master_Idle 002C          ??_I2C_2_Master_Init 002C               ___wmul@product 0030  
        ??_I2C_2_Master_Stop 002D                     _LATCbits 000F7B                     _LATEbits 000F7D  
                   _LATGbits 000F7F                  turnRight@mL 003F                  turnRight@mR 0041  
                   _PIR4bits 000E37             ?_initDCmotorsPWM 002C                     Left45@mL 0045  
                   Left45@mR 0047                     _SSP2CON2 000EDA                     _SSP2STAT 000ED8  
  __end_of_I2C_2_Master_Idle 1706    __end_of_I2C_2_Master_Init 16DE            ___wmul@multiplier 002C  
  __end_of_I2C_2_Master_Stop 1784                 setMotorPWM@m 0039                     _DataFlag 005B  
I2C_2_Master_Write@data_byte 002D                 _TxBufReadCnt 0016                    _turnRight 116E  
                   __1square 0055                    copy_data0 164E          __end_of_setMotorPWM 0F96  
               ??_initUSART4 002C                     __Hrparam 0000                     __Lrparam 0000  
               __Lsmallconst 0E00                   _ANSELDbits 000EA7              _Yellow_REV1_R90 0F96  
            ___lwdiv@divisor 0034           __end_of_initUSART4 174E              ___lwdiv@counter 0038  
                 ?_turnRight 003F                     __ptext10 0F96                     __ptext11 14C6  
                   __ptext20 15C6                     __ptext12 1546                     __ptext13 13BE  
                   __ptext14 116E                     __ptext15 1442                     __ptext16 1204  
                   __ptext17 10D4                     __ptext18 0E2A                     __ptext19 1706  
               _SSP2CON1bits 000ED9                 _SSP2CON2bits 000EDA                   turnLeft@mL 003F  
                 turnLeft@mR 0041                   turnRight@i 0043                     isa$xinst 000000  
                 _RC4STAbits 000EE7                     _turnLeft 1204                  _setMotorPWM 0E2A  
           ??_fullSpeedAhead 0043                    turnLeft@i 0043            Yellow_REV1_R90@mL 004B  
          Yellow_REV1_R90@mR 004D      __end_of_Yellow_REV1_R90 10D4             _color_click_init 1680  
                 _SSP2DATPPS 000E1D                   _SSP2CLKPPS 000E1C                  ??_turnRight 0043  
                 _TX4STAbits 000EE8  
